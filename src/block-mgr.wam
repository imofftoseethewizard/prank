;; # Block Allocation Manager
;;
;; This module manages allocation and deallocation of variable-length blocks of
;; memory.It is intended to be used by the bytevectors, numbers, strings,
;; symbols, and vectors modules, and by the garbage collector for its internal
;; indexes.
;;
;;
;; ## Design
;;
;; The simplest memory management policy is static allocation, common on small,
;; embedded devices with limited RAM and functionality.  FORTH uses a slightly
;; more advanced allocation scheme with just a single "dictionary" pointer that
;; increases with each allocation.  One could think of this as static
;; allocation, but incrementally defined.  Beyond that, things get complex
;; quickly.  To support reuse of memory that is no longer needed, we need to
;; track deallocated blocks, and these could be stored in a list, either
;; implemented as a linked list or in a dynamic array.  Typcial distributions of
;; block sizes lead to fragmentation and a loss of memory efficiency.  (There
;; are special cases where this does not apply, such as when all blocks have the
;; same size, or when they have varying sizes, but form a power law
;; distribution, etc).  Further if the number of free blocks grows large, then
;; searching through the list of free blocks for one of a matching size becomes
;; increasingly expensive, or we could maintain a sorted array, but then
;; allocation and free become expensive.  The free list could be recast as a
;; heap, but then we aren't guaranteed to find a block of the correct size, so
;; to maintain computational efficiency we need to allow blocks to be split.
;; Splitting blocks just makes the fragmentation problem worse.  We could
;; coalesce adjacent free blocks, but then we need an ordered data structure
;; again, and we're back to having a free list.  But now the free list needs to
;; be careful not to corrupt the heap when coalescing free blocks.  That still
;; leaves the possibility of small bits of memory lost between larger blocks
;; which have a long lifetime.  To handle that, we need to be able to relocate
;; allocated blocks, but that requires an ordered list of all blocks -- both
;; free and allocated -- and indirection of block id and block storage address.
;; So that's what we have here: indirection of storage address, an ordered list
;; of blocks, an ordered list of free blocks, and a heap of free blocks.
;; Allocation is O(#free^1/2) and deallocation are O(log(#free)).
;; Defragmentation is incremental.
;;
;; ## Data Representation
;;
;; A block is a an address of an item in the block list.  Each block contains
;; the address of the memory it references, the size, and links to the previous
;; and next blocks in the list.
;;
;; A free entry is the address of an item in the free list.  Each free entry
;; contains the address of the block it references, and links to the previous
;; and next entries in the list.
;;
;; The heap is sorted by size and implemented as an array, each element of which
;; comprises two values, the block and the free entry that contains it.  While
;; this block is accessible from the free entry by a single memory dereference,
;; access to the size of the blocks stored in the heap is common within loops in
;; this module, so the extra memory is probably worth it.  (In simulations of
;; memory use of 100MB of blocks of typical struct sizes -- Poisson
;; distribution, expected 5 values of 4 bytes each -- heap sizes typically stay
;; very close to the square root of the number of allocated blocks, around 2500
;; elements, indicating that the extra storage cost was aobut 10KB.)
;;
;; A blockset is an index into an array of structures which capture the state of
;; a client's memory.  These structures include pointers to the block list,
;; free list, heap, and various values necessary for managing memory.
;;
;;
;; ## Memory Access
;;
;; The block allocation manager has no direct access to the memory it manages.
;; It uses its own memory to store the state of each client module, the block
;; lists, free lists, and heaps.  It needs access to client memory when it is
;; attempting to allocate a block larger than any free block in the heap, in
;; which case it uses client proxies memory.size and memory.grow.  It also needs
;; access during defragmentation, when it needs to call a proxy for memory.copy.
;; Access to these instructions is provided through three tables, one for each
;; of the memory functions mentioned.  The client module provides a client id,
;; which is the index into each of the tables for its proxies for the memory it
;; owns.  The clients need to be coordinated to ensure that there are no
;; conflicts.  (The client ids are defined in globals.wam.)
;;
;; See $memory-copy-sig, $memory-copy, etc below the import section.
;;
;; Clients need to import these tables and fill their entries before calling any
;; block allocation manager functions.
;;
;;
;; ## Allocation Algorithm
;;
;; The allocation first checks that the largest free block is at least as big as
;; the request, otherwise a new free block is added, potentially growing the
;; managed memory. It then searches a representative subset of the heap for the
;; smallest free block that is at least as big as the requested size.  If that
;; block is not greater than the maximum allowable overage, then it is used,
;; otherwise it splits the largest free block to create a new block to return to
;; the caller.
;;
;;
;; ## Deallocation Algorithm
;;
;; Deallocation adds the block to the free list and the heap, and if the
;; length of the free list is greater than the square root
;; ## Heap maintenance
;;
;; During defragmentation, free blocks are coalesced.  One free block becomes
;; bigger and another is removed from the block list.  The heap, however, will
;; still have references to these blocks.  There is no efficient way to find
;; these blocks, so they must be marked for future disposal and handled when the
;; heap encounters them.  In order not to corrupt the heap, the sizes of the
;; blocks must remain unchanged.  The solution here is set the address field to
;; -1 to signal that a block is unused.  To coalese two free blocks, the two
;; source blocks are both set to unused and removed from the block list and free
;; list.  A new block is created to replace them and added to the heap.  When a
;; traversal of the heap encounters an entry with an unused block, it sets the
;; block's size field to 0 and sinks it to the bottom.  Later when a new entry
;; is added, if the would-be parent of the entry is unused, then instead of
;; becoming a child, it takes the unused entry's place and the unused entry is
;; deallocated.
;;
;; That leaves the question of when the heap checks for unused nodes Obviously,
;; if the free list and the heap have the same number of items, checking is
;; unnecessary.  It is also obvious that the root needs to be checked before it
;; is returned as a free block.  Perhaps less obvious is that if the heap were
;; half unused items, that would only add one more operation to every full
;; traversal, on average, and most sink/swim operations do not actually fully
;; traverse the heap.  A lot of unused items in the heap is does not incur a
;; large computational penalty, but it does consume pair memory.  On the other
;; hand, keeping the unused items to a minimum would require more computation,
;; so we need a policy parameter and a two sets of heap traversal routines.
;; TODO: When the fraction of unused nodes crosses the policy threshold, heap
;; operations use the set of routines that check for unused nodes during
;; traversals.
;;
;; Adding an node and removing the head from heap both require knowing where
;; the last node of the heap is (or, equivalently) where it should go.
;; Adding an node is straightforward: add it at the appropriate place, and
;; repeatedly swap it with its parent until the heap condition is satisfied, in
;; this case, that the block it references is no smaller than its two children,
;; but no bigger than its parent.  In the case of removing an node, we
;; replace the root with last elemment of the heap, and then swap with its
;; largest child until the heap condition is satisfied.  With an array-based
;; heap, this is
;;
;; Removing a block from the free list
;;
;; Adding an node to the heap.
;;
;; Finding Free Blocks
;;
;; (32 - clz(Heap count)) >> 1 levels
;; compute max <= limit
;; check for unused blocks, sink if found

(module

 (import "pairs" "get-pair-car" (func $get-pair-car (param i32)     (result i32)))
 (import "pairs" "get-pair-cdr" (func $get-pair-cdr (param i32)     (result i32)))
 (import "pairs" "make-pair"    (func $make-pair    (param i32 i32) (result i32)))
 (import "pairs" "dealloc-pair" (func $dealloc-pair (param i32)))

 (include "./globals.wam")

 ;; Used to store blockset records and the blocksets' quantized free list heads.
 (memory (debug (export "memory")) 1)

 (debug (global $debug (export "#debug") (mut i32) (i32.const 0)))

 (global $blockset-size (export "blockset-size") i32 (i32.const 0x0040))
 (global $blockset-size-bits (export "blockset-size-bits") i32 (i32.const 6))

 (global $blockset-block-count           (export "blockset-block-count")           i32 (i32.const 0x00))
 (global $blockset-block-list            (export "blockset-block-list")            i32 (i32.const 0x04))
 (global $blockset-defrag-cursor         (export "blockset-defrag-cursor")         i32 (i32.const 0x08))
 (global $blockset-end-block             (export "blockset-end-block")             i32 (i32.const 0x0c))
 (global $blockset-free-count            (export "blockset-free-count")            i32 (i32.const 0x10))
 (global $blockset-free-lists-base       (export "blockset-free-lists-base")       i32 (i32.const 0x14))
 (global $blockset-free-lists-top        (export "blockset-free-lists-top")        i32 (i32.const 0x18))
 (global $blockset-free-space            (export "blockset-free-space")            i32 (i32.const 0x1c))
 (global $blockset-immobile-block-size   (export "blockset-immobile-block-size")   i32 (i32.const 0x20))
 (global $blockset-relocation-size-limit (export "blockset-relocation-size-limit") i32 (i32.const 0x24))
 (global $blockset-unused-count          (export "blockset-unused-count")          i32 (i32.const 0x28))

 (debug (global $alloc-precision-bits (export "alloc-precision-bits") (mut i32) (i32.const 4)))
 (release (global $alloc-precision-bits i32 (i32.const 4)))

 (global $ref-size (debug (export "refs-size") i32 (i32.const 0x10)))
 (global $ref-size-bits (debug (export "refs-size-bits") i32 (i32.const 4)))

 (global $refs-top      (debug (export "refs-top"))      (mut i32) (i32.const 0))
 (global $ref-count     (debug (export "ref-count"))     (mut i32) (i32.const 0))
 (global $ref-free-list (debug (export "ref-free-list")) (mut i32) (i32.const 0))

 ;; create 4 KB of block refs (256 * 16 = 4096) when growing storage
 (global $grow-storage-ref-count (export "grow-storage-ref-count") i32 (i32.const 256))

 (global $block-addr                (export "block-addr")                i32 (i32.const 0x00))
 (global $block-size                (export "block-size")                i32 (i32.const 0x04))
 (global $block-flags               (export "block-flags")               i32 (i32.const 0x04))
 (global $block-next-block          (export "block-next-block")          i32 (i32.const 0x08))
 (global $block-previous-block      (export "block-previous-block")      i32 (i32.const 0x0c))

 (global $block-size-mask   (debug (export "block-size-mask")   i32 (i32.const 0x3fffffff)))
 (global $block-flags-mask  (debug (export "block-flags-mask")  i32 (i32.const 0xc0000000)))
 (global $block-free-flag   (debug (export "block-free-flag")   i32 (i32.const 0x80000000)))
 (global $block-unused-flag (debug (export "block-unused-flag") i32 (i32.const 0x40000000)))

 (type $memory-copy-sig (func (param i32 i32 i32)))
 (type $memory-grow-sig (func (param i32) (result i32)))
 (type $memory-size-sig (func (result i32)))

 (table $memory-copy (export "memory-copy") 16 funcref)
 (table $memory-grow (export "memory-grow") 16 funcref)
 (table $memory-size (export "memory-size") 16 funcref)

 ;;-----------------------------------------------------------------------------
 ;;
 ;; Block Accessors
 ;;

 (macro %get-block-addr
   (expr ,block)
   (i32.load ,block))

 (macro %get-block-flags-addr
   (expr ,block)
   (i32.add ,block (global.get $block-flags)))

 (macro %get-block-size-addr
   (expr ,block)
   (i32.add ,block (global.get $block-size)))

 (macro %get-block-size
   (expr ,block)
   (i32.and (i32.load (%get-block-size-addr ,block))
            (global.get $block-size-mask)))

 (macro %get-next-block
   (expr ,block)
   (i32.load (i32.add ,block (global.get $block-next-block))))

 (macro %get-previous-block
   (expr ,block)
   (i32.load (i32.add ,block (global.get $block-previous-block))))

 (macro %is-allocated-block
   (expr ,block)
   (i32.eqz (i32.and (i32.load (%get-block-flags-addr ,block))
                     (global.get $block-flags-mask))))

 (macro %is-free-block
   (expr ,block)
   (i32.and (i32.load (%get-block-flags-addr ,block)) (global.get $block-free-flag)))

 (macro %is-unused-block
   (expr ,block)
   (i32.and (i32.load (%get-block-flags-addr ,block)) (global.get $block-unused-flag)))

 (macro %set-block-addr
   (expr ,block)
   (expr ,addr)
   (i32.store ,block ,addr))

 (macro %set-block-size
   (expr ,block)
   (expr ,size)
   (i32.store (%get-block-size-addr ,block)
              (i32.and ,size (global.get $block-size-mask))))

 (macro %set-next-block
   (expr ,block)
   (expr ,size)
   (i32.store (i32.add ,block (global.get $block-next-block)) ,size))

 (macro %set-previous-block
   (expr ,block)
   (expr ,size)
   (i32.store (i32.add ,block (global.get $block-previous-block)) ,size))

 (debug
  (func $get-block-addr (export "get-block-addr")
    (param $block i32)
    (result i32)
    (%get-block-addr (local.get $block)))

  (func $get-block-size (export "get-block-size")
    (param $block i32)
    (result i32)
    (%get-block-size (local.get $block)))

  (func $get-next-block (export "get-next-block")
    (param $block i32)
    (result i32)
    (%get-next-block (local.get $block)))

  (func $get-previous-block (export "get-previous-block")
    (param $block i32)
    (result i32)
    (%get-previous-block (local.get $block)))

  (func $is-allocated-block (export "is-allocated-block")
    (param $block i32)
    (result i32)
    (%is-allocated-block (local.get $block)))

  (func $is-free-block (export "is-free-block")
    (param $block i32)
    (result i32)
    (%is-free-block (local.get $block)))

  (func $is-unused-block (export "is-unused-block")
    (param $block i32)
    (result i32)
    (%is-unused-block (local.get $block)))

  (func $set-block-addr (export "set-block-addr")
    (param $block i32)
    (param $addr i32)
    (%set-block-addr (local.get $block) (local.get $addr)))

  (func $set-block-size (export "set-block-size")
    (param $block i32)
    (param $size i32)
    (%set-block-size (local.get $block) (local.get $size))))

 ;;-----------------------------------------------------------------------------
 ;;
 ;; Block Utilities
 ;;

 (macro %get-next-block-addr
   (expr ,block)
   (i32.add (%get-block-addr ,block) (%get-block-size ,block)))

 (func $mark-block-allocated (debug (export "mark-block-allocated"))
   (param $block i32)

   (local $addr i32)
   (local $size-flags i32)

   (local.set $addr (%get-block-size-addr (local.get $block)))
   (local.set $size-flags (i32.load (local.get $addr)))

   (i32.store (local.get $addr) (i32.and (local.get $size-flags)
                                         (global.get $block-size-mask))))

 (func $mark-block-free (debug (export "mark-block-free"))
   (param $block i32)

   (local $addr i32)
   (local $size-flags i32)

   (local.set $addr (%get-block-size-addr (local.get $block)))
   (local.set $size-flags (i32.load (local.get $addr)))

   (i32.store (local.get $addr) (i32.or (local.get $size-flags)
                                         (global.get $block-free-flag))))

 (func $mark-block-unused (debug (export "mark-block-unused"))
   (param $block i32)

   (local $addr i32)
   (local $size-flags i32)

   (local.set $addr (%get-block-size-addr (local.get $block)))
   (local.set $size-flags (i32.load (local.get $addr)))

   (i32.store (local.get $addr) (i32.or (local.get $size-flags)
                                        (global.get $block-unused-flag))))

 (debug
  (func $get-next-block-addr (export "get-next-block-addr")
    (param $block i32)
    (result i32)
    (%get-next-block-addr (local.get $block))))

 ;;-----------------------------------------------------------------------------
 ;;
 ;; Blockset Accessors
 ;;

 (macro %get-blockset
   (expr ,blockset-id)
   (i32.shl ,blockset-id (global.get $blockset-size-bits)))

 (macro %get-blockset-id
   (expr ,blockset)
   (i32.shr_u ,blockset (global.get $blockset-size-bits)))

 (macro %get-blockset-block-count
   (expr ,blockset)
   (i32.load (i32.add ,blockset (global.get $blockset-block-count))))

 (macro %get-blockset-block-list
   (expr ,blockset)
   (i32.load (i32.add ,blockset (global.get $blockset-block-list))))

 (macro %get-blockset-defrag-cursor
   (expr ,blockset)
   (i32.load (i32.add ,blockset (global.get $blockset-defrag-cursor))))

 (macro %get-blockset-end-block
   (expr ,blockset)
   (i32.load (i32.add ,blockset (global.get $blockset-end-block))))

 (macro %get-blockset-free-count
   (expr ,blockset)
   (i32.load (i32.add ,blockset (global.get $blockset-free-count))))

 (macro %get-blockset-free-lists-base
   (expr ,blockset)
   (i32.load (i32.add ,blockset (global.get $blockset-free-lists-base))))

 (macro %get-blockset-free-lists-top
   (expr ,blockset)
   (i32.load (i32.add ,blockset (global.get $blockset-free-lists-top))))

 (macro %get-blockset-free-space
   (expr ,blockset)
   (i32.load (i32.add ,blockset (global.get $blockset-free-space))))

 (macro %get-blockset-immobile-block-size
   (expr ,blockset)
   (i32.load (i32.add ,blockset (global.get $blockset-immobile-block-size))))

 (macro %get-blockset-relocation-size-limit
   (expr ,blockset)
   (i32.load (i32.add ,blockset (global.get $blockset-relocation-size-limit))))

 (macro %get-blockset-unused-count
   (expr ,blockset)
   (i32.load (i32.add ,blockset (global.get $blockset-unused-count))))

 (macro %set-blockset-block-count
   (expr ,blockset)
   (expr ,block-count)
   (i32.store (i32.add ,blockset (global.get $blockset-block-count))
              ,block-count))

 (macro %set-blockset-free-count
   (expr ,blockset)
   (expr ,free-count)
   (i32.store (i32.add ,blockset (global.get $blockset-free-count))
              ,free-count))

 (macro %set-blockset-unused-count
   (expr ,blockset)
   (expr ,unused-count)
   (i32.store (i32.add ,blockset (global.get $blockset-unused-count))
              ,unused-count))

 (macro %set-blockset-block-list
   (expr ,blockset)
   (expr ,block-list)
   (i32.store (i32.add ,blockset (global.get $blockset-block-list))
              ,block-list))

 (macro %set-blockset-free-lists-base
   (expr ,blockset)
   (expr ,free-lists-base)
   (i32.store (i32.add ,blockset (global.get $blockset-free-lists-base))
              ,free-lists-base))

 (macro %set-blockset-free-lists-top
   (expr ,blockset)
   (expr ,free-lists-top)
   (i32.store (i32.add ,blockset (global.get $blockset-free-lists-top))
              ,free-lists-top))

 (macro %set-blockset-defrag-cursor
   (expr ,blockset)
   (expr ,defrag-cursor)
   (i32.store (i32.add ,blockset (global.get $blockset-defrag-cursor))
              ,defrag-cursor))

 (macro %set-blockset-end-block
   (expr ,blockset)
   (expr ,end-block)
   (i32.store (i32.add ,blockset (global.get $blockset-end-block))
              ,end-block))

 (macro %set-blockset-immobile-block-size
   (expr ,blockset)
   (expr ,immobile-block-size)
   (i32.store (i32.add ,blockset (global.get $blockset-immobile-block-size))
              ,immobile-block-size))

 (macro %set-blockset-relocation-size-limit
   (expr ,blockset)
   (expr ,relocation-size-limit)
   (i32.store (i32.add ,blockset (global.get $blockset-relocation-size-limit))
              ,relocation-size-limit))

 (macro %set-blockset-free-space
   (expr ,blockset)
   (expr ,free-space)
   (i32.store (i32.add ,blockset (global.get $blockset-free-space))
              ,free-space))

 (func $get-blockset-immobile-block-size (export "get-blockset-immobile-block-size")
   (param $blockset-id i32)
   (result i32)
   (%get-blockset-immobile-block-size (%get-blockset (local.get $blockset-id))))

 (func $get-blockset-relocation-size-limit (export "get-blockset-relocation-size-limit")
   (param $blockset-id i32)
   (result i32)
   (%get-blockset-relocation-size-limit (%get-blockset (local.get $blockset-id))))

 (func $set-blockset-immobile-block-size (export "set-blockset-immobile-block-size")
   (param $blockset-id i32)
   (param $immobile-block-size i32)
   (%set-blockset-immobile-block-size (%get-blockset (local.get $blockset-id)) (local.get $immobile-block-size)))

 (func $set-blockset-relocation-size-limit (export "set-blockset-relocation-size-limit")
   (param $blockset-id i32)
   (param $relocation-size-limit i32)
   (%set-blockset-relocation-size-limit (%get-blockset (local.get $blockset-id)) (local.get $relocation-size-limit)))

 (debug
  (func $get-blockset (export "get-blockset")
    (param $blockset-id i32)
    (result i32)
    (%get-blockset (local.get $blockset-id)))

  (func $get-blockset-id (export "get-blockset-id")
    (param $blockset i32)
    (result i32)
    (%get-blockset-id (local.get $blockset)))

  (func $get-blockset-block-count (export "get-blockset-block-count")
    (param $blockset i32)
    (result i32)
    (%get-blockset-block-count (local.get $blockset)))

  (func $get-blockset-block-list (export "get-blockset-block-list")
    (param $blockset i32)
    (result i32)
    (%get-blockset-block-list (local.get $blockset)))

  (func $get-blockset-defrag-cursor (export "get-blockset-defrag-cursor")
    (param $blockset i32)
    (result i32)
    (%get-blockset-defrag-cursor (local.get $blockset)))

  (func $get-blockset-end-block (export "get-blockset-end-block")
    (param $blockset i32)
    (result i32)
    (%get-blockset-end-block (local.get $blockset)))

  (func $get-blockset-free-lists-base (export "get-blockset-free-lists-base")
    (param $blockset i32)
    (result i32)
    (%get-blockset-free-lists-base (local.get $blockset)))

  (func $get-blockset-free-lists-top (export "get-blockset-free-lists-top")
    (param $blockset i32)
    (result i32)
    (%get-blockset-free-lists-top (local.get $blockset)))

  (func $get-blockset-free-space (export "get-blockset-free-space")
    (param $blockset i32)
    (result i32)
    (%get-blockset-free-space (local.get $blockset)))

  (func $set-blockset-block-count (export "set-blockset-block-count")
    (param $blockset i32)
    (param $block-count i32)
    (%set-blockset-block-count (local.get $blockset) (local.get $block-count)))

  (func $set-blockset-block-list (export "set-blockset-block-list")
    (param $blockset i32)
    (param $block-list i32)
    (%set-blockset-block-list (local.get $blockset) (local.get $block-list)))

  (func $set-blockset-defrag-cursor (export "set-blockset-defrag-cursor")
    (param $blockset i32)
    (param $defrag-cursor i32)
    (%set-blockset-defrag-cursor (local.get $blockset) (local.get $defrag-cursor)))

  (func $set-blockset-end-block (export "set-blockset-end-block")
    (param $blockset i32)
    (param $end-block i32)
    (%set-blockset-end-block (local.get $blockset) (local.get $end-block))))

 ;;-----------------------------------------------------------------------------
 ;;
 ;; Blockset Utilities
 ;;

 (func $decr-blockset-block-count (debug (export "decr-blockset-block-count"))
   (param $blockset i32)
   (local $addr i32)
   (local.set $addr (i32.add (local.get $blockset) (global.get $blockset-block-count)))
   (i32.store (local.get $addr) (i32.sub (i32.load (local.get $addr)) (i32.const 1))))

 (func $decr-blockset-free-count (debug (export "decr-blockset-free-count"))
   (param $blockset i32)
   (local $addr i32)
   (local.set $addr (i32.add (local.get $blockset) (global.get $blockset-free-count)))
   (i32.store (local.get $addr) (i32.sub (i32.load (local.get $addr)) (i32.const 1))))

 (func $decr-blockset-unused-count (debug (export "decr-blockset-unused-count"))
   (param $blockset i32)
   (local $addr i32)
   (local.set $addr (i32.add (local.get $blockset) (global.get $blockset-unused-count)))
   (i32.store (local.get $addr) (i32.sub (i32.load (local.get $addr)) (i32.const 1))))

 (func $incr-blockset-block-count (debug (export "incr-blockset-block-count"))
   (param $blockset i32)
   (local $addr i32)
   (local.set $addr (i32.add (local.get $blockset) (global.get $blockset-block-count)))
   (i32.store (local.get $addr) (i32.add (i32.load (local.get $addr)) (i32.const 1))))

 (func $incr-blockset-free-count (debug (export "incr-blockset-free-count"))
   (param $blockset i32)
   (local $addr i32)
   (local.set $addr (i32.add (local.get $blockset) (global.get $blockset-free-count)))
   (i32.store (local.get $addr) (i32.add (i32.load (local.get $addr)) (i32.const 1))))

 (func $incr-blockset-unused-count (debug (export "incr-blockset-unused-count"))
   (param $blockset i32)
   (local $addr i32)
   (local.set $addr (i32.add (local.get $blockset) (global.get $blockset-unused-count)))
   (i32.store (local.get $addr) (i32.add (i32.load (local.get $addr)) (i32.const 1))))

 ;;-----------------------------------------------------------------------------
 ;;
 ;; List Items
 ;;
 ;;

 (func $link-refs (debug (export "link-refs"))
   (param $blockset i32)
   (param $a i32)
   (param $b i32)

   (if (i32.eq (local.get $a) (global.get $null))
       (then
        (%set-blockset-block-list (local.get $blockset) (local.get $b)))
     (else
      (%set-next-block (local.get $a) (local.get $b))))

   (if (i32.eq (local.get $b) (global.get $null))
       (then
        (%set-blockset-end-block (local.get $blockset) (local.get $a)))
     (else
      (%set-previous-block (local.get $b) (local.get $a)))))

 (macro %calc-free-lists-area-base
   (i32.mul (global.get $blockset-size) (global.get $blockset-count)))

 (macro %calc-blockset-free-lists-area-size
   (i32.shl (i32.const 30)
            (i32.add (global.get $alloc-precision-bits)
                     (global.get $value-size-bits))))

 (macro %calc-initial-refs-top
   (i32.add (%calc-free-lists-area-base)
            (i32.mul (global.get $blockset-count)
                     (%calc-blockset-free-lists-area-size))))

 ;;-----------------------------------------------------------------------------
 ;;
 ;; Module Initialization
 ;;
 ;;

 (start $init-blockset-manager)
 (func $init-blockset-manager (debug (export "init-blockset-manager"))
   (global.set $refs-top (%calc-initial-refs-top))
   (global.set $ref-count (i32.const 0))
   (global.set $ref-free-list (global.get $null)))

 ;;-----------------------------------------------------------------------------
 ;;
 ;; Blockset Initialization
 ;;
 ;;

 (func $init-blockset (export "init-blockset")
   (param $blockset-id i32)
   (param $immobile-block-size i32)
   (param $relocation-size-limit i32)

   (local $blockset i32)
   (local $free-lists-base i32)
   (local $free-lists-size i32)
   (local $free-lists-top i32)

   (local.set $blockset (%get-blockset (local.get $blockset-id)))

   (%set-blockset-immobile-block-size
    (local.get $blockset)
    (local.get $immobile-block-size))

   (%set-blockset-relocation-size-limit
    (local.get $blockset)
    (local.get $relocation-size-limit))

   (%set-blockset-block-count      (local.get $blockset) (i32.const 0))
   (%set-blockset-block-list       (local.get $blockset) (global.get $null))
   (%set-blockset-defrag-cursor    (local.get $blockset) (global.get $null))
   (%set-blockset-end-block        (local.get $blockset) (global.get $null))
   (%set-blockset-free-count       (local.get $blockset) (i32.const 0))
   (%set-blockset-free-space       (local.get $blockset) (i32.const 0))
   (%set-blockset-unused-count     (local.get $blockset) (i32.const 0))

   ;; blockset is n * 2^6 for n = 1...
   ;; area required for free lists for precision p is 2^(p+6) bytes, p = 1, 2, ...
   ;; 6 + x = p + 6 => x = p

   (local.set $free-lists-size (%calc-blockset-free-lists-area-size))

   (local.set $free-lists-base
              (i32.add (%calc-free-lists-area-base)
                       (i32.mul (local.get $blockset-id)
                                (local.get $free-lists-size))))

   (local.set $free-lists-top
              (i32.add (local.get $free-lists-base)
                       (local.get $free-lists-size)))

   (%set-blockset-free-lists-base (local.get $blockset) (local.get $free-lists-base))
   (%set-blockset-free-lists-top (local.get $blockset) (local.get $free-lists-top))

   (memory.fill (local.get $free-lists-base) (global.get $null) (local.get $free-lists-size)))

 ;;-----------------------------------------------------------------------------
 ;;
 ;; Block Refs
 ;;

 (macro %alloc-ref
   (if (i32.eq (global.get $ref-free-list) (global.get $null))
       (then
        (call $grow-storage (global.get $grow-storage-ref-count))))

   (debug
    (%global.incr i32 $ref-count))

   (global.get $ref-free-list)
   (global.set $ref-free-list (i32.load (global.get $ref-free-list))))

 (func $make-ref (export "make-ref")
   (param $addr i32)
   (param $size i32)
   (result i32)

   (local $ref-addr i32)

   (local.set $ref-addr (%alloc-ref))

   (%set-block-addr (local.get $ref-addr) (local.get $addr))
   (%set-block-size (local.get $ref-addr) (local.get $size))

   (local.get $ref-addr))

 (debug
  (func $alloc-ref (export "alloc-ref")
    (result i32)
    (%alloc-ref)))

 (func $grow-storage (debug (export "grow-storage"))
   (param $count i32)

   (local $bytes-required i32)
   (local $new-top i32)
   (local $pages-required i32)

   (local.set $new-top (i32.add (global.get $refs-top)
                                (i32.shl (local.get $count)
                                         (global.get $ref-size-bits))))

   (local.set $bytes-required (i32.sub (local.get $new-top)
                                       (i32.shl (memory.size)
                                                (global.get $page-size))))

   (if (i32.gt_s (local.get $bytes-required) (i32.const 0))
       (then
        (local.set $pages-required (i32.add (i32.shr_u (i32.sub (local.get $bytes-required)
                                                                (i32.const 1))
                                                       (global.get $page-size-bits))
                                            (i32.const 1)))

        (drop (memory.grow (local.get $pages-required)))))

   (call $fill-ref-free-list (local.get $count)))

 (func $fill-ref-free-list (debug (export "fill-ref-free-list"))
   (param $count i32)

   (local $next-ref i32)
   (local $ref i32)
   (local $top i32)

   (local.set $ref (global.get $refs-top))

   (local.set $top (i32.add (i32.shl (local.get $count)
                                     (global.get $ref-size-bits))
                            (global.get $refs-top)))

   (loop $again
     (local.set $next-ref (i32.add (local.get $ref) (global.get $ref-size)))
     (if (i32.lt_u (local.get $next-ref) (local.get $top))
         (then
          (%set-block-addr (local.get $ref) (local.get $next-ref))
          (debug
           (%set-block-size (local.get $ref) (i32.const 0xdeadce11)))
          (local.set $ref (local.get $next-ref))
          (br $again))
       (else
        (i32.store (local.get $ref) (global.get $ref-free-list)))))

   (global.set $ref-free-list (global.get $refs-top))
   (global.set $refs-top (local.get $top)))

 ;;-----------------------------------------------------------------------------
 ;;
 ;; Ref Deallocation
 ;;

 (func $dealloc-ref (export "dealloc-ref")
   (param $ref i32)

   (%set-block-addr (local.get $ref) (global.get $ref-free-list))

   (debug
    (%set-block-size (local.get $ref) (i32.const 0xdeadce11))
    (%global.decr i32 $ref-count))

   (global.set $ref-free-list (local.get $ref)))

 ;;-----------------------------------------------------------------------------
 ;;
 ;; Allocation
 ;;

 ;; This is used in test/test_block_mgr.py::test_stochastic.  The average of
 ;; many calls to this stub should account for the overhead of calling
 ;; alloc-block so that the performance of alloc-block's internals can be more
 ;; precisely measured.

 (func $stub-alloc-block (export "stub-alloc-block")
   (param $blockset-id i32)
   (param $size i32)
   (result i32)
   (global.get $null))

 (macro %select-blockset-free-list
   (expr ,blockset)
   (expr ,size)
   (i32.add (%get-blockset-free-lists-base ,blockset)
            (call $calc-free-list-offset ,size)))

 (debug
  (func $select-blockset-free-list (export "select-blockset-free-list")
    (param $blockset i32)
    (param $size i32)
    (result i32)
    (%select-blockset-free-list (local.get $blockset) (local.get $size)))

  (func $get-free-list-head (export "get-free-list-head")
    (param $free-list i32)
    (result i32)
    (i32.load (local.get $free-list))))

 (func $alloc-block (export "alloc-block")
   (param $blockset-id i32)
   (param $size i32)
   (result i32)

   (local $base-free-list i32)
   (local $block i32)
   (local $blockset i32)
   (local $free-list i32)
   (local $last-free-list i32)
   (local $new-block i32)

   (local.set $blockset (%get-blockset (local.get $blockset-id)))

   (local.set $size (call $quantize-size (local.get $size)))

   (local.set $free-list (%select-blockset-free-list (local.get $blockset) (local.get $size)))
   (local.set $last-free-list (%get-blockset-free-lists-top (local.get $blockset)))

   (local.set $block (call $pop-free-block (local.get $blockset) (local.get $free-list)))

   (if (i32.eq (local.get $block) (global.get $null))
       (then
        (local.set $base-free-list (local.get $free-list))
        (local.set $free-list (local.get $last-free-list))
        (loop $again
          (%decr-n i32 $free-list #value-size)
          (if (i32.gt_u (local.get $free-list) (local.get $base-free-list))
              (then
               (local.set $block (call $pop-free-block (local.get $blockset) (local.get $free-list)))
               (if (i32.eq (local.get $block) (global.get $null))
                   (then
                    (br $again))))))))

   (if (i32.eq (local.get $block) (global.get $null))
       (then
        (local.set $block (call $provision-free-block (local.get $blockset) (local.get $size)))))

   (if (i32.gt_u (%get-block-size (local.get $block)) (local.get $size))
       (then
        (call $split-free-block (local.get $blockset) (local.get $block) (local.get $size))))

   (call $mark-block-allocated (local.get $block))
   (call $decr-blockset-free-count (local.get $blockset))

   (%set-blockset-free-space (local.get $blockset)
                             (i32.sub (%get-blockset-free-space (local.get $blockset))
                                      (local.get $size)))

   (local.get $block))

 (func $quantize-size (debug (export "quantize-size"))

   ;; One of the memory efficiency versus CPU efficiency trade-offs that can be
   ;; made is either to allocate precisely the amount requested and have a
   ;; longer free list, and therefore increased search and maintenance time, or
   ;; to allocate approximately and have a smaller free list.  This function is
   ;; part of the latter approach.  Essentially, it reduces the precision of the
   ;; requested size, so that for example, a request for 207 bytes would be
   ;; rounded up to 208 since 207 = 0xcf = 0b11001111, and below we only
   ;; use 4 bits of precision, so that gives 0b11010000 = 0xd0 = 208.  If only
   ;; 3 bits were used, then we would have rounded up to 0b11100000 = 0xe0 = 224.

   (param $size i32)
   (result i32)

   (local $mask i32)
   (local $rank i32)

   (local.set $rank (%rank i32 (local.get $size)))

   (if (i32.le_u (local.get $rank) (global.get $alloc-precision-bits))
       (then
        (local.set $mask (i32.const 0)))
     (else
      (local.set $mask (i32.sub (i32.shl (i32.const 1)
                                         (i32.sub (local.get $rank)
                                                  (global.get $alloc-precision-bits)))
                                (i32.const 1)))))

   (i32.and (i32.add (local.get $size) (local.get $mask))
            (i32.xor (local.get $mask) (i32.const -1))))

 (func $calc-free-list-offset (debug (export "calc-free-list-offset"))
   (param $size i32)
   (result i32)

   (local $rank i32)
   (local $rank-shift i32)

   (local.set $rank (%rank i32 (local.get $size)))

   (if (i32.le_u (local.get $rank) (global.get $alloc-precision-bits))
       (then
        (local.set $rank-shift (i32.const 0)))
     (else
      (local.set $rank-shift (i32.sub (local.get $rank)
                                      (global.get $alloc-precision-bits)))))

   (i32.shl (i32.add (i32.shr_u (local.get $size)
                                (local.get $rank-shift))
                     (i32.shl (local.get $rank-shift)
                              (global.get $alloc-precision-bits)))
            (global.get $value-size-bits)))

 (func $pop-free-block (debug (export "pop-free-block"))
   (param $blockset i32)
   (param $free-list i32)
   (result i32)

   (local $block i32)
   (local $head i32)
   (local $next i32)

   (local.set $block (global.get $null))
   (local.set $head (i32.load (local.get $free-list)))

   (loop $again
     (if (i32.ne (local.get $head) (global.get $null))
         (then
          (local.set $block (call $get-pair-car (local.get $head)))
          (local.set $next (call $get-pair-cdr (local.get $head)))

          (call $dealloc-pair (local.get $head))
          (local.set $head (local.get $next))

          (if (%is-unused-block (local.get $block))
              (then
               (call $dealloc-ref (local.get $block))
               (call $decr-blockset-unused-count (local.get $blockset))
               (local.set $block (global.get $null))
               (br $again))))))

   (i32.store (local.get $free-list) (local.get $head))
   (local.get $block))

 (func $provision-free-block (debug (export "provision-free-block"))
   (param $blockset i32)
   (param $size i32)
   (result i32)

   (local $block i32)
   (local $block-addr i32)
   (local $blockset-id i32)
   (local $end-block i32)
   (local $end-page i32)
   (local $free-pages i32)
   (local $free-size i32)
   (local $page-count i32)
   (local $total-pages i32)

   (local.set $blockset-id (%get-blockset-id (local.get $blockset)))

   (local.set $page-count (i32.add (i32.shr_u (i32.sub (local.get $size)
                                                       (i32.const 1))
                                              (global.get $page-size-bits))
                                   (i32.const 1)))

   (local.set $total-pages (call_indirect
                            $memory-size
                            (type $memory-size-sig)
                            (local.get $blockset-id)))

   (local.set $end-block (%get-blockset-end-block (local.get $blockset)))

   (if (i32.eq (local.get $end-block) (global.get $null))
       (then
        (local.set $free-pages (local.get $total-pages))
        (local.set $block-addr (i32.const 0)))

     (else
      (local.set $end-page (i32.shr_u (%get-next-block-addr (local.get $end-block))
                                      (global.get $page-size-bits)))

      (local.set $free-pages (i32.sub (local.get $total-pages) (local.get $end-page)))

      (local.set $block-addr (%get-next-block-addr (local.get $end-block)))))

   (if (i32.lt_u (local.get $free-pages) (local.get $page-count))
       (then
        (drop (call_indirect $memory-grow
                             (type $memory-grow-sig)
                             (i32.sub (local.get $page-count)
                                      (local.get $free-pages))
                             (local.get $blockset-id)))))

   (local.set $free-size (i32.shl (local.get $page-count)
                                  (global.get $page-size-bits)))

   (local.set $block (call $make-ref
                           (local.get $block-addr)
                           (local.get $free-size)))

   (call $link-refs (local.get $blockset) (local.get $end-block) (local.get $block))
   (call $link-refs (local.get $blockset) (local.get $block) (global.get $null))

   (call $incr-blockset-block-count (local.get $blockset))

   (%set-blockset-free-space (local.get $blockset)
                             (i32.add (%get-blockset-free-space (local.get $blockset))
                                      (local.get $free-size)))

   (local.get $block))

 (func $split-free-block (debug (export "split-free-block"))
   (param $blockset i32)
   (param $block i32)
   (param $split-size i32)

   (local $free-size i32)
   (local $new-block i32)
   (local $next-block i32)
   (local $remainder-size i32)

   (local.set $free-size (%get-block-size (local.get $block)))

   (local.set $remainder-size
              (i32.sub (local.get $free-size) (local.get $split-size)))

   (local.set $next-block (%get-next-block (local.get $block)))

   (local.set $new-block (call $make-ref
                               (i32.add (%get-block-addr (local.get $block))
                                        (local.get $split-size))
                               (local.get $remainder-size)))

   (%set-block-size (local.get $block) (local.get $split-size))

   (call $link-refs (local.get $blockset) (local.get $block) (local.get $new-block))
   (call $link-refs (local.get $blockset) (local.get $new-block) (local.get $next-block))

   (call $incr-blockset-block-count (local.get $blockset))

   (call $add-free-block (local.get $blockset) (local.get $new-block)))


 ;;-----------------------------------------------------------------------------
 ;;
 ;; Resize Block
 ;;

 (func $resize-block (export "resize-block")
   (param $blockset-id i32)
   (param $block i32)
   (param $new-size i32)
   (result i32)

   (local $new-block i32)
   (local $old-size i32)
   (local $size i32)

   (local.set $new-block (call $alloc-block (local.get $blockset-id) (local.get $new-size)))

   (local.set $old-size (%get-block-size (local.get $block)))

   (local.set $size (if (result i32) (i32.gt_u (local.get $new-size) (local.get $old-size))
                      (then (local.get $old-size))
                      (else (local.get $new-size))))

   (call_indirect $memory-copy
                  (type $memory-copy-sig)
                  (%get-block-addr (local.get $new-block))
                  (%get-block-addr (local.get $block))
                  (local.get $size)
                  (local.get $blockset-id))

   (call $dealloc-block (local.get $blockset-id) (local.get $block))

   (local.get $new-block))

 ;;-----------------------------------------------------------------------------
 ;;
 ;; Deallocation
 ;;

 ;; This is used in test/test_block_mgr.py::test_stochastic.  The average of
 ;; many calls to this stub should account for the overhead of calling
 ;; dealloc-block so that the performance of dealloc-block's internals can be
 ;; more precisely measured.

 (func $stub-dealloc-block (export "stub-dealloc-block")
   (param $blockset-id i32)
   (param $block i32))

 (func $dealloc-block (export "dealloc-block")
   (param $blockset-id i32)
   (param $block i32)

   (local $blockset i32)
   (local $size i32)

   (local.set $blockset (%get-blockset (local.get $blockset-id)))
   (local.set $size (%get-block-size (local.get $block)))

   (call $add-free-block (local.get $blockset) (local.get $block))

   (%set-blockset-free-space (local.get $blockset)
                             (i32.add (%get-blockset-free-space (local.get $blockset))
                                      (local.get $size)))

   (if (i32.gt_u (i32.shl (%get-blockset-free-count (local.get $blockset))
                          (i32.const 3))
                 (%get-blockset-block-count (local.get $blockset)))
       (then
        (call $step-defragment-blockset (local.get $blockset)))))

 (func $add-free-block (debug (export "add-free-block"))
   (param $blockset i32)
   (param $block i32)

   (local $free-list i32)
   (local $size i32)

   (local.set $size (%get-block-size (local.get $block)))

   (local.set $free-list (%select-blockset-free-list (local.get $blockset) (local.get $size)))

   (i32.store (local.get $free-list)
              (call $make-pair
                    (local.get $block)
                    (i32.load (local.get $free-list))))

   (call $mark-block-free (local.get $block))
   (call $incr-blockset-free-count (local.get $blockset)))

 (func $step-defragment-blockset (debug (export "step-defragment-blockset"))
   (param $blockset i32)

   (local $cursor i32)
   (local $free-block i32)
   (local $relo-end i32)
   (local $relo-last i32)
   (local $relo-size i32)
   (local $relo-start i32)

   (local.set $cursor (%get-blockset-defrag-cursor (local.get $blockset)))

   (if (i32.eq (local.get $cursor) (global.get $null))
       (then
        (local.set $cursor (%get-blockset-block-list (local.get $blockset)))))

   (local.set $free-block (call $find-next-free-block (local.get $cursor)))

   (if (i32.eq (local.get $free-block) (global.get $null))
       (then
        (%set-blockset-defrag-cursor (local.get $blockset) (global.get $null))
        (return)))

   (local.set $free-block
              (call $coalesce-free-blocks (local.get $blockset) (local.get $free-block)))

   (local.set $relo-start (%get-next-block (local.get $free-block)))

   (if (i32.eq (local.get $relo-start) (global.get $null))
       (then
        (%set-blockset-defrag-cursor (local.get $blockset) (global.get $null))
        (return)))

   ;; Scan from free block upward for allocated blocks, stopping when
   ;; we've found the limit that we can move or the next free block.
   (local.set $relo-last
              (local.set $relo-size
                         (call $scan-relocatable-blocks
                               (local.get $relo-start)
                               (%get-blockset-relocation-size-limit (local.get $blockset))
                               (%get-blockset-immobile-block-size (local.get $blockset)))))

   (local.set $relo-end (%get-next-block (local.get $relo-last)))

   (if (i32.eqz (local.get $relo-size))
       (then
        ;; The block after free-block is too big to move. Move the cursor to that block.
        ;; See $get-blockset-immobile-block-size below.
        (%set-blockset-defrag-cursor (local.get $blockset) (local.get $relo-end))
        (return)))

   ;; Shift the blocks down in memory, adjusting their addresses.
   (call $relocate-blocks
         (local.get $blockset)
         (%get-block-addr (local.get $free-block))
         (local.get $relo-start)
         (local.get $relo-end)
         (local.get $relo-size))

   ;; Remove free-block from before relo-start.
   (call $link-refs
         (local.get $blockset)
         (%get-previous-block (local.get $free-block))
         (local.get $relo-start))

   (%set-block-addr
    (local.get $free-block)
    (i32.add (%get-block-addr (local.get $relo-start))
             (local.get $relo-size)))

   (call $link-refs (local.get $blockset) (local.get $relo-last) (local.get $free-block))
   (call $link-refs (local.get $blockset) (local.get $free-block) (local.get $relo-end))

   (%set-blockset-defrag-cursor (local.get $blockset) (local.get $free-block)))

 (func $find-next-free-block (debug (export "find-next-free-block"))
   (param $block i32)
   (result i32)

   (loop $again
     (if (i32.ne (local.get $block) (global.get $null))
         (then
          (if (%is-allocated-block (local.get $block))
              (then
               (local.set $block (%get-next-block (local.get $block)))
               (br $again))))))

   (local.get $block))

 (func $coalesce-free-blocks (debug (export "coalesce-free-blocks"))
   (param $blockset i32)
   (param $block i32)
   (result i32)

   (local $next i32)

   (loop $again
     (local.set $next (%get-next-block (local.get $block)))
     (if (i32.ne (local.get $next) (global.get $null))
         (then
          (if (%is-free-block (local.get $next))
              (then
               (if (call $can-merge-blocks (local.get $block) (local.get $next))
                   (then
                    (call $incr-block-size (local.get $block) (%get-block-size (local.get $next)))
                    (call $mark-block-unused (local.get $next))
                    (call $decr-blockset-block-count (local.get $blockset))
                    (call $decr-blockset-free-count (local.get $blockset))
                    (call $incr-blockset-unused-count (local.get $blockset))
                    (call $link-refs
                          (local.get $blockset)
                          (local.get $block)
                          (%get-next-block (local.get $next)))
                    (br $again))
                 (else
                  (local.set $block (local.get $next))
                  (br $again))))))))

   (local.get $block))

 (func $incr-block-size (debug (export "incr-block-size"))
   (param $block i32)
   (param $size i32)

   (local $addr i32)
   (local $new-size i32)
   (local $size-flags i32)

   (local.set $addr (%get-block-size-addr (local.get $block)))
   (local.set $size-flags (i32.load (local.get $addr)))

   (local.set $new-size (i32.add (i32.and (local.get $size-flags)
                                          (global.get $block-size-mask))
                                 (local.get $size)))

   (if (i32.gt_u (local.get $new-size) (global.get $block-size-mask))
       (then
        (unreachable)))

   (i32.store (local.get $addr)
              (i32.or (i32.and (local.get $size-flags)
                               (global.get $block-flags-mask))
                      (local.get $new-size))))

 (func $can-merge-blocks (debug (export "can-merge-blocks"))
   (param $block i32)
   (param $next i32)
   (result i32)
   (i32.le_u (i32.add (%get-block-size (local.get $block))
                      (%get-block-size (local.get $next)))
             (global.get $block-size-mask)))

 (func $scan-relocatable-blocks (debug (export "scan-relocatable-blocks"))
   (param $start-block i32)
   (param $aggregate-size-limit i32)
   (param $single-block-size-limit i32)
   (result i32 i32)

   (local $block i32)
   (local $last-block i32)
   (local $count i32)
   (local $size i32)
   (local $size-remaining i32)

   (local.set $last-block (local.get $start-block))
   (local.set $block (local.get $start-block))
   (local.set $count (i32.const 0))
   (local.set $size-remaining (local.get $aggregate-size-limit))

   ;; The logic is simpler to start with the total number of bytes that can be
   ;; moved and subtract from it the size of each block that will be moved.
   ;; Note that this is a signed value, unlike all other values in this module.

   (loop $again
     (if (%is-allocated-block (local.get $block))
         (then
          (local.set $size (%get-block-size (local.get $block)))
          (if (i32.le_s (local.get $size) (local.get $size-remaining))
              (then
               ;; The current block will fit with the remaining bytes available.
               (local.set $size-remaining (i32.sub (local.get $size-remaining)
                                                   (local.get $size)))
               (local.set $last-block (local.get $block))
               (local.set $block (%get-next-block (local.get $block)))
               (if (i32.ne (local.get $block) (global.get $null))
                   (then
                    (%incr i32 $count)
                    (br $again))))
            (else
             ;; The current block won't fit. If this is the first block, then it is
             ;; be bigger than the size allowable for a sequence of blocks, but it might
             ;; be relocatable if it's below the single block size limit.
             (if (i32.and (i32.eqz (local.get $count))
                          (i32.lt_u (local.get $size)
                                    (local.get $single-block-size-limit)))
                 (then
                  ;; This is the statement that requires aggregate size limit to be
                  ;; a signed value.
                  (local.set $size-remaining (i32.sub (local.get $size-remaining)
                                                      (local.get $size)))
                  (local.set $last-block (local.get $block))
                  (local.set $block (%get-next-block (local.get $block))))))))))

   ;; Return values

   ;; Address of the block beyond the last block that can be moved
   (local.get $last-block)

   ;; The size remaining is the aggregate size limit minus the size of each block
   ;; that can be moved.  The difference below results in the sum of the sizes
   ;; of the blocks that can be moved.
   (i32.sub (local.get $aggregate-size-limit) (local.get $size-remaining)))

 ;; ## Defragmentation
 ;;
 ;; Defragmentation is the process of relocating allocated blocks so that free
 ;; blocks can be merged.
 ;;
 ;; Policy parameters: step frequency, target # of bytes copied per step, min
 ;; size of non-relocatable block.
 ;;
 ;; At each step, we need to be able to remove two entries from the free list
 ;; and replace them with a larger entry.  The two candidate entries will be the
 ;; first two above the cursor, so we will need to have the address of the free
 ;; entry immediately below (or at) the cursor.  We need a fast way to find the
 ;; highest address of a free entry at or below the cursor.  The naive approach
 ;; would be to scan from the beginning of the list, but as the number of free
 ;; list entries grows, this becomes increasingly slower.  Since the heap is
 ;; ordered by free block size, we should expect that any arbitrary subset will
 ;; be a random sample over the address space.  This sample won't be uniform,
 ;; especially during defragmentation, where the address space below the cursor
 ;; will be undersampled.  The root node of the heap is generally going to be
 ;; above the cursor, both in the initial part of defragmentation when most heap
 ;; nodes are above the cursor, and the in the later part when most of the
 ;; lower free blocks have been swept up above the cursor.  A useful property of
 ;; heaps is that the top half (in terms of levels) contains roughly the square
 ;; root of the total number of nodes in the heap.  For example, a heap of
 ;; 1023 nodes has 10 levels.  The first 5 levels contain 31 nodes, and
 ;; 31^2 = 961.  An average linear scan of a free list of 1023 entries is going
 ;; to take 512 comparisons, but if we make 31 comparisions of the top half of
 ;; the heap to find a better starting place, we should expect a further 33 to
 ;; find the desired entry.  For a heap of this size, it's roughly 1/8th the
 ;; computational cost to scan the top half of the heap for a better starting
 ;; point than to start at the beginning of the free list.
 ;;
 ;; Assuming then, that we have a pointer to the highest free list entry before
 ;; the cursor, then the defragmentation algorithm is as follows:
 ;;
 ;; 1. Scan the block list forward from the cursor to find the next free block.
 ;;
 ;;   a. if there is no such block, reset the cursor to the beginning of the
 ;;      block list
 ;;
 ;;   b. if a free block is found, leave the cursor at the block before the
 ;;      free block
 ;;
 ;; 2. Scan the block list beyond that free block to find the set of blocks
 ;;    which satisify one of the following conditions, with earlier conditions
 ;;    taking precedence
 ;;
 ;;   a. The set of blocks before the successor to the next free block.
 ;;
 ;;   b. A set of blocks less than the policy limit,
 ;;
 ;;   c. A single block less than the single block policy limit, or
 ;;
 ;; 3. If the set of blocks found in step 2 is empty, then end the step by the
 ;;    following
 ;;
 ;;   a. if the next free block is the last block, reset the cursor to the
 ;;      beginning of the block list
 ;;
 ;;   b. if the next block after the next free block is a free block, then merge
 ;;      the two free blocks by increasing the size of the lower free block,
 ;;      removing its successor from the block list and the free list, and
 ;;      setting the successor's address to -1
 ;;
 ;;   c. if the next block after the next free block is an allocated block, then
 ;;      it is greater than the max relocatable block size. Set the cursor to
 ;;      the next block after the next free block.
 ;;
 ;; 4. Move the blocks found in step 2 lower in memory by the size of the next
 ;;    free block, and adjust their addresses accordingly.
 ;;
 ;; 5. If the last relocated block is followed by a free block, then end the
 ;;    step by the following
 ;;
 ;;    a. then create a new free block with address at the top of the relocated
 ;;       blocks and size of the next free block (formerly below the relocated
 ;;       blocks) plus its successor (formerly above)
 ;;
 ;;    b. remove the next free block and its successor from the free list and
 ;;       from the block list
 ;;
 ;;    c. insert the new free block into the block list after the last relocated
 ;;       block
 ;;
 ;;    d. insert the new free block into the free list at the place formerly
 ;;       occupied by the next free block
 ;;
 ;;    e. set the address of the next free block and its successor to -1
 ;;
 ;;    f. set the cursor to the last relocated block.
 ;;
 ;; 6. If the last relocated block is not followed by a free block, then end the
 ;;    step by the following
 ;;
 ;;    a. remove the next free block from the block list (immediately before the
 ;;       first relocated block)
 ;;
 ;;    b. insert the next free block into the block list immediately following
 ;;       the last relocated block
 ;;
 ;;    c. update the address of the next free block
 ;;
 ;;    d. set the cursor to the last relocated block.
 ;;

 (func $relocate-blocks (debug (export "relocate-blocks"))
   (param $blockset i32)
   (param $dest-addr i32)
   (param $start-block i32)
   (param $end-block i32)
   (param $size i32)

   (local $block i32)
   (local $offset i32)
   (local $source-addr i32)

   (local.set $source-addr (%get-block-addr (local.get $start-block)))

   (call_indirect $memory-copy
                  (type $memory-copy-sig)
                  (local.get $dest-addr)
                  (local.get $source-addr)
                  (local.get $size)
                  (%get-blockset-id (local.get $blockset)))

   (local.set $block (local.get $start-block))
   (local.set $offset (i32.sub (local.get $source-addr) (local.get $dest-addr)))

   (loop $again
     (if (i32.ne (local.get $block) (local.get $end-block))
         (then
          (%set-block-addr
           (local.get $block)
           (i32.sub (%get-block-addr (local.get $block))
                    (local.get $offset)))
          (local.set $block (%get-next-block (local.get $block)))
          (br $again)))))

 ;; end of module
 )
