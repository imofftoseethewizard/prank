(module

 (const #num 5)

 (memory (debug (export "memory")) 1)
 (include "./test-include.wam")

 (define _offset (i32.const 4))
 (global $offset _offset)

 (global $id-foo i32 (+id 5))
 (global $id-bar i32 (+id))
 (define _id_quux (+id))

 (string $greeting (debug (export "greeting")) "Hello, World!")
 (string $answer (debug (export "answer")) "\tForty-two.\n")

 (macro $next-foo
   (label $addr)
   (local.set $addr (i32.add $addr _offset))
   (expand $get-foo (local.get $addr)))

 (test $check-isvalid
   (if (i32.eq (i32.const 0) (i32.const 1))
       (then
        (unreachable))))

 (macro $get-foo
   (expr ,addr-expr)
   (i32.load ,addr-expr))

 (func $test
   (param $bar i32)
   (result i32)
   (i32.eq (local.get $bar) _id_quux)
   (expand $next-foo $bar))

  (macro %bisect-left-indirect
   (class Int)
   (label $compare)
   (label $lo)
   (label $hi)
   (label $v)
   (label $mid)

   (loop $again
     (set! $mid (i32.and (i32.add (i32.shr_u $lo (i32.const 1))
                                  (i32.shr_u $hi (i32.const 1)))
                         (i32.const Int.align_mask)))

     (if ($compare (local.get $v) (Int.load (local.get $mid)))
         (then
          (local.set $lo (local.get $mid)))
       (else
        (local.set $hi (local.get $mid))))

     (if (i32.lt_u (local.get $lo) (local.get $hi))
         (then
          (br $again))))

   (local.get $lo))

  (func $foo

    (%bisect-left-indirect i64 $compare-name $start $end $name $mid)))
