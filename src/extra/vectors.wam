 (func $is-vector (export "is-vector")
   (param $value i32)
   (result i32)
   (if (result i32) (i32.eq (%get-value-tag (local.get $value)) (global.get $tag-box))
       (then
        (i32.eq (call $get-pair-car (local.get $value) (global.get $type-vector))))
     (else
      (i32.const 0))))

 (func $make-vector (export "make-vector")
   (param $length i32)
   (param $value i32)
   (result i32)

   (local $addr i32)
   (local $end-addr i32)
   (local $v i32)

   (local.set $v (call $alloc-vector (local.get $length)))
   (local.set $addr (call $get-vector-addr (local.get $v)))

   (local.set $end-addr (i32.shl (local.get $length) (global.get $value-size-bits)))

   (loop $again
     (i32.store (local.get $addr) (local.get $value))

     (call $add-ref (local.get $v) (local.get $value))

     (if (i32.lt_u (local.get $addr) (local.get $end-addr))
         (then
          (%incr-n i32 $addr 4)
          (br $again))))

   (local.get $v))

 (func $build-vector (export "build-vector")
   (param $list i32)
   (result i32)

   (local $addr i32)
   (local $head i32)
   (local $v i32)
   (local $value i32)

   (local.set $v (call $alloc-vector (call $get-list-length (local.get $list))))

   (local.set $addr (call $get-vector-addr (local.get $v)))
   (local.set $head (local.get $list))

   (loop $again
     (if (i32.ne (local.get $head) (global.get $null))
         (then
          (local.set $value (call $get-pair-car (local.get $list)))
          (i32.store (local.get $addr) (local.get $value))
          (call $add-ref (local.get $v) (local.get $value))
          (%incr-n i32 $addr 4)
          (%next-cdr $head)
          (br $again))))

   (local.get $v))
