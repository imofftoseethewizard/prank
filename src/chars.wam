(module

 ;; There are three representations of characters:
 ;;
 ;;   1. encoded as utf-8 in a local variable or in block memory
 ;;   2. a code point stored in a local variable as an i32
 ;;   3. a code point stored in a "char" tagged value in a local variable, in a
 ;;      pair, or a vector.
 ;;
 ;; In particular code points are never stored in memory without a tag value
 ;; applied.
 ;;
 ;; The encoding/decoding logic below is based on https://en.wikipedia.org/wiki/UTF-8
 ;;

 (include "./ascii.wam")
 (include "./constants.wam")
 (include "./globals.wam")
 (include "./values.wam")

 (func $is-ascii-upper-case (export "is-ascii-upper-case")
   (param $x i32)
   (result i32)
   (i32.and (i32.ge_u $x _char-A) (i32.le_u $x _char-Z)))

 (func $ascii-lower (export "ascii-lower")
   (param $x i32)
   (result i32)

   (if (result i32) ($is-ascii-upper-case $x)
     (then
      (i32.add $x (i32.const 0x20)))
     (else
      $x)))

 (func $char-eq/ascii-ci (export "char-eq/ascii-ci")
   (param $x i32)
   (param $y i32)

   (result i32)

   (if (result i32) (i32.eq $x $y)
     (then (i32.const 1))
     (else (i32.eq ($ascii-lower $x) ($ascii-lower $y)))))

 (func $get-char-code-point (export "get-char-code-point")
   (param $char i32)
   (result i32)
   (i32.shr_u (%get-value-data $char) _tag-size-bits))

 (func $make-char (export "make-char")
   (param $code-point i32)
   (result i32)
   (%make-value _tag-char (i32.shl $code-point _tag-size-bits)))

 (func $calc-char-width (export "calc-char-width")
   (param $char i32)
   (result i32)

   (if (result i32) (i32.lt_u $char (i32.const 0x80))
     (then (i32.const 1))
     (else
      (if (result i32) (i32.lt_u $char (i32.const 0x800))
        (then (i32.const 2))
        (else
         (if (result i32) (i32.lt_u $char (i32.const 0x10000))
           (then (i32.const 3))
           (else
            (if (result i32) (i32.lt_u $char (i32.const 0x110000))
              (then (i32.const 4))
              (else (i32.const -1))))))))))

 (func $calc-encoded-length (export "calc-encoded-length")
   (param $byte i32)
   (result i32)
   (if (result i32) (i32.eqz (i32.and $byte (i32.const 0x80)))
     (then
      (i32.const 1))
     (else
      (if (result i32) (i32.eq (i32.and $byte (i32.const 0xe0))
                               (i32.const 0xc0))
        (then
         (i32.const 2))
        (else
         (if (result i32) (i32.eq (i32.and $byte (i32.const 0xf0))
                                  (i32.const 0xe0))
           (then
            (i32.const 3))
           (else
            (if (result i32) (i32.eq (i32.and $byte (i32.const 0xf8))
                                     (i32.const 0xf0))
              (then
               (i32.const 4))
              (else
               (i32.const -1))))))))))

 (func $encode-char (export "encode-char")
   (param $char i32)
   (result i32)
   ($encode-code-point ($get-char-code-point $char)))

 (func $encode-code-point (export "encode-code-point")
   (param $code-point i32)
   (result i32)
   (if (result i32) (i32.lt_u $code-point (i32.const 0x80))
     (then $code-point)
     (else
      (if (result i32) (i32.lt_u $code-point (i32.const 0x800))
        (then
         (i32.or (i32.const 0x80c0)
                 (i32.or (i32.shr_u (i32.and $code-point (i32.const 0x07c0))
                                    (i32.const 6))
                         (i32.shl (i32.and $code-point (i32.const 0x003f))
                                  (i32.const 8)))))
        (else
         (if (result i32) (i32.lt_u $code-point (i32.const 0x10000))
           (then
            (i32.or (i32.const 0x8080e0)
                    (i32.or (i32.shr_u (i32.and $code-point (i32.const 0xf000))
                                       (i32.const 12))
                            (i32.or (i32.shl (i32.and $code-point (i32.const 0x0fc0))
                                             (i32.const 2))
                                    (i32.shl (i32.and $code-point (i32.const 0x003f))
                                             (i32.const 16))))))
           (else
            (i32.or (i32.const 0x808080f0)
                    (i32.or (i32.shr_u (i32.and $code-point (i32.const 0x1c0000))
                                       (i32.const 18))
                            (i32.or (i32.shr_u (i32.and $code-point (i32.const 0x3f000))
                                               (i32.const 4))
                                    (i32.or (i32.shl (i32.and $code-point (i32.const 0x0fc0))
                                                     (i32.const 10))
                                            (i32.shl (i32.and $code-point (i32.const 0x003f))
                                                     (i32.const 24)))))))))))))

 (func $decode-utf-8 (export "decode-utf-8")
   (param $utf-8 i32)
   (result i32)
   (if (result i32) (i32.eqz (i32.and $utf-8 (i32.const 0x80)))
     (then
      (i32.and $utf-8 (i32.const 0x7f)))
     (else
      (if (result i32) (i32.eq (i32.and $utf-8 (i32.const 0xe0))
                               (i32.const 0xc0))
        (then
         (i32.or (i32.shl (i32.and $utf-8 (i32.const 0x1f))
                          (i32.const 6))
                 (i32.shr_u (i32.and $utf-8 (i32.const 0x3f00))
                            (i32.const 8))))
        (else
         (if (result i32) (i32.eq (i32.and $utf-8 (i32.const 0xf0))
                                  (i32.const 0xe0))
           (then
            (i32.or (i32.shl (i32.and $utf-8 (i32.const 0x0f))
                             (i32.const 12))
                    (i32.or (i32.shr_u (i32.and $utf-8 (i32.const 0x3f00))
                                       (i32.const 2))
                            (i32.shr_u (i32.and $utf-8 (i32.const 0x3f0000))
                                       (i32.const 16)))))
           (else
            (i32.or (i32.shl (i32.and $utf-8 (i32.const 0x07))
                             (i32.const 18))
                    (i32.or (i32.shl (i32.and $utf-8 (i32.const 0x3f00))
                                     (i32.const 4))
                            (i32.or (i32.shr_u (i32.and $utf-8 (i32.const 0x3f0000))
                                             (i32.const 10))
                                    (i32.shr_u (i32.and $utf-8 (i32.const 0x3f000000))
                                               (i32.const 24))))))))))))

 (func $is-char (export "is-char")
   (param $x i32)
   (result i32)
   (i32.eq (%get-value-tag $x) _tag-char))

 ;; end of module
 )
