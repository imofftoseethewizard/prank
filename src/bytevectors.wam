(module

 ;; A bytevector is a boxed block.

 (import "block-mgr" "alloc-block"    (func $alloc-block     (param i32 i32) (result i32)))
 (import "block-mgr" "dealloc-block"  (func $dealloc-block   (param i32 i32)))
 (import "block-mgr" "get-block-addr" (func $get-block-addr  (param i32)     (result i32)))
 (import "block-mgr" "init-blockset"  (func $init-blockset   (param i32 i32 i32)))
 (import "pairs" "make-pair"          (func $make-pair       (param i32 i32) (result i32)))
 (import "pairs" "dealloc-pair"       (func $dealloc-pair    (param i32)))
 (import "pairs" "get-pair-car"       (func $get-pair-car    (param i32)     (result i32)))
 (import "pairs" "get-pair-cdr"       (func $get-pair-cdr    (param i32)     (result i32)))

 (include "./block-mgr-memory-proxy-imports.wam")

 (include "./globals.wam")
 (include "./values.wam")
 (include "./boxes.wam")
 (include "./block-mgr-memory-proxies.wam")

 (memory $memory (debug (export "memory")) 1)

 (macro %get-bytevector-addr
   (expr ,bv)
   (i32.add (call $get-block-addr (%get-box-value ,bv))
            (global.get $value-size)))

 (macro %get-bytevector-element-addr
   (expr ,bv)
   (expr ,offset)
   (i32.add (%get-bytevector-addr ,bv) ,offset))

 (macro %get-bytevector-size
   (expr ,bv)
   (i32.load (call $get-block-addr (%get-box-value ,bv))))

 ;;-----------------------------------------------------------------------------
 ;;
 ;; Initialization
 ;;

 (start $init-bytevectors)
 (func $init-bytevectors (debug (export "init-bytevectors"))
   (call $init-blockset
         (global.get $bytevectors-blockset-id)
         (i32.const 0x1000)  ;; relocation size limit
         (i32.const 0x8000)) ;; immobile block size
   (call $init-blockset-memory-proxies (global.get $bytevectors-blockset-id)))

 ;;-----------------------------------------------------------------------------
 ;;
 ;; Allocation
 ;;

 (func $alloc-bytevector (export "alloc-bytevector")
   (param $size i32)
   (result i32)

   (local $block i32)

   (local.set $block (call $alloc-block
                               (global.get $bytevectors-blockset-id)
                               (i32.add (local.get $size) (global.get $value-size))))

   (i32.store (call $get-block-addr (local.get $block)) (local.get $size))

   (%make-box (global.get $type-bytevector) (local.get $block)))

 ;;-----------------------------------------------------------------------------
 ;;
 ;; Deallocation
 ;;

 (func $dealloc-bytevector (export "dealloc-bytevector")
   (param $bv i32)

   (call $dealloc-block
         (global.get $bytevectors-blockset-id)
         (%get-box-value (local.get $bv)))

   (%dealloc-box (local.get $bv)))

 ;;-----------------------------------------------------------------------------
 ;;
 ;; Accessessors
 ;;

 (func $get-bytevector-size (export "get-bytevector-size")
   (param $bv i32)
   (result i32)
   (%get-bytevector-size (local.get $bv)))

 (func $get-bytevector-i8-u (export "get-bytevector-i8-u")
   (param $bv i32)
   (param $offset i32)
   (result i32)

   (i32.load8_u (%get-bytevector-element-addr (local.get $bv) (local.get $offset))))

 (func $set-bytevector-i8 (export "set-bytevector-i8")
   (param $bv i32)
   (param $offset i32)
   (param $value i32)

   (i32.store8 (%get-bytevector-element-addr (local.get $bv) (local.get $offset))
               (local.get $value)))

 ;; end of module
 )
