(module

 ;; A bytevector is a boxed block.

 (import "block-mgr" "alloc-block"    (func $alloc-block      (param i32 i32) (result i32)))
 (import "block-mgr" "dealloc-block"  (func $dealloc-block    (param i32 i32)))
 (import "block-mgr" "get-block-addr" (func $get-block-addr   (param i32)     (result i32)))
 (import "block-mgr" "init-blockset"  (func $init-blockset    (param i32 i32)))
 (import "lists" "get-list-length"    (func $get-list-length  (param i32)     (result i32)))
 (import "pairs" "make-pair"          (func $make-pair        (param i32 i32) (result i32)))
 (import "pairs" "dealloc-pair"       (func $dealloc-pair     (param i32)))
 (import "pairs" "get-pair-car"       (func $get-pair-car     (param i32)     (result i32)))
 (import "pairs" "get-pair-cdr"       (func $get-pair-cdr     (param i32)     (result i32)))

 (include "./block-mgr-memory-proxy-imports.wam")

 (include "./constants.wam")
 (include "./globals.wam")
 (include "./values.wam")
 (include "./boxes.wam")
 (include "./block-mgr-memory-proxies.wam")

 (memory $memory (debug (export "memory")) 1)

 (macro %get-bytevector-addr
   (expr ,bv)
   (i32.add ($get-block-addr (%get-box-value ,bv)) _value-size))

 (macro %get-bytevector-element-addr
   (expr ,bv)
   (expr ,offset)
   (i32.add (%get-bytevector-addr ,bv) ,offset))

 (macro %get-bytevector-size
   (expr ,bv)
   (i32.load ($get-block-addr (%get-box-value ,bv))))

 ;;-----------------------------------------------------------------------------
 ;;
 ;; Initialization
 ;;

 (start $init-bytevectors)
 (func $init-bytevectors (debug (export "init-bytevectors"))
   ($init-blockset _bytevectors-blockset (i32.const 0x400))
   ($init-blockset-memory-proxies _bytevectors-blockset))

 ;;-----------------------------------------------------------------------------
 ;;
 ;; Allocation and Construction
 ;;

 (func $alloc-bytevector (export "alloc-bytevector")
   (param $size i32)
   (result i32)

   (local $block i32)

   (set! $block ($alloc-block _bytevectors-blockset (i32.add $size _value-size)))

   (i32.store ($get-block-addr $block) $size)

   (%make-box _type-bytevector $block))

 (func $build-bytevector (export "build-bytevector")
   (param $elements i32)
   (result i32)

   (local $bv i32)
   (local $idx i32)
   (local $head i32)

   (set! $bv ($alloc-bytevector ($get-list-length $elements)))

   (set! $head $elements)
   (set! $idx (i32.const 0))

   (loop $again
     (if (i32.ne $head _null)
         (then
          ($set-bytevector-i8 $bv $idx ($get-pair-car $head))
          (set! $head ($get-pair-cdr $head))
          (%incr i32 $idx)
          (br $again))))

   $bv)

 ;;-----------------------------------------------------------------------------
 ;;
 ;; Deallocation
 ;;

 (func $dealloc-bytevector (export "dealloc-bytevector")
   (param $bv i32)

   ($dealloc-block _bytevectors-blockset (%get-box-value $bv))

   (%dealloc-box $bv))

 ;;-----------------------------------------------------------------------------
 ;;
 ;; Accessessors
 ;;

 (func $is-bytevector (debug (export "is-bytevector"))
   (param $x i32)
   (result i32)

   (if (result i32) (i32.ne (%get-value-tag $x) _tag-box)
     (then
      (i32.const 0))

     (else
      (i32.eq _type-bytevector (%get-box-type $x)))))

 (func $get-bytevector-size (export "get-bytevector-size")
   (param $bv i32)
   (result i32)
   (%get-bytevector-size $bv))

 (func $get-bytevector-i32 (export "get-bytevector-i32")
   (param $bv i32)
   (param $offset i32)
   (result i32)

   (i32.load (%get-bytevector-element-addr $bv $offset)))

 (func $get-bytevector-i8-u (export "get-bytevector-i8-u")
   (param $bv i32)
   (param $offset i32)
   (result i32)

   (i32.load8_u (%get-bytevector-element-addr $bv $offset)))

 (func $set-bytevector-i8 (export "set-bytevector-i8")
   (param $bv i32)
   (param $offset i32)
   (param $value i32)

   (i32.store8 (%get-bytevector-element-addr $bv $offset) $value))

 (func $set-bytevector-i32 (export "set-bytevector-i32")
   (param $bv i32)
   (param $offset i32)
   (param $value i32)

   (i32.store (%get-bytevector-element-addr $bv $offset) $value))

 ;; end of module
 )
