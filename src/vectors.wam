(module

 (import "block-mgr" "alloc-block"    (func $alloc-block     (param i32 i32) (result i32)))
 (import "block-mgr" "dealloc-block"  (func $dealloc-block   (param i32 i32)))
 (import "block-mgr" "get-block-addr" (func $get-block-addr  (param i32)     (result i32)))
 (import "block-mgr" "get-block-size" (func $get-block-size  (param i32)     (result i32)))
 (import "block-mgr" "init-blockset"  (func $init-blockset   (param i32 i32)))
 (import "lists" "get-list-length"    (func $get-list-length (param i32)     (result i32)))
 (import "pairs" "dealloc-pair"       (func $dealloc-pair    (param i32)))
 (import "pairs" "get-car"            (func $get-car         (param i32)     (result i32)))
 (import "pairs" "get-cdr"            (func $get-cdr         (param i32)     (result i32)))
 (import "pairs" "get-pair-car"       (func $get-pair-car    (param i32)     (result i32)))
 (import "pairs" "get-pair-cdr"       (func $get-pair-cdr    (param i32)     (result i32)))
 (import "pairs" "make-pair"          (func $make-pair       (param i32 i32) (result i32)))

 (include "./block-mgr-memory-proxy-imports.wam")

 (include "./constants.wam")
 (include "./globals.wam")
 (include "./boxes.wam")
 (include "./values.wam")
 (include "./gc-client.wam")
 (include "./block-mgr-memory-proxies.wam")

 (memory $memory (debug (export "memory")) 1)

 (start $init-vectors)
 (func $init-vectors (debug (export "init-vectors"))
   ;; relocate blocks in groups of up to 2KB
   ($init-blockset _vectors-blockset (i32.const 0x800))

   ;; defined in block-mgr-memory-proxies.wam
   ($init-blockset-memory-proxies _vectors-blockset))

 (macro %calc-vector-size
   (expr ,length)
   (i32.add (i32.shl ,length _value-size-bits) _value-size))

 (macro %get-vector-block-addr
   (expr ,v)
   ($get-block-addr (%get-box-value ,v)))

 (macro %get-vector-addr
   (expr ,v)
   (i32.add (%get-vector-block-addr ,v) _value-size))

 (macro %get-vector-length
   (expr ,v)
   (i32.load (%get-vector-block-addr ,v)))

 (macro %get-vector-element-addr
   (expr ,v)
   (expr ,idx)
   (i32.add (%get-vector-block-addr ,v)
            (i32.shl (i32.add ,idx (i32.const 1)) _value-size-bits)))

 (macro %get-vector-element
   (expr ,v)
   (expr ,idx)
   (i32.load (%get-vector-element-addr ,v ,idx)))

 (func $alloc-vector (export "alloc-vector")
   (param $length i32)
   (result i32)

   (local $block i32)

   (set! $block ($alloc-block _vectors-blockset (%calc-vector-size $length)))

   (i32.store ($get-block-addr $block) $length)

   (%make-box _type-vector $block))

 (func $dealloc-vector (export "dealloc-vector")
   (param $v i32)

   ($dealloc-block _vectors-blockset (%get-box-value $v))

   (%dealloc-box $v))

 (func $is-vector (debug (export "is-vector"))
   (param $x i32)
   (result i32)

   (if (result i32) (i32.ne (%get-value-tag $x) _tag-box)
     (then
      (i32.const 0))

     (else
      (i32.eq _type-vector (%get-box-type $x)))))

 (func $get-vector-addr (export "get-vector-addr")
   (param $v i32)
   (result i32)
   (%get-vector-addr $v))

 (func $get-vector-length (export "get-vector-length")
   (param $v i32)
   (result i32)
   (%get-vector-length $v))

 (func $get-vector-element (export "get-vector-element")
   (param $v i32)
   (param $idx i32)
   (result i32)
   (%get-vector-element $v $idx))

 (func $set-vector-element (export "set-vector-element")
   (param $v i32)
   (param $idx i32)
   (param $x i32)
   (i32.store (%get-vector-element-addr $v $idx) $x))

 (func $build-vector (export "build-vector")
   (param $list i32)
   (result i32)

   (local $addr i32)
   (local $head i32)
   (local $v i32)
   (local $value i32)

   (set! $v ($alloc-vector ($get-list-length $list)))

   (set! $addr ($get-vector-addr $v))
   (set! $head $list)

   (loop $again
     (if (i32.ne $head _null)
         (then
          (set! $value ($get-car $head))
          (set! $head ($get-cdr $head))
          (i32.store $addr $value)
          ($add-ref $v $value)
          (%incr-n i32 $addr 4)
          (br $again))))

   $v)

 ;; end of module
 )
