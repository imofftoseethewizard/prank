(module

 (import "block-mgr" "alloc-block"    (func $alloc-block     (param i32 i32) (result i32)))
 (import "block-mgr" "dealloc-block"  (func $dealloc-block   (param i32 i32)))
 (import "block-mgr" "get-block-addr" (func $get-block-addr  (param i32)     (result i32)))
 (import "block-mgr" "get-block-size" (func $get-block-size  (param i32)     (result i32)))
 (import "block-mgr" "init-blockset"  (func $init-blockset   (param i32 i32 i32)))
 (import "lists" "get-list-length"    (func $get-list-length (param i32)     (result i32)))
 (import "pairs" "dealloc-pair"       (func $dealloc-pair    (param i32)))
 (import "pairs" "get-pair-car"       (func $get-pair-car    (param i32)     (result i32)))
 (import "pairs" "get-pair-cdr"       (func $get-pair-cdr    (param i32)     (result i32)))
 (import "pairs" "make-pair"          (func $make-pair       (param i32 i32) (result i32)))

 (include "./block-mgr-memory-proxy-imports.wam")

 (include "./globals.wam")
 (include "./boxes.wam")
 (include "./values.wam")
 (include "./gc-client.wam")
 (include "./block-mgr-memory-proxies.wam")

 (memory $memory (export "memory") 1)

 (start $init-vectors)
 (func $init-vectors (export "init-vectors")
   (call $init-blockset
         (global.get $vectors-blockset)
         (i32.const 0x800)   ;; relocate blocks in groups of up to 2KB
         (i32.const 0x4000)) ;; relocate single blocks of up to 16KB

   ;; defined in block-mgr-memory-proxies.wam
   (call $init-blockset-memory-proxies (global.get $vectors-blockset)))

 (macro %calc-vector-size
   (expr ,length)
   (i32.add (i32.shl ,length (global.get $value-size-bits))
            (global.get $value-size)))

 (macro %get-vector-block-addr
   (expr ,v)
   (call $get-block-addr (%get-box-value ,v)))

 (macro %get-vector-addr
   (expr ,v)
   (i32.add (%get-vector-block-addr ,v) (global.get $value-size)))

 (macro %get-vector-length
   (expr ,v)
   (i32.load (%get-vector-block-addr ,v)))

 (macro %get-vector-element-addr
   (expr ,v)
   (expr ,idx)
   (i32.add (%get-vector-block-addr ,v)
                      (i32.shl (i32.add ,idx (i32.const 1))
                               (global.get $value-size-bits))))

 (macro %get-vector-element
   (expr ,v)
   (expr ,idx)
   (i32.load (%get-vector-element-addr ,v ,idx)))

 (func $alloc-vector (export "alloc-vector")
   (param $length i32)
   (result i32)

   (local $block i32)

   (local.set $block (call $alloc-block
                           (global.get $vectors-blockset)
                           (%calc-vector-size (local.get $length))))

   (i32.store (call $get-block-addr (local.get $block)) (local.get $length))

   (%make-box (global.get $type-vector) (local.get $block)))

 (func $dealloc-vector (export "dealloc-vector")
   (param $v i32)

   (call $dealloc-block
         (global.get $vectors-blockset)
         (%get-box-value (local.get $v)))

   (%dealloc-box (local.get $v)))

 (func $get-vector-addr (export "get-vector-addr")
   (param $v i32)
   (result i32)
   (%get-vector-addr (local.get $v)))

 (func $get-vector-length (export "get-vector-length")
   (param $v i32)
   (result i32)
   (%get-vector-length (local.get $v)))

 (func $get-vector-element (export "get-vector-element")
   (param $v i32)
   (param $idx i32)
   (result i32)
   (%get-vector-element (local.get $v) (local.get $idx)))

 (func $set-vector-element (export "set-vector-element")
   (param $v i32)
   (param $idx i32)
   (param $x i32)
   (i32.store (%get-vector-element-addr (local.get $v) (local.get $idx))
              (local.get $x)))

 ;; end of module
 )
