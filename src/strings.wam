(module

 ;; Strings are boxed blocks which contain utf-8 encoded text.
 ;;
 ;; Under the assumption that most strings will be short, and most of those will
 ;; be entirely ASCII, there are four representation of strings: a simple string
 ;; for entirely ASCII text that is less than 256 characters, a short string
 ;; that occupies less than 256 bytes and includes at least one multibyte
 ;; character, a medium string that occupies less than 65536 bytes, and finally
 ;; a large string whose text and metadata together are up to 4GB, the
 ;; addressing limit of this module.

 (import "block-mgr" "alloc-block"     (func $alloc-block         (param i32 i32) (result i32)))
 (import "block-mgr" "dealloc-block"   (func $dealloc-block       (param i32 i32)))
 (import "block-mgr" "get-block-addr"  (func $get-block-addr      (param i32)     (result i32)))
 (import "block-mgr" "init-blockset"   (func $init-blockset       (param i32 i32)))
 (import "chars" "calc-char-width"     (func $calc-char-width     (param i32)     (result i32)))
 (import "chars" "calc-encoded-length" (func $calc-encoded-length (param i32)     (result i32)))
 (import "chars" "encode-char"         (func $encode-char         (param i32)     (result i32)))
 (import "pairs" "get-pair-car"        (func $get-pair-car        (param i32)     (result i32)))
 (import "pairs" "get-pair-cdr"        (func $get-pair-cdr        (param i32)     (result i32)))
 (import "pairs" "make-pair"           (func $make-pair           (param i32 i32) (result i32)))
 (import "pairs" "dealloc-pair"        (func $dealloc-pair        (param i32)))

 (include "./block-mgr-memory-proxy-imports.wam")

 (include "./globals.wam")
 (include "./boxes.wam")
 (include "./values.wam")
 (include "./block-mgr-memory-proxies.wam")

 (memory $memory (debug (export "memory")) 1)

 ;; The string type constants not only identify the kind of string, but also
 ;; encode key bits of information which enables the code below to determine the
 ;; memory layout of the string's data block using just the box tag field.  The
 ;; table below describes this encoding.
 ;;
 ;;                                  ii iiii dddd  lll tttt tttt
 ;;     simple           xxxx xxxx xx10 0000 0001 x001 0000 0010
 ;;     small            xxxx xxxx xx00 0100 0010 x001 0000 0010
 ;;     medium           xxxx xxxx xx00 0101 0100 x010 0000 0010
 ;;     large            xxxx xxxx xx00 0110 1000 x100 0000 0010
 ;;
 ;; where
 ;;
 ;;   "ii iiii" is the right shift to calculate index length from string size
 ;;
 ;;   "dddd" is the length in bytes of the size and length fields/offset to
 ;;          string data
 ;;
 ;;   "lll" is the length in bytes of the size field/offset to the length field
 ;;
 ;;   "tttt tttt" is the box type for a string
 ;;
 ;;   "x" is unused
 ;;
 ;; The memory layout of the string within its block starts with 1, 2 or 4 bytes
 ;; for the size of the string in bytes, then 0, 1, 2, or 4 bytes for the length
 ;; of the string in characters, followed by the data section holding bytes of
 ;; the string.  Finally, after the data section is the optional index section,
 ;; containing a sequence of 1, 2, or 4 byte offsets into the string
 ;; corresponding to every 16th, 32nd, or 64th character, respectively.
 ;;
 ;; Concretely, a simple string has a single byte for the size.  It has no
 ;; length field since all of its characters are single byte, and for the same
 ;; reason, it has no index section.  It's just an ordinary length-prefixed
 ;; string.  A small string has a single byte for the size, followed by a single
 ;; byte for the length of the string. After that will be the characters of the
 ;; string.  After the string data, there will be up to 15 bytes of offsets into
 ;; the string data section for the characters at position 16, 32, 48, ..., 224,
 ;; and 240.  A medium string is similar to a small string, but the size,
 ;; length, and offsets are 2 byte values, and the offsets are recorded at
 ;; positions 32, 64, ..., 65504.  A large string has 4 byte size, length, and
 ;; offset values, and records index entries every 64th character.
 ;;

 (global $string-type-length-field-offset-mask       (debug (export "string-type-length-field-offset-mask")       i32 (i32.const 0x00000700)))
 (global $string-type-data-offset-mask               (debug (export "string-type-data-offset-mask")               i32 (i32.const 0x0000f000)))
 (global $string-type-index-shift-mask               (debug (export "string-type-index-shift-mask")               i32 (i32.const 0x003f0000)))

 (global $string-type-length-field-offset-shift-bits (debug (export "string-type-length-field-offset-shift-bits") i32 (i32.const 8)))
 (global $string-type-data-offset-shift-bits         (debug (export "string-type-data-offset-shift-bits")         i32 (i32.const 12)))
 (global $string-type-idx-mask-shift-bits            (debug (export "string-type-idx-mask-shift-bits")            i32 (i32.const 5)))
 (global $string-type-index-shift-shift-bits         (debug (export "string-type-index-shift-shift-bits")         i32 (i32.const 16)))

 (global $string-type-simple (debug (export "type-string-simple")) i32 (i32.const 0x00201102))
 (global $string-type-small  (debug (export "type-string-small"))  i32 (i32.const 0x00042102))
 (global $string-type-medium (debug (export "type-string-medium")) i32 (i32.const 0x00054202))
 (global $string-type-large  (debug (export "type-string-large"))  i32 (i32.const 0x00068402))
 (global $string-type-mask   (debug (export "type-string-mask"))   i32 (i32.const 0x003ff7ff))

 ;; These constants are used in hash-string to mix up the bits of the string.  See the
 ;; comment at the start of the function for an explanation.
 (global $string-hash-shift-bits  (debug (export "string-hash-shift-bits")  i32 (i32.const 5)))
 (global $string-hash-coefficient (debug (export "string-hash-coefficient") i32 (i32.const 3486784401))) ;; 3^20,
 (global $string-hash-constant    (debug (export "string-hash-constant")    i32 (i32.const 1518500249))) ;; floor(2^30 * sqrt(2))

 (macro %calc-idx-mask
   (expr ,type)
   (i32.wrap_i64
    (i64.sub (i64.shl (i64.const 1)
                      (i64.extend_i32_u
                       (i32.shr_u (i32.and ,type
                                           (global.get $string-type-length-field-offset-mask))
                                  (global.get $string-type-idx-mask-shift-bits))))
             (i64.const 1))))

 (macro %calc-length-field-offset
   (expr ,type)
   (i32.shr_u (i32.and ,type (global.get $string-type-length-field-offset-mask))
              (global.get $string-type-length-field-offset-shift-bits)))

 (macro %calc-data-offset
   (expr ,type)
   (i32.shr_u (i32.and ,type (global.get $string-type-data-offset-mask))
              (global.get $string-type-data-offset-shift-bits)))

 (macro %calc-index-size-shift-bits
   (expr ,type)
   (i32.shr_u (i32.and ,type (global.get $string-type-index-shift-mask))
              (global.get $string-type-index-shift-shift-bits)))

 (macro %calc-index-size
   (expr ,type)
   (expr ,length)
   (i32.shr_u ,length (%calc-index-size-shift-bits ,type)))

 (debug
  (func $calc-idx-mask (export "calc-idx-mask")
    (param $type i32)
    (result i32)
    (%calc-idx-mask (%get $type)))

  (func $calc-length-field-offset (export "calc-length-field-offset")
    (param $type i32)
    (result i32)
    (%calc-length-field-offset (%get $type)))

  (func $calc-data-offset (export "calc-data-offset")
    (param $type i32)
    (result i32)
    (%calc-data-offset (%get $type)))

  (func $calc-index-size-shift-bits (export "calc-index-size-shift-bits")
    (param $type i32)
    (result i32)
    (%calc-index-size-shift-bits (%get $type)))

  (func $calc-index-size (export "calc-index-size")
    (param $type i32)
    (param $length i32)
    (result i32)
    (%calc-index-size (%get $type) (%get $length))))

 (macro %get-string-type
   (expr ,s)
   (i32.and (%get-box-type ,s) (global.get $string-type-mask)))

 (macro %get-string-block-addr
   (expr ,s)
   (call $get-block-addr (%get-box-value ,s)))

 (macro %get-string-length
   (label $type)
   (label $addr)

   (if (result i32) (i32.eq (%get $type) (global.get $string-type-simple))
     (then
      (i32.load8_u (%get $addr)))
     (else
      (if (result i32) (i32.eq (%get $type) (global.get $string-type-small))
        (then
         ;; skip over the byte for size
         (i32.load8_u (i32.add (%get $addr) (i32.const 1))))
        (else
         (if (result i32) (i32.eq (%get $type) (global.get $string-type-medium))
           (then
            ;; skip over the 2 bytes for size
            (i32.load16_u (i32.add (%get $addr) (i32.const 2))))
           (else
            ;; skip over the 4 bytes for size
            (i32.load (i32.add (%get $addr) (i32.const 4))))))))))

 (macro %get-string-size
   (label $type)
   (label $addr)

   (if (result i32) (i32.eq (%get $type) (global.get $string-type-simple))
     (then
      (i32.load8_u (%get $addr)))
     (else
      (if (result i32) (i32.eq (%get $type) (global.get $string-type-small))
        (then
         (i32.load8_u (%get $addr)))
        (else
         (if (result i32) (i32.eq (%get $type) (global.get $string-type-medium))
           (then
            (i32.load16_u (%get $addr)))
           (else
            (i32.load (%get $addr)))))))))

 ;;-----------------------------------------------------------------------------
 ;;
 ;; Initialization
 ;;

 (start $init-strings)
 (func $init-strings (export "init-strings")
   (call $init-blockset (global.get $strings-blockset) (i32.const 0x400))

   ;; defined in block-mgr-memory-proxies.wam
   (call $init-blockset-memory-proxies (global.get $strings-blockset)))

 ;;-----------------------------------------------------------------------------
 ;;
 ;; Allocation
 ;;

 (func $alloc-string (export "alloc-string")
   (param $length i32)
   (param $size i32)
   (result i32)

   (local $addr i32)
   (local $block i32)
   (local $header-size i32)
   (local $index-size i32)
   (local $type i32)

   (%set! $type (call $make-string-type (%get $length) (%get $size)))
   (%set! $header-size (%calc-data-offset (%get $type)))
   (%set! $index-size (%calc-index-size (%get $type) (%get $length)))

   (%set! $block (call $alloc-block
                           (global.get $strings-blockset)
                           (i32.add (%get $header-size)
                                    (i32.add (%get $size)
                                             (%get $index-size)))))

   (%set! $addr (call $get-block-addr (%get $block)))

   (if (i32.eq (%get $type) (global.get $string-type-simple))
       (then
        (i32.store8 (%get $addr) (%get $length)))

     (else
      (if (i32.eq (%get $type) (global.get $string-type-small))
          (then
           (i32.store8 (%get $addr) (%get $size))
           (i32.store8 (i32.add (%get $addr) (i32.const 1)) (%get $length)))

        (else
         (if (i32.eq (%get $type) (global.get $string-type-medium))
             (then
              (i32.store16 (%get $addr) (%get $size))
              (i32.store16 (i32.add (%get $addr) (i32.const 2)) (%get $length)))

           (else ;; $string-type-large
            (i32.store (%get $addr) (%get $size))
            (i32.store (i32.add (%get $addr) (i32.const 4)) (%get $length))))))))

   (%make-box (%get $type) (%get $block)))

 (func $make-string-type (debug (export "make-string-type"))
   (param $length i32)
   (param $size i32)
   (result i32)

   (if (result i32) (i32.and (i32.lt_u (%get $size) (i32.const 0x100))
                             (i32.eq (%get $size) (%get $length)))
     (then
      (global.get $string-type-simple))
     (else
      (if (result i32) (i32.lt_u (%get $size) (i32.const 0x100))
        (then
         (global.get $string-type-small))
        (else
         (if (result i32) (i32.lt_u (%get $size) (i32.const 0x10000))
           (then
            (global.get $string-type-medium))
           (else
            (global.get $string-type-large))))))))

 ;;-----------------------------------------------------------------------------
 ;;
 ;; Deallocation
 ;;

 (func $dealloc-string (export "dealloc-string")
   (param $s i32)

   (call $dealloc-block
         (global.get $strings-blockset)
         (%get-box-value (%get $s)))

   (%dealloc-box (%get $s)))

 (func $get-string-addr (export "get-string-addr")
   (param $s i32)
   (result i32)

   (local $type i32)
   (%set! $type (%get-string-type (%get $s)))

   (i32.add (%get-string-block-addr (%get $s))
            (%calc-data-offset (%get $type))))

 (func $get-string-index-addr
   (param $s i32)
   (result i32)

   (local $addr i32)
   (local $length i32)
   (local $type i32)

   (%set! $type (%get-string-type (%get $s)))
   (%set! $addr (%get-string-block-addr (%get $s)))

   (i32.add (%get $addr)
            (i32.add (%calc-data-offset (%get $type))
                     (%get-string-size $type $addr))))

 (func $get-string-length (export "get-string-length")
   (param $s i32)
   (result i32)

   (local $addr i32)
   (local $type i32)

   (%set! $type (%get-string-type (%get $s)))
   (%set! $addr (%get-string-block-addr (%get $s)))

   (%get-string-length $type $addr))

 (func $get-string-size (export "get-string-size")
   (param $s i32)
   (result i32)

   (local $addr i32)
   (local $type i32)

   (%set! $type (%get-string-type (%get $s)))
   (%set! $addr (%get-string-block-addr (%get $s)))

   (%get-string-size $type $addr))

 ;;-----------------------------------------------------------------------------
 ;;
 ;; Indexes
 ;;

 (func $build-string-index (export "build-string-index")
   (param $s i32)

   (local $string-type i32)

   (if (i32.eq (%get $string-type) (global.get $string-type-small))
       (then
        (call $build-small-string-index (%get $s)))
     (else
      (if (i32.eq (%get $string-type) (global.get $string-type-medium))
          (then
           (call $build-medium-string-index (%get $s)))
        (else
         (call $build-large-string-index (%get $s)))))))

 (func $build-small-string-index (export "build-small-string-index")
   (param $s i32)

   (local $addr i32)
   (local $char-addr i32)
   (local $count i32)
   (local $idx-addr i32)
   (local $length i32)

   (%set! $addr (call $get-string-addr (%get $s)))
   (%set! $char-addr (%get $addr))
   (%set! $idx-addr (call $get-string-index-addr (%get $s)))

   (%set! $count (i32.const 0))
   (%set! $length (call $get-string-length (%get $s)))

   (loop $again
     (if (i32.lt_u (%get $count) (%get $length))
         (then
          (%set! $char-addr (call $get-next-char-addr (%get $char-addr)))
          (%incr i32 $count)

          ;; count % 16 == 0
          (if (i32.eqz (i32.and (%get $count) (i32.const 0xf)))
              (then
               (i32.store8 (%get $idx-addr)
                           (i32.sub (%get $char-addr) (%get $addr)))
               (%incr i32 $idx-addr)))
          (br $again)))))

 (func $build-medium-string-index (export "build-medium-string-index")
   (param $s i32)

   (local $addr i32)
   (local $char-addr i32)
   (local $count i32)
   (local $idx-addr i32)
   (local $length i32)

   (%set! $addr (call $get-string-addr (%get $s)))
   (%set! $char-addr (%get $addr))
   (%set! $idx-addr (call $get-string-index-addr (%get $s)))

   (%set! $count (i32.const 0))
   (%set! $length (call $get-string-length (%get $s)))

   (loop $again
     (if (i32.lt_u (%get $count) (%get $length))
         (then
          (%set! $char-addr (call $get-next-char-addr (%get $char-addr)))
          (%incr i32 $count)

          ;; count % 32 == 0
          (if (i32.eqz (i32.and (%get $count) (i32.const 0x1f)))
              (then
               (i32.store16 (%get $idx-addr)
                            (i32.sub (%get $char-addr) (%get $addr)))
               (%incr-n i32 $idx-addr 2)))
          (br $again)))))

 (func $build-large-string-index (export "build-large-string-index")
   (param $s i32)

   (local $addr i32)
   (local $char-addr i32)
   (local $count i32)
   (local $idx-addr i32)
   (local $length i32)

   (%set! $addr (call $get-string-addr (%get $s)))
   (%set! $char-addr (%get $addr))
   (%set! $idx-addr (call $get-string-index-addr (%get $s)))

   (%set! $count (i32.const 0))
   (%set! $length (call $get-string-length (%get $s)))

   (loop $again
     (if (i32.lt_u (%get $count) (%get $length))
         (then
          (%set! $char-addr (call $get-next-char-addr (%get $char-addr)))
          (%incr i32 $count)

          ;; count % 64 == 0
          (if (i32.eqz (i32.and (%get $count) (i32.const 0x3f)))
              (then
               (i32.store (%get $idx-addr)
                          (i32.sub (%get $char-addr) (%get $addr)))
               (%incr-n i32 $idx-addr 4)))
          (br $again)))))

 ;;-----------------------------------------------------------------------------
 ;;
 ;; Data Access
 ;;

 (func $get-next-char-addr (export "get-next-char-addr")
   (param $addr i32)
   (result i32)

   (local $encoded-length i32)

   (%set! $encoded-length (call $calc-encoded-length (i32.load8_u (%get $addr))))

   (if (i32.eq (%get $encoded-length) (i32.const -1))
       (then
        (unreachable)))

   (i32.add (%get $addr) (%get $encoded-length)))

 (func $set-string-bytes (debug (export "set-string-bytes"))
   (param $addr i32)
   (param $data i32)
   (param $length i32)

   (if (i32.eq (%get $length) (i32.const 1))
       (then
        (i32.store8 (%get $addr) (%get $data)))
     (else
      (if (i32.eq (%get $length) (i32.const 2))
          (then
           (i32.store16 (%get $addr) (%get $data)))
        (else
         (if (i32.eq (%get $length) (i32.const 3))
             (then
              (i32.store16 (%get $addr) (%get $data))
              (i32.store8 (i32.add (%get $addr) (i32.const 2))
                          (i32.shr_u (%get $data)
                                     (i32.const 16))))
           (else
            (i32.store (%get $addr) (%get $data)))))))))

 (func $get-string-bytes (debug (export "get-string-bytes"))
   (param $addr i32)
   (param $length i32)
   (result i32)

   (if (result i32) (i32.eq (%get $length) (i32.const 1))
     (then
      (i32.load8_u (%get $addr)))
     (else
      (if (result i32) (i32.eq (%get $length) (i32.const 2))
        (then
         (i32.load16_u (%get $addr)))
        (else
         (if (result i32) (i32.eq (%get $length) (i32.const 3))
           (then
            (i32.and (i32.load (%get $addr))
                     (i32.const 0xffffff)))
           (else
            (i32.load (%get $addr)))))))))

 ;;-----------------------------------------------------------------------------
 ;;
 ;; Symbols module support
 ;;
 ;; The hash-string and string-equal functions provide the symbols module with
 ;; the primitives it needs to implement a hash table which maps strings to
 ;; symbols.
 ;;

 (func $hash-string (export "hash-string")

   ;; hash-string accumulates the bits of the characters in the string using a
   ;; combination of xor and rotate.  Each 4-byte chunk is xor'd with the
   ;; current hash value and then rotated left 5 bit positions. Over longer
   ;; strings this will spread the influence of the bit position of any octet
   ;; throughout the hash value, and specifically the choice of 5 is due to the
   ;; fact that typically the lower 5 bits of the text have the highest entropy
   ;; (think ASCII here).  The final step is to add a number between 2^30 and
   ;; 2^31 and then multiply by an odd number between 2^31 and 2^32.  This
   ;; distributes even short strings throughout the hash space.  The last two
   ;; values are arbitrary, the only things being important are the approximate
   ;; size of values, and the fact that the number used in the multiplication
   ;; is odd and not -1 or 1.
   ;;

   (param $s i32)
   (result i32)

   (local $addr i32)
   (local $count i32)
   (local $hash i32)

   (%set! $addr (call $get-string-addr (%get $s)))
   (%set! $count (call $get-string-size (%get $s)))
   (%set! $hash (i32.const 0))

   (macro %update-hash
     (label $hash)
     (expr ,value)

     (%set! $hash (i32.xor (i32.rotl (%get $hash)
                                         (global.get $string-hash-shift-bits))
                               ,value)))

   (loop $again
     (if (i32.ge_u (%get $count) (i32.const 4))
         (then
          (%update-hash $hash (i32.load (%get $addr)))
          (%decr-n i32 $count 4)
          (%incr-n i32 $addr 4)
          (br $again))))

   (if (i32.ge_u (%get $count) (i32.const 2))
       (then
        (%update-hash $hash (i32.load16_u (%get $addr)))
        (%decr-n i32 $count 2)
        (%incr-n i32 $addr 2)))

   (if (%get $count)
       (then
        (%update-hash $hash (i32.load8_u (%get $addr)))))

   (i32.mul (i32.add (%get $hash)
                     (global.get $string-hash-constant))
            (global.get $string-hash-coefficient)))

 (func $string-equal (export "string-equal")

   ;; Since this is designed expressly for the hash table use case of the
   ;; symbols module, it needs to be quick and do nothing more than required.
   ;; The more general collation-aware trinary (-1, 0, 1) string-compare
   ;; function (yet to be implemented) will likely have a significantly longer
   ;; runtime for the same inputs.

   (param $s1 i32)
   (param $s2 i32)
   (result i32)

   (local $addr1 i32)
   (local $addr2 i32)
   (local $count i32)

   (%set! $count (call $get-string-size (%get $s1)))

   (if (i32.ne (%get $count) (call $get-string-size (%get $s2)))
       (then
        (return (i32.const 0))))

   (if (i32.ne (call $get-string-length (%get $s1))
               (call $get-string-length (%get $s2)))
       (then
        (return (i32.const 0))))

   (%set! $addr1 (call $get-string-addr (%get $s1)))
   (%set! $addr2 (call $get-string-addr (%get $s2)))

   (loop $again
     (if (i32.ge_u (%get $count) (i32.const 8))
         (then
          (if (i64.ne (i64.load (%get $addr1))
                      (i64.load (%get $addr2)))
              (then
               (return (i32.const 0))))
          (%decr-n i32 $count 8)
          (%incr-n i32 $addr1 8)
          (%incr-n i32 $addr2 8)
          (br $again))))

   (if (i32.ge_u (%get $count) (i32.const 4))
       (then
        (if (i32.ne (i32.load (%get $addr1))
                    (i32.load (%get $addr2)))
            (then
             (return (i32.const 0))))
        (%decr-n i32 $count 4)
        (%incr-n i32 $addr1 4)
        (%incr-n i32 $addr2 4)))

   (if (i32.ge_u (%get $count) (i32.const 2))
       (then
        (if (i32.ne (i32.load16_u (%get $addr1))
                    (i32.load16_u (%get $addr2)))
            (then
             (return (i32.const 0))))
        (%decr-n i32 $count 2)
        (%incr-n i32 $addr1 2)
        (%incr-n i32 $addr2 2)))

   (if (i32.eq (%get $count) (i32.const 1))
       (then
        (if (i32.ne (i32.load8_u (%get $addr1))
                    (i32.load8_u (%get $addr2)))
            (then
             (return (i32.const 0))))))

   (i32.const 1))

 ;; end of module
 )
