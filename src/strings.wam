(module

 (import "block-mgr" "alloc-block"        (func $alloc-block         (param i32 i32) (result i32)))
 (import "block-mgr" "dealloc-block"      (func $dealloc-block       (param i32 i32)))
 (import "block-mgr" "get-block-addr" (func $get-block-addr  (param i32)     (result i32)))
 (import "block-mgr" "init-blockset"      (func $init-blockset       (param i32 i32 i32)))
 (import "chars" "calc-char-width"        (func $calc-char-width     (param i32)     (result i32)))
 (import "chars" "calc-encoded-length"    (func $calc-encoded-length (param i32)     (result i32)))
 (import "chars" "encode-char"            (func $encode-char         (param i32)     (result i32)))
 (import "lists" "get-list-length"        (func $get-list-length     (param i32)     (result i32)))
 (import "pairs" "get-pair-car"           (func $get-pair-car        (param i32)     (result i32)))
 (import "pairs" "get-pair-cdr"           (func $get-pair-cdr        (param i32)     (result i32)))
 (import "pairs" "make-pair"              (func $make-pair           (param i32 i32) (result i32)))
 (import "pairs" "dealloc-pair"           (func $dealloc-pair        (param i32)))

 (include "./block-mgr-memory-proxy-imports.wam")

 (include "./globals.wam")
 (include "./boxes.wam")
 (include "./values.wam")
 (include "./block-mgr-memory-proxies.wam")

 (memory $memory (debug (export "memory")) 1)

 ;;                                  ii iiii dddd  lll tttt tttt
 ;;     simple           xxxx xxxx xx10 0000 0001 x001 0000 0002
 ;;     small            xxxx xxxx xx00 0100 0010 x001 0000 0002
 ;;     medium           xxxx xxxx xx00 0101 0100 x010 0000 0002
 ;;     large            xxxx xxxx xx00 0110 1000 x100 0000 0002
 ;;
 ;; where "ii iiii" is the right shift to calculate index length from string size
 ;;       "dddd" is the length in bytes of the size and length fields/offset to string data
 ;;       "lll" is the length in bytes of the size field/offset to the length field
 ;;       "tttt tttt" is the box type for a string
 ;;       "x" is unused

 (global $string-type-length-field-offset-mask       (debug (export "string-type-length-field-offset-mask")       i32 (i32.const 0x00000700)))
 (global $string-type-data-offset-mask               (debug (export "string-type-data-offset-mask")               i32 (i32.const 0x0000f000)))
 (global $string-type-index-shift-mask               (debug (export "string-type-index-shift-mask")               i32 (i32.const 0x003f0000)))

 (global $string-type-length-field-offset-shift-bits (debug (export "string-type-length-field-offset-shift-bits") i32 (i32.const 8)))
 (global $string-type-data-offset-shift-bits         (debug (export "string-type-data-offset-shift-bits")         i32 (i32.const 12)))
 (global $string-type-index-shift-shift-bits         (debug (export "string-type-index-shift-shift-bits")         i32 (i32.const 16)))

 (global $string-type-simple (debug (export "type-string-simple")) i32 (i32.const 0x00201102))
 (global $string-type-small  (debug (export "type-string-small"))  i32 (i32.const 0x00042102))
 (global $string-type-medium (debug (export "type-string-medium")) i32 (i32.const 0x00054202))
 (global $string-type-large  (debug (export "type-string-large"))  i32 (i32.const 0x00068402))
 (global $string-type-mask   (debug (export "type-string-mask"))   i32 (i32.const 0x003ff7ff))

 (global $string-hash-shift-bits  (debug (export "string-hash-shift-bits")  i32 (i32.const 5)))
 (global $string-hash-coefficient (debug (export "string-hash-coefficient") i32 (i32.const 3486784401))) ;; 3^20,
 (global $string-hash-constant    (debug (export "string-hash-constant")    i32 (i32.const 1518500249))) ;; floor(2^30 * sqrt(2))

 (macro %calc-length-field-offset
   (expr ,type)
   (i32.shr_u (i32.and ,type (global.get $string-type-length-field-offset-mask))
              (global.get $string-type-length-field-offset-shift-bits)))

 (macro %calc-data-offset
   (expr ,type)
   (i32.shr_u (i32.and ,type (global.get $string-type-data-offset-mask))
              (global.get $string-type-data-offset-shift-bits)))

 (macro %calc-index-size-shift-bits
   (expr ,type)
   (i32.shr_u (i32.and ,type (global.get $string-type-index-shift-mask))
              (global.get $string-type-index-shift-shift-bits)))

 (macro %calc-index-size
   (expr ,type)
   (expr ,length)
   (i32.shr_u ,length (%calc-index-size-shift-bits ,type)))

 (macro %get-string-type
   (expr ,s)
   (i32.and (%get-box-type ,s) (global.get $string-type-mask)))

 (macro %get-string-block-addr
   (expr ,s)
   (call $get-block-addr (%get-box-value ,s)))

 (macro %get-string-length
   (label $type)
   (label $addr)

   (if (result i32) (i32.eq (local.get $type) (global.get $string-type-simple))
     (then
      (i32.load8_u (local.get $addr)))
     (else
      (if (result i32) (i32.eq (local.get $type) (global.get $string-type-small))
        (then
         ;; skip over the byte for size
         (i32.load8_u (i32.add (local.get $addr) (i32.const 1))))
        (else
         (if (result i32) (i32.eq (local.get $type) (global.get $string-type-medium))
           (then
            ;; skip over the 2 bytes for size
            (i32.load16_u (i32.add (local.get $addr) (i32.const 2))))
           (else
            ;; skip over the 4 bytes for size
            (i32.load (i32.add (local.get $addr) (i32.const 4))))))))))

 (macro %get-string-size
   (label $type)
   (label $addr)

   (if (result i32) (i32.eq (local.get $type) (global.get $string-type-simple))
     (then
      (i32.load8_u (local.get $addr)))
     (else
      (if (result i32) (i32.eq (local.get $type) (global.get $string-type-small))
        (then
         (i32.load8_u (local.get $addr)))
        (else
         (if (result i32) (i32.eq (local.get $type) (global.get $string-type-medium))
           (then
            (i32.load16_u (local.get $addr)))
           (else
            (i32.load (local.get $addr)))))))))

 (start $init-strings)
 (func $init-strings (export "init-strings")
   (call $init-blockset
         (global.get $strings-blockset-id)
         (i32.const 0x1000)
         (i32.const 0x8000))

   ;; defined in block-mgr-memory-proxies.wam
   (call $init-blockset-memory-proxies (global.get $strings-blockset-id)))

 (func $is-string (export "is-string")
   (param $value i32)
   (result i32)
   ;; todo -- fold types
   (i32.eq (%get-value-tag (local.get $value)) (global.get $tag-string)))

 (func $alloc-string (export "alloc-string")
   (param $length i32)
   (param $size i32)
   (result i32)

   (local $addr i32)
   (local $block i32)
   (local $header-size i32)
   (local $index-size i32)
   (local $type i32)

   (local.set $type (call $make-string-type (local.get $length) (local.get $size)))
   (local.set $header-size (%calc-data-offset (local.get $type)))
   (local.set $index-size (%calc-index-size (local.get $type) (local.get $length)))

   (local.set $block (call $alloc-block
                               (global.get $strings-blockset-id)
                               (i32.add (local.get $header-size)
                                        (i32.add (local.get $size)
                                                 (local.get $index-size)))))

   (local.set $addr (call $get-block-addr (local.get $block)))

   (if (i32.eq (local.get $type) (global.get $string-type-simple))
       (then
        (i32.store8 (local.get $addr) (local.get $length)))

     (else
      (if (i32.eq (local.get $type) (global.get $string-type-small))
          (then
           (i32.store8 (local.get $addr) (local.get $size))
           (i32.store8 (i32.add (local.get $addr) (i32.const 1)) (local.get $length)))

        (else
         (if (i32.eq (local.get $type) (global.get $string-type-medium))
             (then
              (i32.store16 (local.get $addr) (local.get $size))
              (i32.store16 (i32.add (local.get $addr) (i32.const 2)) (local.get $length)))

           (else ;; $string-type-large
            (i32.store (local.get $addr) (local.get $size))
            (i32.store (i32.add (local.get $addr) (i32.const 4)) (local.get $length))))))))

   (%make-box (local.get $type) (local.get $block)))

 (func $make-string-type (debug (export "make-string-type"))
   (param $length i32)
   (param $size i32)
   (result i32)

   (if (result i32) (i32.and (i32.lt_u (local.get $size) (i32.const 0x100))
                             (i32.eq (local.get $size) (local.get $length)))
     (then
      (global.get $string-type-simple))
     (else
      (if (result i32) (i32.lt_u (local.get $size) (i32.const 0x100))
        (then
         (global.get $string-type-small))
        (else
         (if (result i32) (i32.lt_u (local.get $size) (i32.const 0x10000))
           (then
            (global.get $string-type-medium))
           (else
            (global.get $string-type-large))))))))

 (debug
  (func $calc-data-offset (export "calc-data-offset")
    (param $type i32)
    (result i32)
    (%calc-data-offset (local.get $type))))

 (func $dealloc-string (export "dealloc-string")
   (param $s i32)

   (call $dealloc-block
         (global.get $strings-blockset-id)
         (%get-box-value (local.get $s)))

   (%dealloc-box (local.get $s)))

 (func $get-string-addr (export "get-string-addr")
   (param $s i32)
   (result i32)

   (local $type i32)
   (local.set $type (%get-string-type (local.get $s)))

   (i32.add (%get-string-block-addr (local.get $s))
            (%calc-data-offset (local.get $type))))

 (func $get-string-index-addr
   (param $s i32)
   (result i32)

   (local $addr i32)
   (local $length i32)
   (local $type i32)

   (local.set $type (%get-string-type (local.get $s)))
   (local.set $addr (%get-string-block-addr (local.get $s)))

   (i32.add (local.get $addr)
            (i32.add (%calc-data-offset (local.get $type))
                     (%get-string-size $type $addr))))

 (func $get-string-length (export "get-string-length")
   (param $s i32)
   (result i32)

   (local $addr i32)
   (local $type i32)

   (local.set $type (%get-string-type (local.get $s)))
   (local.set $addr (%get-string-block-addr (local.get $s)))

   (%get-string-length $type $addr))

 (func $get-string-size (export "get-string-size")
    (param $s i32)
    (result i32)

    (local $addr i32)
    (local $type i32)

    (local.set $type (%get-string-type (local.get $s)))
    (local.set $addr (%get-string-block-addr (local.get $s)))

    (%get-string-size $type $addr))

 (func $make-string (export "make-string")
   (param $length i32)
   (param $char i32)
   (result i32)

   (local $addr i32)
   (local $char-utf-8 i32)
   (local $char-width i32)
   (local $count i32)
   (local $s i32)
   (local $size i32)

   (local.set $char-width (call $calc-char-width (local.get $char)))

   (local.set $s (call $alloc-string
                       (local.get $length)
                       (i32.mul (local.get $char-width) (local.get $length))))

   (local.set $addr (call $get-string-addr (local.get $s)))

   (if (i32.eq (local.get $char-width) (i32.const 1))
       (then
        (memory.fill
         (local.get $addr)
         (local.get $char)
         (local.get $length)))

     (else

      (local.set $char-utf-8 (call $encode-char (local.get $char)))
      (local.set $count (local.get $length))

      (loop $again
        (if (local.get $count)
            (then

             (call $set-string-bytes
                   (local.get $addr)
                   (local.get $char-utf-8)
                   (local.get $char-width))

             (local.set $addr (i32.add (local.get $addr) (local.get $char-width)))
             (%decr i32 $count)

             (br $again))))))

   (call $build-string-index (local.get $s))
   (local.get $s))

 (func $build-string-index (export "build-string-index")
   (param $s i32)

   (local $string-type i32)

   (if (i32.eq (local.get $string-type) (global.get $string-type-small))
       (then
        (call $build-small-string-index (local.get $s)))
     (else
      (if (i32.eq (local.get $string-type) (global.get $string-type-medium))
          (then
           (call $build-medium-string-index (local.get $s)))
        (else
         (call $build-large-string-index (local.get $s)))))))

 (func $build-small-string-index (export "build-small-string-index")
   (param $s i32)

   (local $addr i32)
   (local $char-addr i32)
   (local $count i32)
   (local $idx-addr i32)
   (local $length i32)

   (local.set $addr (call $get-string-addr (local.get $s)))
   (local.set $char-addr (local.get $addr))
   (local.set $idx-addr (call $get-string-index-addr (local.get $s)))

   (local.set $count (i32.const 0))
   (local.set $length (call $get-string-length (local.get $s)))

   (loop $again
     (if (i32.lt_u (local.get $count) (local.get $length))
         (then
          (local.set $char-addr (call $get-next-char-addr (local.get $char-addr)))
          (%incr i32 $count)

          (if (i32.and (local.get $count) (i32.const 0xf))
              (then
               (i32.store8 (local.get $idx-addr)
                           (i32.sub (local.get $char-addr) (local.get $addr)))
               (%incr i32 $idx-addr)))
          (br $again)))))

 (func $build-medium-string-index (export "build-medium-string-index")
   (param $s i32)

   (local $addr i32)
   (local $char-addr i32)
   (local $count i32)
   (local $idx-addr i32)
   (local $length i32)

   (local.set $addr (call $get-string-addr (local.get $s)))
   (local.set $char-addr (local.get $addr))
   (local.set $idx-addr (call $get-string-index-addr (local.get $s)))

   (local.set $count (i32.const 0))
   (local.set $length (call $get-string-length (local.get $s)))

   (loop $again
     (if (i32.lt_u (local.get $count) (local.get $length))
         (then
          (local.set $char-addr (call $get-next-char-addr (local.get $char-addr)))
          (%incr i32 $count)

          (if (i32.and (local.get $count) (i32.const 0x1f))
              (then
               (i32.store16 (local.get $idx-addr)
                            (i32.sub (local.get $char-addr) (local.get $addr)))
               (%incr-n i32 $idx-addr 2)))
          (br $again)))))

 (func $build-large-string-index (export "build-large-string-index")
   (param $s i32)

   (local $addr i32)
   (local $char-addr i32)
   (local $count i32)
   (local $idx-addr i32)
   (local $length i32)

   (local.set $addr (call $get-string-addr (local.get $s)))
   (local.set $char-addr (local.get $addr))
   (local.set $idx-addr (call $get-string-index-addr (local.get $s)))

   (local.set $count (i32.const 0))
   (local.set $length (call $get-string-length (local.get $s)))

   (loop $again
     (if (i32.lt_u (local.get $count) (local.get $length))
         (then
          (local.set $char-addr (call $get-next-char-addr (local.get $char-addr)))
          (%incr i32 $count)

          (if (i32.and (local.get $count) (i32.const 0x3f))
              (then
               (i32.store (local.get $idx-addr)
                          (i32.sub (local.get $char-addr) (local.get $addr)))
               (%incr-n i32 $idx-addr 4)))
          (br $again)))))

 (func $get-next-char-addr (export "get-next-char-addr")
   (param $addr i32)
   (result i32)

   (local $encoded-length i32)

   (local.set $encoded-length (call $calc-encoded-length (i32.load8_u (local.get $addr))))

   (if (i32.eq (local.get $encoded-length) (i32.const -1))
       (then
        (unreachable)))

   (i32.add (local.get $addr) (local.get $encoded-length)))

 (func $build-string (export "build-string")
   (param $list i32)
   (result i32)

   (local $addr i32)
   (local $char-length i32)
   (local $char-utf-8 i32)
   (local $head i32)
   (local $length i32)
   (local $s i32)
   (local $size i32)

   (local.set $head (local.get $list))
   (local.set $size (i32.const 0))

   (local.set $length (i32.const 0))
   (loop $again
     (if (i32.ne (local.get $head) (global.get $null))
         (then
          (local.set $size (i32.add (local.get $size)
                                    (call $calc-char-width
                                          (call $encode-char
                                                (call $get-pair-car (local.get $head))))))
          (%next-cdr $head)
          (%incr i32 $length)
          (br $again))))

   (local.set $s (call $alloc-string (local.get $length) (local.get $size)))

   (local.set $head (local.get $list))
   (local.set $addr (call $get-string-addr (local.get $s)))

   (loop $again
     (if (i32.ne (local.get $head) (global.get $null))
         (then
          (local.set $char-utf-8 (call $encode-char (call $get-pair-car (local.get $head))))
          (local.set $char-length (call $calc-encoded-length (local.get $char-utf-8)))

          (call $set-string-bytes
                (local.get $addr)
                (local.get $char-utf-8)
                (local.get $char-length))

          (local.set $addr (i32.add (local.get $addr) (local.get $char-length)))
          (%next-cdr $head)

          (br $again))))

   (local.get $s))

 (func $set-string-bytes (debug (export "set-string-bytes"))
   (param $addr i32)
   (param $data i32)
   (param $length i32)

   (if (i32.eq (local.get $length) (i32.const 1))
       (then
        (i32.store8 (local.get $addr) (local.get $data)))
     (else
      (if (i32.eq (local.get $length) (i32.const 2))
          (then
           (i32.store16 (local.get $addr) (local.get $data)))
        (else
         (if (i32.eq (local.get $length) (i32.const 3))
             (then
              (i32.store16 (local.get $addr) (local.get $data))
              (i32.store8 (i32.add (local.get $addr) (i32.const 2))
                          (i32.shr_u (local.get $data)
                                     (i32.const 16))))
           (else
            (i32.store (local.get $addr) (local.get $data)))))))))

 (func $get-string-bytes (debug (export "get-string-bytes"))
   (param $addr i32)
   (param $length i32)
   (result i32)

   (if (result i32) (i32.eq (local.get $length) (i32.const 1))
       (then
        (i32.load8_u (local.get $addr)))
     (else
      (if (result i32) (i32.eq (local.get $length) (i32.const 2))
          (then
           (i32.load16_u (local.get $addr)))
        (else
         (if (result i32) (i32.eq (local.get $length) (i32.const 3))
           (then
            (i32.and (i32.load (local.get $addr))
                     (i32.const 0xffffff)))
           (else
            (i32.load (local.get $addr)))))))))

 ;; (func $get-string-element (export "get-string-element")
 ;;   (param $s i32)
 ;;   (param $idx i32)
 ;;   (result i32)

 ;;   ;; TODO
 ;;   (if (result i32) (i32.lt_u (local.get $idx) (call $get-string-length (local.get $s)))
 ;;     (then
 ;;      (call $get-block-i8-element (local.get $block) (local.get $idx)))
 ;;     (else
 ;;      (global.get $null))))

 ;; (func $set-string-element (export "set-string-element")
 ;;   (param $s i32)
 ;;   (param $idx i32)
 ;;   (param $byte i32)

 ;;   ;; TODO
 ;;   (if (i32.lt_u (local.get $idx) (call $get-string-length (local.get $s)))
 ;;     (then
 ;;      (call $set-block-i8-element (local.get $block) (local.get $idx) (local.get $byte)))))

 ;; (func $make-string-copy (export "make-string-copy")
 ;;   (param $s i32)
 ;;   (param $start i32)
 ;;   (param $end i32)
 ;;   (result i32)

 ;;   ;; TODO
 ;;   (local $new-bv i32)

 ;;   (local.set $length ())

 ;;   (local.set $new-bv (call $falloc-string (i32.sub (local.get $end)
 ;;                                                   (local.get $start))))
 ;;   (call $copy-block-i8-range
 ;;         (call $get-box-value (local.get $s))
 ;;         (local.get $start)
 ;;         (local.get $end)
 ;;         (call $get-box-value (local.get $new-bv))
 ;;         (i32.const 0))

 ;;   (local.get $new-bv))

 ;; (func $can-make-string-copy (export "can-make-string-copy")
 ;;   (param $s i32)
 ;;   (param $start i32)
 ;;   (param $end i32)
 ;;   (result i32)

 ;;   ;; TODO
 ;;   (local $new-bv i32)

 ;;   (i32.and (i32.lt_u (local.get $end) (call $get-string-length (local.get $s)))
 ;;            (i32.le_u (local.get $start) (local.get $end))))

 ;; (func $copy-string-range (export "copy-string-range")
 ;;   (param $s-to i32)
 ;;   (param $at i32)
 ;;   (param $s-from i32)
 ;;   (param $start i32)
 ;;   (param $end i32)

 ;;   ;; TODO
 ;;   (call $copy-block-i8-range
 ;;         (call $get-box-value (local.get $s-from))
 ;;         (local.get $start)
 ;;         (local.get $end)
 ;;         (call $get-box-value (local.get $s-to))
 ;;         (local.get $at)))

 ;; (func $can-copy-string-range (export "can-copy-string-range")
 ;;   (param $s-to i32)
 ;;   (param $at i32)
 ;;   (param $s-from i32)
 ;;   (param $start i32)
 ;;   (param $end i32)
 ;;   (result i32)

 ;;   ;; TODO
 ;;   (local $to-length i32)
 ;;   (local.set $to-length (call $get-string-length (local.get $to)))

 ;;   (i32.and (call $can-make-string-copy
 ;;                  (local.get $s-from)
 ;;                  (local.get $start)
 ;;                  (local.get $end))
 ;;            (i32.and (i32.ge_u (local.get $to-length) (local.get $at))
 ;;                     (i32.ge_u (i32.sub (local.get $to-length) (local.get $at))
 ;;                               (i32.sub (local.get $end) (local.get $start))))))

 ;; (func $append-strings (export "append-strings")
 ;;   (param $s-1 i32)
 ;;   (param $s-2 i32)
 ;;   (result i32)

 ;;   ;; TODO
 ;;   (local $s i32)
 ;;   (local $length-1 i32)
 ;;   (local $length-2 i32)

 ;;   (local.set $length-1 (call $get-string-length (local.get $s-1)))
 ;;   (local.set $length-2 (call $get-string-length (local.get $s-2)))

 ;;   (local.set $s (call $alloc-string
 ;;                        (i32.add (local.get $length-1) (local.get $length-2))))

 ;;   (call $copy-string-range
 ;;         (local.get $s)
 ;;         (i32.const 0)
 ;;         (local.get $s-1)
 ;;         (i32.const 0)
 ;;         (local.get $length-1))

 ;;   (call $copy-string-range
 ;;         (local.get $s)
 ;;         (local.get $length-1)
 ;;         (local.get $s-2)
 ;;         (i32.const 0)
 ;;         (local.get $length-2))

 ;;   (local.get $s))

 (macro %update-hash
   (label $hash)
   (expr ,value)

   (local.set $hash (i32.xor (i32.rotl (local.get $hash)
                                       (global.get $string-hash-shift-bits))
                             ,value)))

 (func $hash-string (export "hash-string")
   (param $s i32)
   (result i32)

   (local $addr i32)
   (local $count i32)
   (local $hash i32)

   (local.set $addr (call $get-string-addr (local.get $s)))
   (local.set $count (call $get-string-size (local.get $s)))
   (local.set $hash (i32.const 0))

   (loop $again
     (if (i32.ge_u (local.get $count) (i32.const 4))
         (then
          (%update-hash $hash (i32.load (local.get $addr)))
          (%decr-n i32 $count 4)
          (%incr-n i32 $addr 4)
          (br $again))))

   (if (i32.ge_u (local.get $count) (i32.const 2))
       (then
        (%update-hash $hash (i32.load16_u (local.get $addr)))
        (%decr-n i32 $count 2)
        (%incr-n i32 $addr 2)))

   (if (local.get $count)
       (then
        (%update-hash $hash (i32.load8_u (local.get $addr)))))

   (i32.mul (i32.add (local.get $hash)
                     (global.get $string-hash-constant))
            (global.get $string-hash-coefficient)))

 (func $string-equal (export "string-equal")
   (param $s1 i32)
   (param $s2 i32)
   (result i32)

   (local $addr1 i32)
   (local $addr2 i32)
   (local $count i32)

   (local.set $count (call $get-string-size (local.get $s1)))

   (if (i32.ne (local.get $count) (call $get-string-size (local.get $s2)))
       (then
        (return (i32.const 0))))

   (if (i32.ne (call $get-string-length (local.get $s1))
               (call $get-string-length (local.get $s2)))
       (then
        (return (i32.const 0))))

   (local.set $addr1 (call $get-string-addr (local.get $s1)))
   (local.set $addr2 (call $get-string-addr (local.get $s2)))

   (loop $again
     (if (i32.ge_u (local.get $count) (i32.const 8))
         (then
          (if (i64.ne (i64.load (local.get $addr1))
                      (i64.load (local.get $addr2)))
              (then
               (return (i32.const 0))))
          (%decr-n i32 $count 8)
          (%incr-n i32 $addr1 8)
          (%incr-n i32 $addr2 8)
          (br $again))))

   (if (i32.ge_u (local.get $count) (i32.const 4))
       (then
        (if (i32.ne (i32.load (local.get $addr1))
                    (i32.load (local.get $addr2)))
            (then
             (return (i32.const 0))))
        (%decr-n i32 $count 4)
        (%incr-n i32 $addr1 4)
        (%incr-n i32 $addr2 4)))

   (if (i32.ge_u (local.get $count) (i32.const 2))
       (then
        (if (i32.ne (i32.load16_u (local.get $addr1))
                    (i32.load16_u (local.get $addr2)))
            (then
             (return (i32.const 0))))
        (%decr-n i32 $count 2)
        (%incr-n i32 $addr1 2)
        (%incr-n i32 $addr2 2)))

   (if (i32.eq (local.get $count) (i32.const 1))
       (then
        (if (i32.ne (i32.load8_u (local.get $addr1))
                    (i32.load8_u (local.get $addr2)))
            (then
             (return (i32.const 0))))))

   (i32.const 1)))
