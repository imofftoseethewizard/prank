;; number encoding
;;
;;   numbers block
;;     a block in which to store discrete i64s and f64s
;;     alloc number blocks as needed, of size immobile block size.
;;     never deallocated, tracked in a list for debugging
;;
;;   track used/unused
;;     use linked-list impl similar to pairs, alloc and dealloc will be very
;;     similar value of a free # is the address of the next free number in the
;;     list has value -1
;;
;;   number box types
;;                                               STTT
;;     i64              xxxx xxxx xxxx xxxx xxxx 0000 0000 0001
;;     f64              xxxx xxxx xxxx xxxx xxxx 0001 0000 0001
;;     rational         xxxx xxxx xxxx xxxx xxxx 0010 0000 0001
;;     complex          xxxx xxxx xxxx xxxx xxxx 0011 0000 0001
;;     integer          rrrr rrrr rrrr rrrr rrrr ?100 0000 0001
;;
;;     S = sign bit, only used by integers, 1 => negative, 0 => positive
;;
;;     TTT = type code
;;
;;     i64
;;       the box value is an address of an x64 block
;;
;;     f64
;;       the box value is an address of an x64 block
;;
;;     rational
;;       pair stored in box value, car is num, cdr is denom; num and denomm must
;;       be exact and must not be complex or rational
;;
;;     complex
;;       pair stored in box value, car is re, cdr is im; re and im
;;       must not be complex
;;
;;     integer
;;       box value is a block ref containing up to 2^16 64-bit digits
;;
;; exhaustive list of number encodings
;;
;;   f64
;;   tagged 29-bit
;;   i64
;;   integer
;;   rational 29-bit  29-bit
;;   rational 29-bit  i64
;;   rational 29-bit  integer
;;   rational i64     29-bit
;;   rational i64     i64
;;   rational i64     integer
;;   rational integer 29-bit
;;   rational integer i64
;;   rational integer integer
;;   complex ... 169 binary combinations of { 29-bit i64 integer } + rationals
;;
;;   => 182 different possible encoding structures for a number
;;

(module

 (import "block-mgr" "alloc-block"    (func $alloc-block    (param i32 i32)     (result i32)))
 (import "block-mgr" "dealloc-block"  (func $dealloc-block  (param i32 i32)))
 (import "block-mgr" "get-block-addr" (func $get-block-addr (param i32)         (result i32)))
 (import "block-mgr" "get-block-size" (func $get-block-size (param i32)         (result i32)))
 (import "block-mgr" "init-blockset"  (func $init-blockset  (param i32 i32)))
 (import "block-mgr" "resize-block"   (func $resize-block   (param i32 i32 i32) (result i32)))
 (import "pairs" "make-pair"          (func $make-pair      (param i32 i32)     (result i32)))
 (import "pairs" "dealloc-pair"       (func $dealloc-pair   (param i32)))
 (import "pairs" "get-pair-car"       (func $get-pair-car   (param i32)         (result i32)))
 (import "pairs" "get-pair-cdr"       (func $get-pair-cdr   (param i32)         (result i32)))
 (import "pairs" "set-pair-car"       (func $set-pair-car   (param i32 i32)))
 (import "pairs" "set-pair-cdr"       (func $set-pair-cdr   (param i32 i32)))

 (include "./block-mgr-memory-proxy-imports.wam")

 (include "./constants.wam")
 (include "./globals.wam")
 (include "./values.wam")
 (include "./boxes.wam")
 (include "./block-mgr-memory-proxies.wam")

 (memory $memory (debug (export "memory")) 1)

 (debug
  (global $debug (export "#debug") (mut i32) (i32.const 0))
  (global $d1 (export "d1") (mut i64) (i64.const 0))
  (global $d2 (export "d2") (mut i64) (i64.const 0))
  (global $d3 (export "d3") (mut i64) (i64.const 0))
  (global $p1 (export "p1") (mut i32) (i32.const 0))
  (global $p2 (export "p2") (mut i32) (i32.const 0))
  (global $p3 (export "p3") (mut i32) (i32.const 0))
  (global $p4 (export "p4") (mut i32) (i32.const 0))
  (global $p5 (export "p5") (mut i32) (i32.const 0)))

 ;;     i64              xxxx xxxx xxxx xxxx xxxx 0000 0000 0001
 ;;     f64              xxxx xxxx xxxx xxxx xxxx 0001 0000 0001
 ;;     rational         xxxx xxxx xxxx xxxx xxxx 0010 0000 0001
 ;;     complex          xxxx xxxx xxxx xxxx xxxx 0011 0000 0001
 ;;     integer          rrrr rrrr rrrr rrrr rrrr ?100 0000 0001

 (define _number-block-size    (i32.const 0x400))

 (define _number-type-i64      (i32.const 0x00000001))
 (define _number-type-f64      (i32.const 0x00000101))
 (define _number-type-rational (i32.const 0x00000201))
 (define _number-type-complex  (i32.const 0x00000301))
 (define _number-type-integer  (i32.const 0x00000401))
 (define _number-type-mask     (i32.const 0x000007ff))

 (define _integer-sign-flag      (i32.const 0x00000800))
 (define _integer-sign-flag-mask (i32.const 0xfffff7ff))

 (debug
  (global $number-block-size    (export "number-block-size")    i32 _number-block-size)

  (global $number-type-i64      (export "number-type-i64")      i32 _number-type-i64)
  (global $number-type-f64      (export "number-type-f64")      i32 _number-type-f64)
  (global $number-type-complex  (export "number-type-complex")  i32 _number-type-complex)
  (global $number-type-rational (export "number-type-rational") i32 _number-type-rational)
  (global $number-type-integer  (export "number-type-integer")  i32 _number-type-integer)
  (global $number-type-mask     (export "number-type-mask")     i32 _number-type-mask))

 (const #i32-size 4)
 (const #i64-size 8)

 (const #i32-size-bits 2)
 (const #i64-size-bits 3)

 (global $x64-free-list (debug (export "x64-free-list")) (mut i32) (i32.const 0))
 (debug
  (global $x64-block-list (debug (export "x64-block-list")) (mut i32) (i32.const 0))
  (global $x64-count (debug (export "x64-count")) (mut i32) (i32.const 0)))

 (macro %get-next-free-x64
   (expr ,x64)
   (i32.load ,x64))

 (debug
  (func $get-next-free-x64 (export "get-next-free-x64")
    (param $x64 i32)
    (result i32)
    (%get-next-free-x64 $x64)))

 (global $integer-1e16  (debug (export "integer-1e16"))  (mut i32) (i32.const 0))
 (global $integer-1e32  (debug (export "integer-1e32"))  (mut i32) (i32.const 0))
 (global $integer-1e64  (debug (export "integer-1e64"))  (mut i32) (i32.const 0))
 (global $integer-1e128 (debug (export "integer-1e128")) (mut i32) (i32.const 0))
 (global $integer-1e256 (debug (export "integer-1e256")) (mut i32) (i32.const 0))

 (define _small-integer-0 (i32.const 0))
 (define _small-integer-1 (i32.const 8))

 (define _i32-1e4  (i32.const 10000))
 (define _i32-1e8  (i32.const 100000000))
 (define _i64-1e16 (i64.const 10000000000000000))

 (define _integer-1e16  (global.get $integer-1e16))
 (define _integer-1e32  (global.get $integer-1e32))
 (define _integer-1e64  (global.get $integer-1e64))
 (define _integer-1e128 (global.get $integer-1e128))
 (define _integer-1e256 (global.get $integer-1e256))

 ;; 651 12 byte entries (10**n for n in [-342...308] inclusive)
 (define _powers-of-10-count (i32.const 651))
 (define _powers-of-10-block-size (i32.const 7816))
 (global $powers-of-10-exp-addr (debug (export "powers-of-10-exp-addr") (mut i32) (i32.const 0)))
 (global $powers-of-10-sig-addr (debug (export "powers-of-10-sig-addr") (mut i32) (i32.const 0)))

 (start $init-numbers)
 (func $init-numbers (debug (export "init-numbers"))

   ($init-blockset _numbers-blockset _number-block-size)

   ($init-blockset-memory-proxies _numbers-blockset)

   ($init-powers-of-10)

   (global.set $x64-free-list _null)
   (debug
    (global.set $x64-block-list _null)
    (global.set $x64-count (i32.const 0)))

   (global.set $integer-1e16  ($make-integer _i64-1e16 (i32.const 1)))
   (global.set $integer-1e32  ($square-integer (global.get $integer-1e16)))
   (global.set $integer-1e64  ($square-integer (global.get $integer-1e32)))
   (global.set $integer-1e128 ($square-integer (global.get $integer-1e64)))
   (global.set $integer-1e256 ($square-integer (global.get $integer-1e128))))


 (macro %make-integer-number-type
   (expr ,digits)
   (i32.or _number-type-integer
           (i32.shl ,digits (i32.const 12))))

 (macro %get-integer-sign-flag
   (expr ,int)
   (i32.and (%get-box-type ,int) _integer-sign-flag))

 (macro %set-integer-sign-flag
   (label $int)
   (expr ,v)
   (%set-box-type $int (i32.or (i32.and (%get-box-type $int) _integer-sign-flag-mask)
                               ,v)))

 (macro %clear-integer-sign-flag
   (label $int)
   (%set-integer-sign-flag $int (i32.const 0)))

 (macro %is-negative-integer
   (expr ,int)
   (i32.eq (%get-integer-sign-flag ,int) _integer-sign-flag))

 (macro %set-negative-integer
   (label $int)
   (%set-integer-sign-flag $int _integer-sign-flag))

 (macro %get-number-type
   (expr ,x)
   (i32.and _number-type-mask (%get-box-type ,x)))

 (macro %get-integer-addr
   (expr ,int)
   ($get-block-addr (%get-box-value ,int)))

 (macro %get-integer-digit-addr
   (expr ,int)
   (expr ,n)
   (i32.add (%get-integer-addr ,int) (i32.shl ,n (i32.const 3))))

 (macro %get-integer-size
   (expr ,int)
   (i32.shr_u (i32.and (%get-box-type ,int)
                       (i32.xor _number-type-mask (i32.const -1)))
              (i32.const 12)))

 (macro %get-integer-byte-size
   (expr ,int)
   (i32.shl (%get-integer-size ,int) (i32.const 3)))

 (macro %get-i64-digit-addr
   (expr ,int)
   (expr ,idx)
   (i32.add (%get-integer-addr ,int) (i32.shl ,idx (i32.const #i64-size-bits))))

 (macro %get-i32-digit-addr
   (expr ,int)
   (expr ,idx)
   (i32.add (%get-integer-addr ,int) (i32.shl ,idx (i32.const #i32-size-bits))))

 (macro %make-small-integer
   (expr ,v)
   (%make-value _tag-small-integer ,v))

 (macro %negate-small-integer
   (expr ,x)
   (i32.sub (i32.const 0) ,x))

 (macro %get-small-integer-value
   (expr ,x)
   (i32.shr_s (%get-value-data ,x) _tag-size-bits))

 (define _i64-small-integer-mask         (i64.const 0xffffffffe0000000))
 (define _i64-small-integer-overflow-bit (i64.const 0x0000000020000000))

 (macro %is-small-value-i64
   (expr ,v)
   (i64.le_u (i64.add (i64.and ,v _i64-small-integer-mask)
                      _i64-small-integer-overflow-bit)
             _i64-small-integer-overflow-bit))

 ;;-----------------------------------------------------------------------------
 ;;
 ;; Allocation
 ;;

 (func $alloc-integer (export "alloc-integer")
   (param $i64-digits i32)
   (result i32)

   (local $addr i32)
   (local $block i32)
   (local $size i32)

   (if (i32.eqz $i64-digits) (then (unreachable)))

   (set! $size (i32.shl $i64-digits (i32.const #i64-size-bits)))

   (set! $block ($alloc-block _numbers-blockset $size))

   (set! $addr ($get-block-addr $block))

   (memory.fill $addr (i32.const 0) $size)

   (%make-box (%make-integer-number-type $i64-digits) $block))

 (func $resize-integer (export "resize-integer")
   (param $x i32)
   (param $i64-digits i32)

   (local $new-size i32)
   (local $old-size i32)
   (local $sign-flag i32)

   (set! $old-size (%get-integer-byte-size $x))
   (set! $new-size (i32.shl $i64-digits (i32.const #i64-size-bits)))
   (set! $sign-flag (%get-integer-sign-flag $x))

   (%set-box-type $x (%make-integer-number-type $i64-digits))
   (%set-box-value $x ($resize-block _numbers-blockset (%get-box-value $x) $new-size))
   (%set-integer-sign-flag $x $sign-flag)

   (if (i32.gt_u $new-size $old-size)
       (then
        (memory.fill (i32.add (%get-integer-addr $x) $old-size)
                     (i32.const 0)
                     (i32.sub $new-size $old-size)))))

 (func $alloc-x64 (debug (export "alloc-x64"))
   (result i32)

   (if (i32.eq (global.get $x64-free-list) _null)
       (then
        ($alloc-x64-block)))

   (debug
    (%global.incr i32 $x64-count))

   (global.get $x64-free-list)
   (global.set $x64-free-list (%get-next-free-x64 (global.get $x64-free-list))))

 (func $alloc-x64-block (debug (export "alloc-x64-block"))

   (local $addr i32)
   (local $block i32)
   (local $end-addr i32)
   (local $last-addr i32)
   (local $next-x64 i32)
   (local $x64 i32)

   (set! $block ($alloc-block _numbers-blockset _number-block-size))

   (debug
    (global.set $x64-block-list ($make-pair $block (global.get $x64-block-list))))

   (set! $addr ($get-block-addr $block))
   (set! $end-addr (i32.add $addr _number-block-size))

   (set! $last-addr (global.get $x64-free-list))
   (loop $again
     (if (i32.lt_u $addr $end-addr)
         (then
          (i32.store $addr $last-addr)
          (set! $last-addr $addr)
          (%incr-n i32 $addr #i64-size)
          (br $again))))

   (global.set $x64-free-list $last-addr))

 ;;-----------------------------------------------------------------------------
 ;;
 ;; Deallocation
 ;;

 (func $dealloc-number (export "dealloc-number")
   (param $x i32)

   (local $type i32)
   (local $value i32)

   (if (i32.eq (%get-value-tag $x) _tag-small-integer)
       (then
        (return)))

   (set! $type (%get-number-type $x))
   (set! $value (%get-box-value $x))

   (if (i32.or (i32.eq $type _number-type-f64)
               (i32.eq $type _number-type-i64))
       (then
        ($dealloc-x64 $value)
        (%dealloc-box $x)
        (return)))

   (if (i32.or (i32.eq $type _number-type-complex)
               (i32.eq $type _number-type-rational))
       (then
        ($dealloc-number ($get-pair-car $value))
        ($dealloc-number ($get-pair-cdr $value))
        ($dealloc-pair (%get-value-data $value))
        (%dealloc-box $x)
        (return)))

   (if (i32.eq $type _number-type-integer)
       (then
        ($dealloc-block _numbers-blockset $value)
        (%dealloc-box $x)
        (return)))

   ($invalid-number-type))

 (func $dealloc-x64 (debug (export "dealloc-x64"))
   (param $x64 i32)

   (if (i32.and (i32.const 0x7) $x64)
       (then
        (unreachable)))

   (i32.store $x64 (global.get $x64-free-list))

   (debug
    (%global.decr i32 $x64-count))

   (global.set $x64-free-list $x64))


 ;;-----------------------------------------------------------------------------
 ;;
 ;; Number Constructors
 ;;

 (func $make-small-integer (export "make-small-integer")
   (param $x i32)
   (result i32)
   (%make-small-integer $x))

 (func $make-boxed-i64 (export "make-boxed-i64")
   (param $x i64)
   (result i32)

   (local $x64 i32)
   (set! $x64 ($alloc-x64))
   (i64.store $x64 $x)

   (%make-box _number-type-i64 $x64))

 (macro %assert
   (expr ,v)
   (debug (if (i32.eqz ,v) (then unreachable))))

 (func $make-boxed-f64 (export "make-boxed-f64")
   (param $x f64)
   (result i32)

   (local $v i32)
   (local $x64 i32)
   (set! $x64 ($alloc-x64))
   (f64.store $x64 $x)

   (set! $v (%make-box _number-type-f64 $x64))
   (%assert ($is-inexact $v))
   $v)

 (func $make-rational (export "make-rational")
   (param $n i32)
   (param $d i32)
   (result i32)

   (%make-box _number-type-rational ($make-pair $n $d)))

 (func $make-complex (export "make-complex")
   (param $re i32)
   (param $im i32)
   (result i32)

   (%make-box _number-type-complex ($make-pair $re $im)))

 (func $make-integer (export "make-integer")
   (param $x i64)
   (param $size i32)
   (result i32)

   (local $int i32)
   (set! $int ($alloc-integer $size))

   (if (i64.lt_s $x (i64.const 0))
       (then
        (%set-negative-integer $int)
        (i64.store (%get-integer-addr $int) (i64.sub (i64.const 0) $x)))
     (else
      (i64.store (%get-integer-addr $int) $x)))

   $int)

 (func $make-integer-i64 (debug (export "make-integer-i64"))
   (param $x i64)
   (result i32)
   ($make-integer $x (i32.const 1)))

 ;;-----------------------------------------------------------------------------
 ;;
 ;; Parsing and display support for integers
 ;;

 (func $multiply-add-integer-i32 (export "multiply-add-integer-i32")
   (param $int i32)
   (param $n i32)
   (param $k i32)

   (local $addr i32)
   (local $c i64)
   (local $end-addr i32)
   (local $m i64)
   (local $v i64)

   (set! $m (i64.extend_i32_u $n))
   (set! $c (i64.extend_i32_u $k))

   (set! $addr (%get-integer-addr $int))
   (set! $end-addr (i32.add $addr (%get-integer-byte-size $int)))

   (loop $again
     (if (i32.lt_u $addr $end-addr)
         (then
          (set! $v (i64.add (i64.mul (i64.load32_u $addr) $m) $c))
          (i32.store $addr (i32.wrap_i64 $v))
          (set! $c (i64.shr_u $v (i64.const 32)))
          (%incr-n i32 $addr #i32-size)
          (br $again))))

   (debug (if (i64.ne $c (i64.const 0)) (then (unreachable)))))


 (func $multiply-integer-i32 (export "multiply-integer-i32")
   (param $int i32)
   (param $n i32)

   ($multiply-add-integer-i32 $int $n (i32.const 0)))

 ;;-----------------------------------------------------------------------------
 ;;
 ;; Basic Arithmetic
 ;;

 (macro %binop
   (label $name)
   (expr ,export)
   (expr ,i64-binop)
   (label $int-binop)

   (func $name ,export
     (param $a i32)
     (param $b i32)
     (result i32)

     (local $a-int i32)
     (local $a-is-small i32)
     (local $a-type i32)
     (local $a-value i32)
     (local $b-int i32)
     (local $b-is-small i32)
     (local $b-type i32)
     (local $b-value i32)
     (local $i64-result i64)

     (if (i32.eq (%get-value-tag $a) _tag-small-integer)
         (then
          (set! $a-is-small (i32.const 1)))
       (else
        (set! $a-type (%get-number-type $a))
        (set! $a-value (%get-box-value $a))))

     (if (i32.eq (%get-value-tag $b) _tag-small-integer)
         (then
          (set! $b-is-small (i32.const 1)))
       (else
        (set! $b-type (%get-number-type $b))
        (set! $b-value (%get-box-value $b))))

     (if (i32.and $a-is-small $b-is-small)
         (then
          (return
           (set! $i64-result (,i64-binop (i64.extend_i32_s (%get-small-integer-value $a))
                                         (i64.extend_i32_s (%get-small-integer-value $b))))

           (if (%is-small-value-i64 $i64-result)
               (then
                (return (%make-small-integer (i32.wrap_i64 $i64-result)))))

           (return ($make-boxed-i64 $i64-result)))))

     (set! $a-int (if (result i32) $a-is-small
                    (then
                     ($make-integer-i64 (i64.extend_i32_s (%get-small-integer-value $a))))
                    (else
                     (if (result i32) (i32.eq $a-type _number-type-i64)
                       (then
                        ($make-integer-i64 (i64.load $a-value)))
                       (else
                        $a)))))

     (set! $b-int (if (result i32) $b-is-small
                    (then
                     ($make-integer-i64 (i64.extend_i32_s (%get-small-integer-value $b))))
                    (else
                     (if (result i32) (i32.eq $b-type _number-type-i64)
                       (then
                        ($make-integer-i64 (i64.load $b-value)))
                       (else
                        $b)))))

     ($int-binop $a-int $b-int)))

 (macro %binop-2
   (label $name)
   (expr ,export)
   (label $i64-binop)
   (label $int-binop)

   (func $name ,export
     (param $a i32)
     (param $b i32)
     (result i32 i32)

     (local $a-int i32)
     (local $a-is-small i32)
     (local $a-type i32)
     (local $a-value i32)
     (local $b-int i32)
     (local $b-is-small i32)
     (local $b-type i32)
     (local $b-value i32)
     (local $v1 i64)
     (local $v2 i64)

     (if (i32.eq (%get-value-tag $a) _tag-small-integer)
         (then
          (set! $a-is-small (i32.const 1)))
       (else
        (set! $a-type (%get-number-type $a))
        (set! $a-value (%get-box-value $a))))

     (if (i32.eq (%get-value-tag $b) _tag-small-integer)
         (then
          (set! $b-is-small (i32.const 1)))
       (else
        (set! $b-type (%get-number-type $b))
        (set! $b-value (%get-box-value $b))))

     (if (i32.and $a-is-small $b-is-small)
         (then
          (return
           (set! $v2
                 (set! $v1 ($i64-binop (i64.extend_i32_s (%get-small-integer-value $a))
                                       (i64.extend_i32_s (%get-small-integer-value $b)))))
           ($make-boxed-i64 $v2)
           ($make-boxed-i64 $v1))))

     (set! $a-int (if (result i32) $a-is-small
                    (then
                     ($make-integer-i64 (i64.extend_i32_s (%get-small-integer-value $a))))
                    (else
                     (if (result i32) (i32.eq $a-type _number-type-i64)
                       (then
                        ($make-integer-i64 (i64.load $a-value)))
                       (else
                        $a)))))

     (set! $b-int (if (result i32) $b-is-small
                    (then
                     ($make-integer-i64 (i64.extend_i32_s (%get-small-integer-value $b))))
                    (else
                     (if (result i32) (i32.eq $b-type _number-type-i64)
                       (then
                        ($make-integer-i64 (i64.load $b-value)))
                       (else
                        $b)))))

     ($int-binop $a-int $b-int)))

 (macro %compare-op
   (label $name)
   (expr ,export)
   (expr ,i64-compare-op)
   (label $int-compare-op)

   (func $name ,export
     (param $a i32)
     (param $b i32)
     (result i32)

     (local $a-int i32)
     (local $a-is-small i32)
     (local $a-type i32)
     (local $a-value i32)
     (local $b-int i32)
     (local $b-is-small i32)
     (local $b-type i32)
     (local $b-value i32)

     (if (i32.eq (%get-value-tag $a) _tag-small-integer)
         (then
          (set! $a-is-small (i32.const 1)))
       (else
        (set! $a-type (%get-number-type $a))
        (set! $a-value (%get-box-value $a))))

     (if (i32.eq (%get-value-tag $b) _tag-small-integer)
         (then
          (set! $b-is-small (i32.const 1)))
       (else
        (set! $b-type (%get-number-type $b))
        (set! $b-value (%get-box-value $b))))

     (if $a-is-small
         (then
          (if $b-is-small
              (then
               (return (,i64-compare-op (i64.extend_i32_s (%get-small-integer-value $a))
                                        (i64.extend_i32_s (%get-small-integer-value $b)))))
            (else
             (if (i32.eq $b-type _number-type-i64)
                 (then
                  (return (,i64-compare-op (i64.extend_i32_s (%get-small-integer-value $a))
                                           (i64.load $b-value))))
               (else
                (set! $a-int ($make-integer-i64
                              (i64.extend_i32_s (%get-small-integer-value $a))))
                (set! $b-int $b))))))
       (else
        (if (i32.eq $a-type _number-type-i64)
            (then
             (if $b-is-small
                 (then
                  (return (,i64-compare-op (i64.load $a-value)
                                           (i64.extend_i32_s (%get-small-integer-value $b)))))
               (else
                (if (i32.eq $b-type _number-type-i64)
                    (then
                     (return
                      (,i64-compare-op (i64.load $a-value) (i64.load $b-value))))
                  (else
                   (set! $a-int ($make-integer-i64 (i64.load $a-value)))
                   (set! $b-int $b))))))
          (else
           (set! $a-int $a)
           (if $b-is-small
               (then
                (set! $b-int ($make-integer-i64 (i64.extend_i32_s
                                                 (%get-small-integer-value $b)))))
             (else
              (if (i32.eq $b-type _number-type-i64)
                  (then
                   (set! $b-int ($make-integer-i64 (i64.load $b-value)))))))))))

     ($int-compare-op $a-int $b-int)

     (if (i32.ne $a $a-int)
         (then
          ($dealloc-number $a-int)))

     (if (i32.ne $b $b-int)
         (then
          ($dealloc-number $b-int)))))

 (%binop $add       (debug (export "add"))       i64.add   $integer-addition)
 (%binop $subtract  (debug (export "subtract"))  i64.sub   $integer-subtraction)
 (%binop $multiply  (debug (export "multiply"))  i64.mul   $integer-multiplication)
 (%binop $quotient  (debug (export "quotient"))  i64.div_s $integer-quotient)
 (%binop $remainder (debug (export "remainder")) i64.rem_s $integer-remainder)

 (%compare-op $ge (debug (export "ge")) i64.gt_s $integer-ge)
 (%compare-op $gt (debug (export "gt")) i64.gt_s $integer-gt)

 (%binop-2 $divide (debug (export "divide")) $i64-division $integer-division)

 ;;-----------------------------------------------------------------------------
 ;;
 ;; Basic Integer Arithmetic
 ;;

 (func $integer-addition (debug (export "integer-addition"))
   (param $a i32)
   (param $b i32)
   (result i32)

   (local $a-sign-flag i32)
   (local $b-sign-flag i32)
   (local $result i32)

   (set! $a-sign-flag (%get-integer-sign-flag $a))
   (set! $b-sign-flag (%get-integer-sign-flag $b))

   (if (i32.xor $a-sign-flag $b-sign-flag)
       (then
        (if (i32.ge_s ($compare-integer-digits $a $b) (i32.const 0))
            (then
             (set! $result ($subtract-integer-digits $a $b))
             (%set-integer-sign-flag $result $a-sign-flag))
          (else
           (set! $result ($subtract-integer-digits $b $a))
           (%set-integer-sign-flag $result $b-sign-flag))))
     (else
      (set! $result ($add-integer-digits $a $b))
      (%set-integer-sign-flag $result $a-sign-flag)))

   $result)

 (func $integer-addition/dealloc-2 (debug (export "integer-addition/dealloc-2"))
   (param $a i32)
   (param $b i32)
   (result i32)

   ($integer-addition $a $b)
   ($dealloc-number $a)
   ($dealloc-number $b))

 (func $integer-subtraction (debug (export "integer-subtraction"))
   (param $a i32)
   (param $b i32)
   (result i32)

   (local $a-sign-flag i32)
   (local $b-sign-flag i32)
   (local $result i32)

   (set! $a-sign-flag (%get-integer-sign-flag $a))
   (set! $b-sign-flag (%get-integer-sign-flag $b))

   (if (i32.xor $a-sign-flag $b-sign-flag)
       (then
        (set! $result ($add-integer-digits $a $b))
        (%set-integer-sign-flag $result $a-sign-flag))
     (else
      (if (i32.ge_s ($compare-integer-digits $a $b) (i32.const 0))
          (then
           (set! $result ($subtract-integer-digits $a $b))
           (%set-integer-sign-flag $result $a-sign-flag))
        (else
         (set! $result ($subtract-integer-digits $b $a))
         (%set-integer-sign-flag $result $b-sign-flag)))))

   $result)

 (func $integer-multiplication (debug (export "integer-multiplication"))
   (param $a i32)
   (param $b i32)
   (result i32)

   (local $result i32)

   (set! $result ($multiply-integer-digits $a $b))

   (%set-integer-sign-flag $result (i32.xor (%get-integer-sign-flag $a)
                                            (%get-integer-sign-flag $b)))

   $result)

 (func $integer-ge (debug (export "integer-ge"))
   (param $a i32)
   (param $b i32)
   (result i32)

   (if (result i32) (%is-negative-integer $a)
     (then
      (if (result i32) (%is-negative-integer $b)
        (then
         (i32.le_s ($compare-integer-digits $a $b) (i32.const 0)))
        (else
         (i32.const 0))))
     (else
      (if (result i32) (%is-negative-integer $b)
        (then
         (i32.const 1))
        (else
         (i32.ge_s ($compare-integer-digits $a $b) (i32.const 0)))))))

 (func $integer-gt (debug (export "integer-gt"))
   (param $a i32)
   (param $b i32)
   (result i32)

   (if (result i32) (%is-negative-integer $a)
     (then
      (if (result i32) (%is-negative-integer $b)
        (then
         (i32.lt_s ($compare-integer-digits $a $b) (i32.const 0)))
        (else
         (i32.const 0))))
     (else
      (if (result i32) (%is-negative-integer $b)
        (then
         (i32.const 1))
        (else
         (i32.gt_s ($compare-integer-digits $a $b) (i32.const 0)))))))

 (func $integer-quotient (debug (export "integer-quotient"))
   (param $a i32)
   (param $b i32)
   (result i32)

   (local $quot i32)
   (local $rem i32)

   (set! $rem
         (set! $quot ($integer-division $a $b)))

   ($dealloc-number $rem)
   $quot)

 (func $integer-remainder (debug (export "integer-remainder"))
   (param $a i32)
   (param $b i32)
   (result i32)

   (local $quot i32)
   (local $rem i32)

   (set! $rem
         (set! $quot ($integer-division $a $b)))

   ($dealloc-number $quot)
   $rem)

 (func $integer-division (debug (export "integer-division"))
   (param $a i32)
   (param $b i32)
   (result i32 i32)

   (local $quot i32)
   (local $rem i32)

   (set! $quot
         (set! $rem ($divide-integer-digits $a $b)))

   (if (%is-negative-integer $a)
       (then
        (%set-negative-integer $rem)
        (if (i32.eqz (%is-negative-integer $b))
            (then
             (%set-negative-integer $quot))))
     (else
      (if (%is-negative-integer $b)
          (then
           (%set-negative-integer $quot)))))

   $quot
   $rem)

 (func $i64-division (debug (export "i64-division"))
   (param $a i64)
   (param $b i64)
   (result i64 i64)

   (i64.div_s $a $b)
   (i64.rem_s $a $b))

 ;;-----------------------------------------------------------------------------
 ;;
 ;; Integer Digit Arithmetic
 ;;

 (func $add-integer-digits (debug (export "add-integer-digits"))
   (param $a i32)
   (param $b i32)
   (result i32)

   (local $a-addr i32)
   (local $a-end i32)
   (local $a-size i32)
   (local $a-value i64)
   (local $b-addr i32)
   (local $b-end i32)
   (local $b-size i32)
   (local $b-value i64)
   (local $carry i64)
   (local $result i32)
   (local $result-addr i32)
   (local $result-end i32)
   (local $result-size i32)
   (local $sum i64)
   (local $value i64)

   (set! $a-size (%get-integer-size $a))
   (set! $b-size (%get-integer-size $b))

   (set! $result-size (i32.add (if (result i32) (i32.ge_u $a-size $b-size)
                                 (then $a)
                                 (else $b))
                               (i32.const 1)))

   (set! $result ($alloc-integer $result-size))

   (set! $a-addr (%get-integer-addr $a))
   (set! $a-end (i32.add $a-addr (i32.shl $a-size (i32.const 3))))

   (set! $b-addr (%get-integer-addr $b))
   (set! $b-end (i32.add $b-addr (i32.shl $b-size (i32.const 3))))

   (set! $result-addr (%get-integer-addr $result))
   (set! $result-end (i32.add $result-addr (i32.shl $result-size (i32.const 3))))

   (set! $carry (i64.const 0))

   (loop $again
     (set! $a-value (if (result i64) (i32.lt_u $a-addr $a-end)
                      (then (i64.load $a-addr))
                      (else (i64.const 0))))

     (set! $b-value (if (result i64) (i32.lt_u $b-addr $b-end)
                      (then (i64.load $b-addr))
                      (else (i64.const 0))))

     (set! $sum (i64.add $a-value $b-value))
     (set! $value (i64.add $sum $carry))

     (set! $carry (if (result i64) (i32.or (i64.lt_u $value $a-value)
                                           (i64.lt_u $sum $a-value))
                    (then (i64.const 1))
                    (else (i64.const 0))))

     (i64.store $result-addr $value)

     (%incr-n i32 $a-addr 8)
     (%incr-n i32 $b-addr 8)
     (%incr-n i32 $result-addr 8)

     (if (i32.lt_u $result-addr $result-end)
         (then
          (br $again))))

   $result)

 (func $subtract-integer-digits/in-place (debug (export "subtract-integer-digits/in-place"))
   (param $a i32)
   (param $b i32)
   (result i32)

   ($subtract-integer-digits/into $a $b $a))

 (func $subtract-integer-digits (debug (export "subtract-integer-digits"))
   (param $a i32)
   (param $b i32)
   (result i32)

   (local $a-size i32)
   (local $b-size i32)
   (local $result-size i32)

   (set! $a-size (%get-integer-size $a))
   (set! $b-size (%get-integer-size $b))

   (set! $result-size (i32.add (if (result i32) (i32.ge_u $a-size $b-size)
                                 (then $a-size)
                                 (else $b-size))
                               (i32.const 1)))

   ($subtract-integer-digits/into $a $b ($alloc-integer $result-size)))

 (func $subtract-integer-digits/into (debug (export "subtract-integer-digits/into"))
   ;; computes d = a - b
   (param $a i32)
   (param $b i32)
   (param $d i32)
   (result i32)

   (local $a-addr i32)
   (local $a-end i32)
   (local $a-size i32)
   (local $a-value i64)
   (local $b-addr i32)
   (local $b-end i32)
   (local $b-size i32)
   (local $b-value i64)
   (local $carry i64)
   (local $d-addr i32)
   (local $d-end i32)
   (local $d-size i32)
   (local $difference i64)
   (local $value i64)

   (set! $a-size (%get-integer-size $a))
   (set! $b-size (%get-integer-size $b))
   (set! $d-size (%get-integer-size $d))

   (set! $a-addr (%get-integer-addr $a))
   (set! $b-addr (%get-integer-addr $b))
   (set! $d-addr (%get-integer-addr $d))

   (set! $a-end (i32.add $a-addr (i32.shl $a-size (i32.const 3))))
   (set! $b-end (i32.add $b-addr (i32.shl $b-size (i32.const 3))))
   (set! $d-end (i32.add $d-addr (i32.shl $d-size (i32.const 3))))

   (set! $carry (i64.const 0))

   (loop $again
     (set! $a-value (if (result i64) (i32.lt_u $a-addr $a-end)
                      (then (i64.load $a-addr))
                      (else (i64.const 0))))

     (set! $b-value (if (result i64) (i32.lt_u $b-addr $b-end)
                      (then (i64.load $b-addr))
                      (else (i64.const 0))))

     (set! $difference (i64.sub $a-value $b-value))
     (set! $value (i64.add $difference $carry))

     (set! $carry (if (result i64) (i32.or (i64.gt_u $difference $a-value)
                                           (i64.gt_u $value $a-value))
                    (then (i64.const -1))
                    (else (i64.const 0))))

     (i64.store $d-addr $value)

     (%incr-n i32 $a-addr 8)
     (%incr-n i32 $b-addr 8)
     (%incr-n i32 $d-addr 8)

     (if (i32.lt_u $d-addr $d-end)
         (then
          (br $again))))

   $d)

 (func $multiply-integer-digits/dealloc (export "multiply-integer-digits/dealloc")
   (param $x i32)
   (param $y i32)
   (result i32)

   (local $z i32)

   (set! $z ($multiply-integer-digits $x $y))

   ($dealloc-number $x)
   ($dealloc-number $y)

   $z)

 (func $multiply-integer-digits/dealloc-1 (export "multiply-integer-digits/dealloc-1")
   (param $x i32)
   (param $y i32)
   (result i32)

   (local $z i32)

   (set! $z ($multiply-integer-digits $x $y))

   ($dealloc-number $x)

   $z)

 (func $square-integer/dealloc (export "square-integer/dealloc")
   (param $x i32)
   (result i32)

   ($multiply-integer-digits/dealloc-1 $x $x))

 (func $square-integer (export "square-integer")
   (param $x i32)
   (result i32)

   ($multiply-integer-digits $x $x))

 (func $multiply-integer-digits (export "multiply-integer-digits")
   (param $x i32)
   (param $y i32)
   (result i32)

   (local $c i64)
   (local $x-addr i32)
   (local $x-end i32)
   (local $x-i i64)
   (local $y-addr i32)
   (local $y-base-addr i32)
   (local $y-end i32)
   (local $z i32)
   (local $z-addr i32)
   (local $z-base-addr i32)
   (local $z-end i32)
   (local $z-j i64)

   (set! $z ($alloc-integer ($calc-product-integer-size $x $y)))

   (set! $x-addr      (%get-integer-addr $x))
   (set! $y-base-addr (%get-integer-addr $y))
   (set! $z-base-addr (%get-integer-addr $z))

   (set! $x-end (i32.add $x-addr      (%get-integer-byte-size $x)))
   (set! $y-end (i32.add $y-base-addr (%get-integer-byte-size $y)))
   (set! $z-end (i32.add $z-base-addr (%get-integer-byte-size $z)))

   (loop $x-digits
     (if (i32.lt_u $x-addr $x-end)
         (then
          (set! $x-i (i64.load32_u $x-addr))
          (set! $c (i64.const 0))

          (set! $y-addr $y-base-addr)
          (set! $z-addr $z-base-addr)

          (loop $y-digits
            (if (i32.and (i32.lt_u $y-addr $y-end)
                         (i32.lt_u $z-addr $z-end))
                (then
                 (set! $z-j (i64.add (i64.add (i64.load32_u $z-addr)
                                              (i64.mul $x-i (i64.load32_u $y-addr)))
                                     $c))

                 (i32.store $z-addr (i32.wrap_i64 $z-j))
                 (set! $c (i64.shr_u $z-j (i64.const 32)))

                 (%incr-n i32 $y-addr 4)
                 (%incr-n i32 $z-addr 4)
                 (br $y-digits))))

          (if (i32.wrap_i64 $c)
              (then
               (if (i32.lt_u $z-addr $z-end)
                   (then
                    (i32.store $z-addr (i32.wrap_i64 $c)))
                 (else
                  (unreachable)))))

          (%incr-n i32 $x-addr 4)
          (%incr-n i32 $z-base-addr 4)
          (br $x-digits))))

   (%set-integer-sign-flag $x (i32.xor (%get-integer-sign-flag $x)
                                       (%get-integer-sign-flag $y)))

   $z)

 (func $calc-product-integer-size (debug (export "calc-product-integer-size"))
   (param $a i32)
   (param $b i32)
   (result i32)

   (i32.shr_u (i32.add (i32.add ($get-integer-bit-size $a) ($get-integer-bit-size $b))
                       (i32.const 0x3f))
              (i32.const 6)))

 (func $get-integer-bit-size (debug (export "get-integer-bit-size"))
   (param $x i32)
   (result i32)

   (local $digit i64)
   (local $offset i32)

   (set! $digit
         (set! $offset ($find-integer-leading-digit $x)))

   (i32.add (i32.sub (i32.const 64) (i32.wrap_i64 (i64.clz $digit)))
            (i32.shl $offset (i32.const 3))))

 (func $get-integer-digit-size (debug (export "get-integer-digit-size"))
   (param $x i32)
   (result i32)

   (local $digit i64)
   (local $offset i32)

   (set! $digit
         (set! $offset ($find-integer-leading-digit $x)))

   (i32.add (i32.shr_u $offset (i32.const 3)) (i32.const 1)))

 (func $find-integer-leading-digit (debug (export "find-integer-leading-digit"))
   (param $x i32)
   (result i64 i32)

   (local $addr i32)
   (local $base-addr i32)
   (local $digit i64)

   (set! $base-addr (%get-integer-addr $x))
   (set! $addr (i32.add $base-addr (%get-integer-byte-size $x)))

   (loop $again
     (if (i32.gt_u $addr $base-addr)
         (then
          (%decr-n i32 $addr 8)
          (set! $digit (i64.load $addr))
          (if (i64.eqz $digit)
              (then
               (br $again))))))

   $digit
   (i32.sub $addr $base-addr))

 (func $quotient/dealloc-1 (debug (export "quotient/dealloc-1"))
   (param $a i32)
   (param $b i32)
   (result i32)

   ($quotient $a $b)
   ($dealloc-number $a))

 ;; (func $modulo/dealloc-1 (debug (export "modulo/dealloc-1"))
 ;;   (param $a i32)
 ;;   (param $b i32)
 ;;   (result i32)

 ;;   ($modulo $a $b)
 ;;   ($dealloc-number $a))

 (func $integer-remainder/dealloc-1 (debug (export "integer-remainder/dealloc-1"))
   (param $a i32)
   (param $b i32)
   (result i32)

   ($integer-remainder $a $b)
   ($dealloc-number $a))

 (func $divide-integer-digits (debug (export "divide-integer-digits"))
   (param $a i32)
   (param $b i32)
   (result i32 i32)

   (local $bit-place i32)
   (local $div i32)
   (local $div-bits i32)
   (local $quot i32)
   (local $quot-size i32)
   (local $rem i32)
   (local $rem-bits i32)
   (local $shift-bits i32)

   (set! $div ($copy-integer $b))
   (set! $rem ($copy-integer $a))

   (%clear-integer-sign-flag $div)
   (%clear-integer-sign-flag $rem)

   ;; This calculation depends on $copy-integer omitting leading
   ;; zero digits in the copy.
   (set! $quot-size (i32.add (i32.sub (%get-integer-size $rem)
                                      (%get-integer-size $div))
                             (i32.const 1)))

   (if (i32.le_s $quot-size (i32.const 0))
       (then
        ;; div size > rem size ==> div > rem ==> quot = 0
        (set! $quot ($alloc-integer (i32.const 1))))

     (else
      (set! $quot ($alloc-integer $quot-size))

      (set! $rem-bits ($get-integer-bit-size $rem))
      (set! $div-bits $rem-bits)

      (set! $bit-place (i32.sub $rem-bits ($get-integer-bit-size $div)))

      ($shift-integer $div $bit-place)

      (loop $again
        (if (i32.ge_s $bit-place (i32.const 0))
            (then
             (if ($lt-integer $rem $div)
                 (then
                  (%decr i32 $bit-place)

                  ($shift-integer $div (i32.const -1))
                  (br $again)))

             (set! $rem ($subtract-integer-digits/in-place $rem $div))
             ($set-integer-bit $quot $bit-place)

             (set! $rem-bits ($get-integer-bit-size $rem)) ;; todo: track digit, offset here
             (set! $shift-bits (i32.sub $rem-bits ($get-integer-bit-size $div)))
             ;;(set! $shift-bits (i32.sub $rem-bits $div-bits)) ;; NB: shift-bits is always < 0

             (set! $bit-place (i32.add $bit-place $shift-bits))

             (set! $div-bits $rem-bits)
             ($shift-integer $div $shift-bits)

             (br $again))))))

   ($dealloc-number $div)
   $rem
   $quot)

 (func $shift-integer (debug (export "shift-integer"))
   (param $x i32)
   (param $n i32)

   (if (i32.gt_s $n (i32.const 0))
       (then
        (return ($shift-integer-left $x $n))))

   (if (i32.lt_s $n (i32.const 0))
       (then
        (return ($shift-integer-right $x (i32.sub (i32.const 0) $n))))))

 (func $shift-integer-left (debug (export "shift-integer-left"))
   (param $x i32)
   (param $n i32)

   (local $base-addr i32)
   (local $carry-shift i64)
   (local $dest-addr i32)
   (local $digit i64)
   (local $digit-shift i64)
   (local $new-size i32)
   (local $next-digit i64)
   (local $old-size i32)
   (local $shift-digits i32)
   (local $src-addr i32)

   (set! $old-size (%get-integer-size $x))
   (set! $shift-digits (i32.shr_u (i32.add $n (i32.const 0x3f)) (i32.const 6)))
   (set! $new-size (i32.add $old-size $shift-digits))

   ($resize-integer $x $new-size)

   (set! $digit-shift (i64.extend_i32_u (i32.and $n (i32.const 0x3f))))
   (set! $carry-shift (i64.sub (i64.const 64) $digit-shift))

   (set! $base-addr (%get-integer-addr $x))

   (if (i64.eqz $digit-shift)
       (then
        (set! $dest-addr (i32.add $base-addr (i32.shl $shift-digits (i32.const 3))))
        (memory.copy $dest-addr $base-addr (i32.shl $old-size (i32.const 3))))

     (else
      (set! $dest-addr (i32.sub (i32.add $base-addr (%get-integer-byte-size $x)) (i32.const 8)))

      (set! $src-addr (i32.sub $dest-addr (i32.shl $shift-digits (i32.const 3))))
      (set! $next-digit (i64.load $src-addr))

      (i64.store $dest-addr (i64.shr_u $next-digit $carry-shift))

      (loop $again
        (%decr-n i32 $dest-addr 8)
        (if (i32.gt_u $src-addr $base-addr)
            (then
             (%decr-n i32 $src-addr 8)
             (set! $digit $next-digit)
             (set! $next-digit (i64.load $src-addr))

             (i64.store $dest-addr (i64.or (i64.shl $digit $digit-shift)
                                           (i64.shr_u $next-digit $carry-shift)))
             (br $again))))

      (i64.store $dest-addr (i64.shl $next-digit $digit-shift))))

   (memory.fill $base-addr (i32.const 0) (i32.sub $dest-addr $base-addr)))

 (func $shift-integer-right (debug (export "shift-integer-right"))
   (param $x i32)
   (param $n i32)

   (local $base-addr i32)
   (local $bit-size i32)
   (local $carry-shift i64)
   (local $dest-addr i32)
   (local $digit i64)
   (local $digit-shift i64)
   (local $end-addr i32)
   (local $new-bit-size i32)
   (local $new-byte-size i32)
   (local $new-size i32)
   (local $next-digit i64)
   (local $src-addr i32)

   (set! $bit-size ($get-integer-bit-size $x))
   (set! $new-bit-size (i32.sub $bit-size $n))

   (if (i32.le_s $new-bit-size (i32.const 0))
       (then
        ($resize-integer $x (i32.const 1))
        ($set-integer-i64-digit $x (i32.const 0) (i64.const 0))
        (return)))

   (set! $new-size (i32.shr_u (i32.add $new-bit-size (i32.const 0x3f)) (i32.const 6)))
   (set! $new-byte-size (i32.shl $new-size (i32.const 3)))

   (set! $digit-shift (i64.extend_i32_u (i32.and $n (i32.const 0x3f))))
   (set! $carry-shift (i64.sub (i64.const 64) $digit-shift))

   (set! $base-addr (%get-integer-addr $x))
   (set! $dest-addr $base-addr)
   (set! $end-addr (i32.add $base-addr (%get-integer-byte-size $x)))
   (set! $src-addr (i32.add $base-addr (i32.and (i32.shr_u $n (i32.const 3))
                                                (i32.const 0xfffffff8))))

   (set! $next-digit (i64.load $src-addr))

   (loop $again
     (%incr-n i32 $src-addr 8)
     (if (i32.lt_u $src-addr $end-addr)
         (then
          (set! $digit $next-digit)
          (set! $next-digit (i64.load $src-addr))
          (i64.store $dest-addr (i64.or (i64.shr_u $digit $digit-shift)
                                        (i64.shl $next-digit $carry-shift)))
          (%incr-n i32 $dest-addr 8)
          (br $again))))

   (i64.store $dest-addr (i64.shr_u $next-digit $digit-shift))

   (if (i32.lt_u $new-byte-size (%get-integer-byte-size $x))
       (then
        ($resize-integer $x $new-size))))

 (func $set-integer-bit (debug (export "set-integer-bit"))
   (param $x i32)
   (param $n i32)

   (local $addr i32)

   (set! $addr (%get-integer-digit-addr $x (i32.shr_u $n (i32.const 6))))

   (i64.store $addr (i64.or (i64.load $addr)
                            (i64.shl (i64.const 1)
                                     (i64.extend_i32_u (i32.and $n (i32.const 0x3f)))))))

 (func $get-integer-bit (debug (export "get-integer-bit"))
   (param $x i32)
   (param $n i32)
   (result i64)

   (local $addr i32)

   (set! $addr (%get-integer-digit-addr $x (i32.shr_u $n (i32.const 6))))

   (i64.and (i64.shr_u (i64.load $addr)
                       (i64.extend_i32_u (i32.and $n (i32.const 0x3f))))
            (i64.const 1)))

 (func $is-negative (export "is-negative")
   (param $x i32)
   (result i32)

   (local $type i32)

   (local $value i32)

   (if (i32.eq (%get-value-tag $x) _tag-small-integer)
       (then
        (return (i32.lt_s $x (i32.const 0)))))

   (set! $type (%get-number-type $x))
   (set! $value (%get-box-value $x))

   (if (i32.eq $type _number-type-f64)
       (then
        (return (f64.lt (f64.load $value) (f64.const 0.0)))))

   (if (i32.eq $type _number-type-i64)
       (then
        (return (i64.lt_s (i64.load $value) (i64.const 0)))))

   (if (i32.eq $type _number-type-rational)
       (then
        (return (i32.xor ($is-negative ($get-pair-car $value))
                         ($is-negative ($get-pair-cdr $value))))))

   (if (i32.eq $type _number-type-integer)
       (then
        (return (%is-negative-integer $x))))

   (unreachable))

 (func $pow-10-integer (debug (export "pow-10-integer"))
   (param $n i32)
   (result i32)

   (local $mask i32)
   (local $p i32)
   (local $result i32)

   ;; limit exponent range to unsigned 2^28.
   (if (i32.and $n (i32.const 0xf0000000))
       (then
        (unreachable)))

   (set! $result (if (result i32) (i32.and $n (i32.const 1))
                   (then ($make-integer (i64.const 10) (i32.const 1)))
                   (else ($make-integer (i64.const 1)  (i32.const 1)))))

   (if (i32.and $n (i32.const 2))
       (then
        ($multiply-integer-i32 $result (i32.const 100))))

   (if (i32.and $n (i32.const 4))
       (then
        ($multiply-integer-i32 $result _i32-1e4)))

   (if (i32.and $n (i32.const 8))
       (then
        ($multiply-integer-i32 $result _i32-1e8)))

   (if (i32.and $n (i32.const 0x10))
       (then
        (set! $result ($multiply-integer-digits/dealloc-1 $result _integer-1e16))))

   (if (i32.eqz (i32.and $n (i32.const 0x0fffffe0)))
       (then
        (return $result)))

   (if (i32.and $n (i32.const 0x20))
       (then
        (set! $result ($multiply-integer-digits/dealloc-1 $result _integer-1e32))))

   (if (i32.and $n (i32.const 0x40))
       (then
        (set! $result ($multiply-integer-digits/dealloc-1 $result _integer-1e64))))

   (if (i32.and $n (i32.const 0x80))
       (then
        (set! $result ($multiply-integer-digits/dealloc-1 $result _integer-1e128))))

   (if (i32.and $n (i32.const 0x100))
       (then
        (set! $result ($multiply-integer-digits/dealloc-1 $result _integer-1e256))))

   (set! $n (i32.and $n (i32.const 0x0ffffe00)))

   (if (i32.eqz $n)
       (then
        (return $result)))

   (set! $mask (i32.const 0x200))
   (set! $p _integer-1e256)

   (loop $again
     (if $n
         (then
          (set! $p ($square-integer/dealloc $p))
          (if (i32.and $n $mask)
              (then
               (set! $n (i32.xor $n $mask))
               (set! $result ($multiply-integer-digits/dealloc-1 $result $p))))

          (set! $mask (i32.shl $mask (i32.const 1)))
          (br $again))))

   (if (i32.ne $p _integer-1e256)
       (then
        ($dealloc-number $p)))

   $result)

 (func $pow-10-f64 (debug (export "pow-10-f64"))
   (param $n i32)
   (result f64)

   (local $is-negative i32)
   (local $result f64)

   (set! $is-negative (i32.lt_s $n (i32.const 0)))

   (if $is-negative
       (then (set! $n (i32.sub (i32.const 0) $n))))

   (if (i32.and $n (i32.const 0x0ffffe00))
       (then
        (set! $result (f64.const +inf)))

     (else

      (set! $result (if (result f64) (i32.and $n (i32.const 0x01))
                      (then (f64.const 10.0))
                      (else (f64.const 1.0))))

      ;; unrolled loop
      (if (i32.and $n (i32.const 0x02))
          (then
           (set! $result (f64.mul $result (f64.const 100.0)))))

      (if (i32.and $n (i32.const 0x04))
          (then
           (set! $result (f64.mul $result (f64.const 1.0e4)))))

      (if (i32.and $n (i32.const 0x08))
          (then
           (set! $result (f64.mul $result (f64.const 1.0e8)))))

      (if (i32.and $n (i32.const 0x10))
          (then
           (set! $result (f64.mul $result (f64.const 1.0e16)))))

      (if (i32.and $n (i32.const 0x20))
          (then
           (set! $result (f64.mul $result (f64.const 1.0e32)))))

      (if (i32.and $n (i32.const 0x40))
          (then
           (set! $result (f64.mul $result (f64.const 1.0e64)))))

      (if (i32.and $n (i32.const 0x80))
          (then
           (set! $result (f64.mul $result (f64.const 1.0e128)))))

      (if (i32.and $n (i32.const 0x100))
          (then
           (set! $result (f64.mul $result (f64.const 1.0e256)))))))

   (if $is-negative
       (then
        (set! $result (f64.div (f64.const 1.0) $result))))

   $result)

 (func $negate-number (export "negate-number")
   (param $x i32)
   (result i32)

   (local $type i32)
   (local $value i32)

   (if (i32.eq (%get-value-tag $x) _tag-small-integer)
       (then
        (return (%negate-small-integer $x))))

   (set! $type (%get-number-type $x))
   (set! $value (%get-box-value $x))

   (if (i32.eq $type _number-type-f64)
       (then
        ($negate-f64 $x)
        (return $x)))

   (if (i32.eq $type _number-type-i64)
       (then
        ($negate-i64 $x)
        (return $x)))

   (if (i32.eq $type _number-type-complex)
       (then
        ;; re
        ($set-pair-car $value ($negate-number ($get-pair-car $value)))
        ;; im
        ($set-pair-cdr $value ($negate-number ($get-pair-cdr $value)))
        (return $x)))

   (if (i32.eq $type _number-type-rational)
       (then
        ;; numerator
        ($set-pair-car $value ($negate-number ($get-pair-car $value)))
        (return $x)))

   (if (i32.eq $type _number-type-integer)
       (then
        ($negate-integer $x)
        (return $x)))

   ($invalid-number-type)
   $x)

 (func $invalid-number-type (unreachable))
 (func $not-implemented (unreachable))

 (func $negate-f64 (export "negate-f64")
   (param $x i32)
   (local $addr i32)

   (set! $addr (%get-box-value $x))
   (f64.store $addr (f64.neg (f64.load $addr))))

 (func $negate-i64 (export "negate-i64")
   (param $x i32)
   (local $addr i32)

   (set! $addr (%get-box-value $x))
   (i64.store $addr (i64.sub (i64.const 0) (i64.load $addr))))

 (func $negate-integer (export "negate-integer")
   (param $int i32)
   (%set-box-type $int (i32.xor _integer-sign-flag (%get-box-type $int))))

 (func $negate-integer-digits (debug (export "negate-integer-digits"))
   (param $int i32)

   (local $addr i32)
   (local $c i64)
   (local $end-addr i32)
   (local $v i64)

   (set! $addr (%get-integer-addr $int))
   (set! $end-addr (i32.add $addr (%get-integer-byte-size $int)))

   (set! $c (i64.const 1))

   (loop $again
     (if (i32.lt_u $addr $end-addr)
         (then
          (set! $v (i64.add (i64.xor (i64.load $addr) (i64.const -1))
                            $c))

          (i64.store $addr $v)

          (if (i64.ne $v (i64.const 0))
              (then
               (set! $c (i64.const 0))))

          (%incr-n i32 $addr #i64-size)
          (br $again)))))

 (func $gcd (debug (export "gcd"))
   (param $a i32)
   (param $b i32)
   (result i32)

   (local $a-int i32)
   (local $a-is-small i32)
   (local $a-type i32)
   (local $a-value i32)
   (local $b-int i32)
   (local $b-is-small i32)
   (local $b-type i32)
   (local $b-value i32)

   (if (i32.eq (%get-value-tag $a) _tag-small-integer)
       (then
        (set! $a-is-small (i32.const 1)))
     (else
      (set! $a-type (%get-number-type $a))
      (set! $a-value (%get-box-value $a))))

   (if (i32.eq (%get-value-tag $b) _tag-small-integer)
       (then
        (set! $b-is-small (i32.const 1)))
     (else
      (set! $b-type (%get-number-type $b))
      (set! $b-value (%get-box-value $b))))

   (if (i32.and $a-is-small $b-is-small)
       (then
        (return ($gcd-small-integer $a $b))))

   (if $a-is-small
       (then
        (if (i32.eq $b-type _number-type-i64)
            (then
             (return ($gcd-i64 (i64.extend_i32_s (%get-small-integer-value $a))
                               (i64.load $b-value)))))

        (if (i32.eq $b-type _number-type-integer)
            (then
             (set! $a-int ($make-integer-i64 (i64.extend_i32_s (%get-small-integer-value $a))))
             (return ($gcd-integer $a-int $b)
                     ($dealloc-number $a-int))))

        (unreachable)))

   (if $b-is-small
       (then
        (if (i32.eq $a-type _number-type-i64)
            (then
             (return ($gcd-i64 (i64.extend_i32_s (%get-small-integer-value $b))
                               (i64.load $a-value)))))

        (if (i32.eq $a-type _number-type-integer)
            (then
             (set! $b-int ($make-integer-i64 (i64.extend_i32_s (%get-small-integer-value $b))))
             (return ($gcd-integer $a $b-int)
                     ($dealloc-number $b-int))))

        (unreachable)))

   (if (i32.and (i32.eq $a-type _number-type-i64)
                (i32.eq $b-type _number-type-i64))
       (then
        (return ($gcd-i64 (i64.load $a-value) (i64.load $b-value)))))

   (if (i32.and (i32.eq $a-type _number-type-i64)
                (i32.eq $b-type _number-type-integer))
       (then
        (set! $a-int ($make-integer-i64 (i64.load $a-value)))
        (return ($gcd-integer $a-int $b)
                ($dealloc-number $a-int))))

   (if (i32.and (i32.eq $b-type _number-type-i64)
                (i32.eq $a-type _number-type-integer))
       (then
        (set! $b-int ($make-integer-i64 (i64.load $b-value)))
        (return ($gcd-integer $a $b-int)
                ($dealloc-number $b-int))))

   (if (i32.or (i32.ne $a-type _number-type-integer)
               (i32.ne $b-type _number-type-integer))
       (then
        (unreachable)))

   ($gcd-integer $a $b))

 (macro %gcd
   (class Int)
   (label $a)
   (label $b)
   (label $t)

   (if (Int.lt_s $a (Int.const 0))
       (then
        (set! $a (Int.sub (Int.const 0) $a))))

   (if (Int.lt_s $b (Int.const 0))
       (then
        (set! $b (Int.sub (Int.const 0) $b))))

   (if (Int.lt_u $a $b)
       (then
        (set! $t $a)
        (set! $a $b)
        (set! $b $t)))

   (loop $again
     (if (Int.ne $b (Int.const 0))
         (then
          (set! $t $b)
          (set! $b (Int.rem_u $a $b))
          (set! $a $t)
          (br $again))))

   $a)

 (func $gcd-small-integer (debug (export "gcd-small-integer"))
   (param $a i32)
   (param $b i32)
   (result i32)

   (local $t i32)

   (set! $a (%get-small-integer-value $a))
   (set! $b (%get-small-integer-value $b))

   (%make-small-integer (%gcd i32 $a $b $t)))

 (func $gcd-i64 (debug (export "gcd-i64"))
   (param $a i64)
   (param $b i64)
   (result i32)

   (local $t i64)

   ($make-boxed-i64 (%gcd i64 $a $b $t)))

 (func $gcd-integer (debug (export "gcd-integer"))
   (param $a i32)
   (param $b i32)
   (result i32)

   (local $t i32)

   (set! $a ($copy-integer $a))
   (set! $b ($copy-integer $b))

   (%clear-integer-sign-flag $a)
   (%clear-integer-sign-flag $b)

   (if ($lt-integer $a $b)
       (then
        (set! $t $a)
        (set! $a $b)
        (set! $b $t)))

   (loop $again
     (if (i32.eqz ($is-zero-integer $b))
         (then
          (set! $t $b)
          (set! $b ($integer-remainder/dealloc-1 $a $b))
          (set! $a $t)
          ;; (if (i32.and (i32.eq (%get-integer-size $a) (i32.const 1))
          ;;              (i32.eq (%get-integer-size $b) (i32.const 1)))
          ;;     (then
          ;;      (return ($gcd-i64 (i64.load (%get-integer-addr $a))
          ;;                        (i64.load (%get-integer-addr $b)))
          ;;              ($dealloc-number $a)
          ;;              ($dealloc-number $b))))
          (br $again))))

   ($dealloc-number $b)
   $a)

 (func $copy-integer (export "copy-integer")
   (param $a i32)
   (result i32)

   (local $b i32)
   (local $size i32)

   (set! $size ($get-integer-digit-size $a))
   (set! $b ($alloc-integer $size))

   (memory.copy (%get-integer-addr $b)
                (%get-integer-addr $a)
                (i32.shl $size (i32.const 3)))

   (if (%is-negative-integer $a)
       (then
        (%set-negative-integer $b)))

   $b)

 (func $is-zero-integer (debug (export "is-zero-integer"))
   (param $x i32)
   (result i32)
   (local $digit i64)
   (local $offset i32)

   (set! $digit
         (set! $offset ($find-integer-leading-digit $x)))

   (i32.and (i64.eqz $digit) (i32.eqz $offset)))

 (func $ge-integer (debug (export "ge-integer"))
   (param $a i32)
   (param $b i32)
   (result i32)

   (i32.eqz ($lt-integer $b $a)))

 (func $gt-integer (debug (export "gt-integer"))
   (param $a i32)
   (param $b i32)
   (result i32)

   (i32.eqz ($le-integer $b $a)))

 (func $le-integer (debug (export "le-integer"))
   (param $a i32)
   (param $b i32)
   (result i32)

   (local $a-digit i64)
   (local $a-offset i32)
   (local $b-digit i64)
   (local $b-offset i32)

   (if (%is-negative-integer $a)
       (then
        (if (%is-negative-integer $b)
            (then
             (return (i32.ne ($compare-integer-digits $a $b) (i32.const -1)))))

        (return (i32.const 1))))

   (if (%is-negative-integer $b)
       (then
        (return (i32.const 0))))

   (i32.ne ($compare-integer-digits $a $b) (i32.const 1)))

 (func $lt-integer (debug (export "lt-integer"))
   (param $a i32)
   (param $b i32)
   (result i32)

   (local $a-digit i64)
   (local $a-offset i32)
   (local $b-digit i64)
   (local $b-offset i32)

   (if (%is-negative-integer $a)
       (then
        (if (%is-negative-integer $b)
            (then
             (return (i32.eq ($compare-integer-digits $a $b) (i32.const 1)))))

        (return (i32.const 1))))

   (if (%is-negative-integer $b)
       (then
        (return (i32.const 0))))

   (i32.eq ($compare-integer-digits $a $b) (i32.const -1)))

 (func $compare-integer-digits (debug (export "compare-integer-digits"))
   (param $a i32)
   (param $b i32)
   (result i32)

   (local $a-addr i32)
   (local $a-base-addr i32)
   (local $a-digit i64)
   (local $a-offset i32)
   (local $a-value i64)
   (local $b-addr i32)
   (local $b-digit i64)
   (local $b-offset i32)
   (local $b-value i64)

   (set! $a-digit
         (set! $a-offset ($find-integer-leading-digit $a)))

   (set! $b-digit
         (set! $b-offset ($find-integer-leading-digit $b)))

   (if (i32.lt_u $a-offset $b-offset)
       (then
        (return (i32.const -1))))

   (if (i32.gt_u $a-offset $b-offset)
       (then
        (return (i32.const 1))))

   (if (i64.lt_u $a-digit $b-digit)
       (then
        (return (i32.const -1))))

   (if (i64.gt_u $a-digit $b-digit)
       (then
        (return (i32.const 1))))

   (if (i32.eqz $a-offset)
       (then
        (return (i32.const 0))))

   (set! $a-base-addr (%get-integer-addr $a))

   (set! $a-addr (i32.add $a-base-addr $a-offset))
   (set! $b-addr (i32.add (%get-integer-addr $b) $b-offset))

   (loop $again
     (if (i32.gt_u $a-addr $a-base-addr)
         (then
          (%decr-n i32 $a-addr 8)
          (%decr-n i32 $b-addr 8)

          (set! $a-value (i64.load $a-addr))
          (set! $b-value (i64.load $b-addr))

          (if (i64.eq $a-value $b-value)
              (then
               (br $again))))
       (else
        (return (i32.const 0)))))

   (if (i64.lt_u $a-value $b-value)
       (then
        (return (i32.const -1))))

   (i32.const 1))

 (func $get-integer-size (export "get-integer-size")
   (param $int i32)
   (result i32)
   (%get-integer-size $int))

 (func $get-integer-digit-i32 (export "get-integer-digit-i32")
   (param $int i32)
   (param $idx i32)
   (result i32)

   (i32.load (%get-i32-digit-addr $int $idx)))

 (func $get-integer-digit-i64 (export "get-integer-digit-i64")
   (param $int i32)
   (param $idx i32)
   (result i64)

   (i64.load (%get-i64-digit-addr $int $idx)))

 (func $set-integer-i32-digit (export "set-integer-i32-digit")
   (param $int i32)
   (param $idx i32)
   (param $digit i32)

   (i32.store (%get-i32-digit-addr $int $idx) $digit))

 (func $set-integer-i64-digit (export "set-integer-i64-digit")
   (param $int i32)
   (param $idx i32)
   (param $digit i64)

   (i64.store (%get-i64-digit-addr $int $idx) $digit))

 (func $to-inexact (export "to-inexact")
   (param $x i32)
   (result i32)

   (local $type i32)
   (local $value i32)

   (if (i32.eq (%get-value-tag $x) _tag-small-integer)
       (then
        (return ($make-boxed-f64 ($coerce-f64 $x)))))

   (set! $type (%get-number-type $x))
   (set! $value (%get-box-value $x))

   (if (result i32) (i32.eq $type _number-type-complex)
     (then
      ($set-real-part $x ($make-boxed-f64 ($coerce-f64 ($real-part $x))))
      ($set-imag-part $x ($make-boxed-f64 ($coerce-f64 ($imag-part $x))))
      $x)
     (else
      ($make-boxed-f64 ($coerce-f64 $x)))))

 (func $coerce-f64 (export "coerce-f64")
   (param $x i32)
   (result f64)

   (local $type i32)
   (local $value i32)

   (if (i32.eq (%get-value-tag $x) _tag-small-integer)
       (then
        (return (f64.convert_i32_s (%get-small-integer-value $x)))))

   (set! $type (%get-number-type $x))
   (set! $value (%get-box-value $x))

   (if (i32.eq $type _number-type-f64)
       (then
        (f64.load $value)
        ($dealloc-number $x)
        (return)))

   (if (i32.eq $type _number-type-i64)
       (then
        (f64.convert_i64_s (i64.load $value))
        ($dealloc-number $x)
        (return)))

   (if (i32.eq $type _number-type-rational)
       (then
        ($coerce-rational-f64 $x)
        (return)))

   (if (i32.eq $type _number-type-integer)
       (then
        ($coerce-integer-f64 $x)
        (return)))

   (if (i32.eq $type _number-type-complex)
       ;; technically possible when im=0, but the use case is in
       ;; parsing where this case is not possible due to the lexical
       ;; structure.
       (then (unreachable)))

   (unreachable)

   ;; needed for type check
   (f64.const 0))

 (func $coerce-rational-f64 (debug (export "coerce-rational-f64"))
   (param $x i32)
   (result f64)

   (local $d i32)
   (local $d-bits i32)
   (local $mantissa-adj i32)
   (local $n i32)
   (local $n-bits i32)
   (local $quot i32)
   (local $rem i32)

   (set! $n ($promote-to-integer ($numerator $x)))
   (set! $d ($promote-to-integer ($denominator $x)))

   ($dealloc-number $x)

   (set! $d-bits ($get-integer-bit-size $d))
   (set! $n-bits ($get-integer-bit-size $n))

   ;; ensure the quotient has at least 63 bits to allow a precise
   ;; conversion to f64. See $coerce-integer-f64 below.

   (set! $mantissa-adj (i32.sub (i32.add $d-bits (i32.const 63)) $n-bits))
   (if (i32.lt_s $mantissa-adj (i32.const 0))
       (then
        (set! $mantissa-adj (i32.const 0)))
     (else
      ($shift-integer $n $mantissa-adj)))

   (set! $rem
         (set! $quot ($integer-division $n $d)))

   ;; round up if 2*rem is >= d
   ($shift-integer $rem (i32.const 1))

   (if ($integer-ge $rem $d)
       (then
        (set! $quot ($integer-addition/dealloc-2 $quot ($make-integer-i64 (i64.const 1))))))

   ;; return value
   ($adjust-mantissa ($coerce-integer-f64 $quot) $mantissa-adj)

   ($dealloc-number $d)
   ($dealloc-number $n)
   ($dealloc-number $rem))

 (func $promote-to-integer (debug (export "promote-to-integer"))
   (param $x i32)
   (result i32)

   (local $type i32)
   (local $value i32)

   (if (i32.eq (%get-value-tag $x) _tag-small-integer)
       (then
        (return ($make-integer-i64 (i64.extend_i32_s (%get-small-integer-value $x))))))

   (set! $type (%get-number-type $x))
   (set! $value (%get-box-value $x))

   (if (i32.eq $type _number-type-f64)
       (then
        ($not-implemented)))

   (if (i32.eq $type _number-type-i64)
       (then
        (return
         ($make-integer-i64 (i64.load $value)))))

   (if (i32.eq $type _number-type-complex)
       (then
        ($not-implemented)))

   (if (i32.eq $type _number-type-rational)
       (then
        ($not-implemented)))

   (if (i32.eq $type _number-type-integer)
       (then
        (return ($copy-integer $x))))

   ($invalid-number-type)
   $x)

 (macro %get-f64-mantissa
   (expr ,x)
   (i64.and (i64.reinterpret_f64 ,x) (i64.const 0x7ff0000000000000)))

 (macro %get-f64-sign
   (expr ,x)
   (i64.and (i64.reinterpret_f64 ,x) (i64.const 0x8000000000000000)))

 (macro %get-f64-significand
   (expr ,x)
   (i64.and (i64.reinterpret_f64 ,x) (i64.const 0x000fffffffffffff)))

 (macro %build-f64
   (expr ,sign)
   (expr ,mantissa)
   (expr ,significand)
   (f64.reinterpret_i64 (i64.or (i64.or ,sign ,mantissa) ,significand)))

 (func $adjust-mantissa (debug (export "adjust-mantissa"))
   (param $x f64)
   (param $n i32)
   (result f64)

   (local $mantissa i64)
   (local $significand i64)

   (set! $mantissa (i64.sub (i64.shr_u (%get-f64-mantissa $x) (i64.const 52))
                            (i64.extend_i32_s $n)))

   (set! $significand (%get-f64-significand $x))

   ;; check for overflow
   (if (i64.ge_s $mantissa (i64.const 0x7ff))
       (then
        (set! $mantissa (i64.const 0x7ff))
        (set! $significand (i64.const 0)))
     (else
      ;; check for underflow
      (if (i64.le_s $mantissa (i64.const 0))
          (then
           (if (i64.le_s $mantissa (i64.const -53))
               (then
                (set! $significand (i64.const 0)))
             (else
              ;; attempt to express as a subnormal number
              ;; first shift down with one extra bit at the bottom

              (set! $significand (i64.shr_u (i64.or $significand (i64.const 0x0010000000000000))
                                            (i64.sub (i64.const 0) $mantissa)))

              ;; Round up last bit, and shift into place
              (set! $significand (i64.shr_u (i64.add $significand
                                                     (i64.and $significand (i64.const 1)))
                                            (i64.const 1)))))

           (set! $mantissa (i64.const 0))))))

   (%build-f64 (%get-f64-sign $x)
               (i64.shl $mantissa (i64.const 52))
               $significand))

 (func $coerce-integer-f64 (debug (export "coerce-integer-f64"))
   (param $x i32)
   (result f64)

   (local $bit-size i32)
   (local $carry i64)
   (local $mantissa i64)
   (local $mantissa-adj i32)
   (local $result f64)
   (local $result-i64 i64)
   (local $value i64)

   (set! $bit-size ($get-integer-bit-size $x))

   (if (i32.eqz $bit-size)
       (then
        ($dealloc-number $x)
        (return (f64.const 0.0))))

   (set! $mantissa-adj (i32.sub (i32.const 64) $bit-size))

   (if (i32.ge_s $mantissa-adj (i32.const 0))
       (then
        (set! $value (i64.load (%get-integer-addr $x)))
        (set! $mantissa-adj (i32.const 0)))

     (else
      (set! $carry ($get-integer-bit $x (i32.sub $bit-size (i32.const 65))))

      ($shift-integer $x $mantissa-adj)

      (set! $value (i64.add (i64.load (%get-integer-addr $x)) $carry))))

   (set! $result ($adjust-mantissa (f64.convert_i64_u $value) $mantissa-adj))

   (if (result f64) (%is-negative-integer $x)
     (then (f64.neg $result))
     (else $result))

   ($dealloc-number $x))

 (debug
  (func $f64-to-i64 (export "f64-to-i64")
    (param $x f64)
    (result i64)
    (i64.reinterpret_f64 $x)))

 (func $normalize-number (export "normalize-number")
   (param $x i32)
   (result i32)

   (local $type i32)
   (local $value i32)

   (if (i32.eq (%get-value-tag $x) _tag-small-integer)
       (then
        (return $x)))

   (set! $type (%get-number-type $x))
   (set! $value (%get-box-value $x))

   (if (i32.eq $type _number-type-f64)
       (then
        (return $x)))

   (if (i32.eq $type _number-type-i64)
       (then
        (return ($normalize-i64 $x))))

   (if (i32.eq $type _number-type-complex)
       (then
        (return ($normalize-complex $x))))

   (if (i32.eq $type _number-type-rational)
       (then
        (return ($normalize-rational $x))))

   (if (i32.eq $type _number-type-integer)
       (then
        (return ($normalize-integer $x))))

   ($invalid-number-type)
   $x)

 (func $normalize-i64 (export "normalize-i64")
   (param $x i32)
   (result i32)

   (local $high-bits i64)
   (local $value i64)
   (local $x64 i32)

   ;; mask out lower 29 bits. If the upper bits are all 1 or all 0,
   ;; then the number can be stored in a small integer.

   (set! $x64 (%get-box-value $x))
   (set! $value (i64.load $x64))

   (if (%is-small-value-i64 $value)
       (then
        ($dealloc-x64 $x64)
        (return (%make-small-integer (i32.wrap_i64 $value)))))

   $x)

 (func $normalize-rational (export "normalize-rational")
   (param $x i32)
   (result i32)

   (local $denom i32)
   (local $div i32)
   (local $num i32)
   (local $value i32)

   (set! $value (%get-box-value $x))

   (set! $num ($normalize-number ($get-pair-car $value)))
   (set! $denom ($normalize-number ($get-pair-cdr $value)))

   (if ($is-negative $denom)
       (then
        (set! $num ($negate-number $num))
        (set! $denom ($negate-number $denom))))

   (if (i32.eq $denom _small-integer-0)
       (then
        (unreachable)))

   (if (i32.ne $denom _small-integer-1)
       (then
        (set! $div ($normalize-number ($gcd $num $denom)))

        (if (i32.ne $div _small-integer-1)
            (then
             (set! $num ($quotient/dealloc-1 $num $div))
             (set! $denom ($quotient/dealloc-1 $denom $div))
             ($dealloc-number $div)))))

   (if (i32.eq $denom _small-integer-1)
       (then
        ($dealloc-pair $value)
        (%dealloc-box $x)
        (return $num)))

   ($set-pair-car $value $num)
   ($set-pair-cdr $value $denom)

   $x)

 (func $normalize-complex (export "normalize-complex")
   (param $x i32)
   (result i32)

   (local $im i32)
   (local $re i32)
   (local $value i32)

   (set! $value (%get-box-value $x))

   (set! $re ($normalize-number ($get-pair-car $value)))
   (set! $im ($normalize-number ($get-pair-cdr $value)))

   (if (i32.eq $im _small-integer-0)
       (then
        ($dealloc-pair $value)
        (%dealloc-box $x)
        (return $re)))

   ($set-pair-car $value $re)
   ($set-pair-cdr $value $im)

   $x)

 (func $normalize-integer (export "normalize-integer")
   (param $x i32)
   (result i32)

   (local $addr i32)
   (local $base-addr i32)
   (local $size i32)
   (local $value i64)

   (set! $base-addr (%get-integer-addr $x))
   (set! $size (%get-integer-byte-size $x))

   (set! $addr (i32.add $base-addr $size))

   (loop $again
     (%decr-n i32 $addr 8)
     (if (i32.gt_u $addr $base-addr)
         (then
          (if (i64.eqz (i64.load $addr))
              (then
               (br $again))))))

   (if (i32.eq $addr $base-addr)
       (then

        (set! $value (i64.load $addr))

        (if (i64.ge_s $value (i64.const 0))
            (then

             (if (%get-integer-sign-flag $x)
                 (then
                  (set! $value (i64.sub (i64.const 0) $value))))

             ($dealloc-number $x)

             (if (%is-small-value-i64 $value)
                 (then
                  (return (%make-small-integer (i32.wrap_i64 $value))))
               (else
                (return ($make-boxed-i64 $value))))))))

   $x)


 ;;-----------------------------------------------------------------------------
 ;;
 ;; Number properties
 ;;
 ;;-----------------------------------------------------------------------------

 (func $is-small-integer (debug (export "is-small-integer"))
   (param $n i32)
   (result i32)
   (i32.eq (%get-value-tag $n) _tag-small-integer))

 (func $is-complex (export "is-complex")
   (param $n i32)
   (result i32)

   (if (result i32) (i32.ne (%get-value-tag $n) _tag-box)
     (then
      (i32.const 0))

     (else
      (i32.eq (%get-number-type $n) _number-type-complex))))

 (func $is-boxed-i64 (debug (export "is-boxed-i64"))
   (param $n i32)
   (result i32)

   (if (result i32) (i32.ne (%get-value-tag $n) _tag-box)
     (then
      (i32.const 0))

     (else
      (i32.eq (%get-number-type $n) _number-type-i64))))

 (func $is-boxed-f64 (debug (export "is-boxed-f64"))
   (param $n i32)
   (result i32)

   (if (result i32) (i32.ne (%get-value-tag $n) _tag-box)
     (then
      (i32.const 0))

     (else
      (i32.eq (%get-number-type $n) _number-type-f64))))

 (func $real-part (export "real-part")
   (param $n i32)
   (result i32)

   ($get-pair-car (%get-box-value $n)))

 (func $imag-part (export "imag-part")
   (param $n i32)
   (result i32)

   ($get-pair-cdr (%get-box-value $n)))

 (func $set-real-part (export "set-real-part")
   (param $n i32)
   (param $re i32)

   ($set-pair-car (%get-box-value $n) $re))

 (func $set-imag-part (export "set-imag-part")
   (param $n i32)
   (param $im i32)

   ($set-pair-cdr (%get-box-value $n) $im))

 (func $is-inexact (export "is-inexact")
   (param $n i32)
   (result i32)

   (if (result i32) (i32.ne (%get-value-tag $n) _tag-box)
     (then
      (i32.const 0))

     (else
      (i32.eq (%get-number-type $n) _number-type-f64))))

 (func $get-boxed-f64 (export "get-boxed-f64")
   (param $n i32)
   (result f64)

   (f64.load (%get-box-value $n)))

 (func $get-boxed-i64 (export "get-boxed-i64")
   (param $n i32)
   (result i64)

   (i64.load (%get-box-value $n)))

 (func $is-rational (export "is-rational")
   (param $n i32)
   (result i32)

   (if (result i32) (i32.ne (%get-value-tag $n) _tag-box)
     (then
      (i32.const 0))

     (else
      (i32.eq (%get-number-type $n) _number-type-rational))))

 (func $denominator (export "denominator")
   (param $n i32)
   (result i32)

   ($get-pair-cdr (%get-box-value $n)))

 (func $numerator (export "numerator")
   (param $n i32)
   (result i32)

   ($get-pair-car (%get-box-value $n)))

 (func $is-integer (export "is-integer")
   (param $n i32)
   (result i32)

   (if (result i32) (i32.ne (%get-value-tag $n) _tag-box)
     (then
      (i32.const 0))

     (else
      (i32.eq (%get-number-type $n) _number-type-integer))))

 ;;-----------------------------------------------------------------------------
 ;;
 ;; Double-f64 Operations
 ;;
 ;; Add and multiply routines using a pair of f64s simulating an f128.
 ;;
 ;; These are used in decimal parsing to provided enough precision to use
 ;; floating point for computing an accurate result.

 (func $double-add-1 (debug (export "double-add-1"))
   (param $h f64)
   (param $l f64)
   (param $f f64)
   (result f64 f64)

   (local $r_h f64)
   (local $r_l f64)
   (local $t_h f64)
   (local $t_l f64)

   (set! $t_h (f64.add $h $f))
   (set! $t_l (f64.add $l (f64.sub $f (f64.sub $t_h $h))))

   (set! $r_h (f64.add $t_h $t_l))
   (set! $r_l (f64.sub $t_l (f64.sub $r_h $t_h)))

   $r_h
   $r_l)

 (func $double-add (debug (export "double-add"))
   (param $a_h f64)
   (param $a_l f64)
   (param $b_h f64)
   (param $b_l f64)
   (result f64 f64)

   ($double-add-1 ($double-add-1 $a_h $a_l $b_l) $b_h))

 (func $double-mul-1 (debug (export "double-mul-1"))
   (param $h f64)
   (param $l f64)
   (param $f f64)
   (result f64 f64)

   (local $r_h f64)
   (local $r_l f64)
   (local $t_h f64)
   (local $t_l f64)

   (set! $t_h (f64.mul $h $f))
   (set! $t_l (f64.mul $l $f))

   (set! $r_h (f64.add $t_h $t_l))
   (set! $r_l (f64.sub $t_l (f64.sub $r_h $t_h)))

   $r_h
   $r_l)

 (func $double-mul (debug (export "double-mul"))
   (param $a_h f64)
   (param $a_l f64)
   (param $b_h f64)
   (param $b_l f64)
   (result f64 f64)

   ($double-add ($double-mul-1 $a_h $a_l $b_h) ($double-mul-1 $a_h $a_l $b_l)))

 (func $double-positive-pow-10 (debug (export "double-positive-pow-10"))
   (param $h f64)
   (param $l f64)
   (param $n i32)
   (result f64 f64)

   (if (i32.eq $n (i32.const 1))
       (then
        (return $h $l)))

   (if (i32.and $n (i32.const 0xfffffe00))
       (then
        (return (f64.const +inf) (f64.const 0))))

   ;; Put $h $l on the stack.  Any consequent will consume and replace
   ;; these two values, and at the end, they are the return value.

   $h
   $l

   (if (param f64 f64) (result f64 f64) (i32.or $n (i32.const 1))
       (then ($double-mul-1 (f64.const 1e1))))

   (if (param f64 f64) (result f64 f64) (i32.or $n (i32.const 2))
       (then ($double-mul-1 (f64.const 1e2))))

   (if (param f64 f64) (result f64 f64) (i32.or $n (i32.const 4))
       (then ($double-mul-1 (f64.const 1e4))))

   (if (param f64 f64) (result f64 f64) (i32.or $n (i32.const 8))
       (then ($double-mul-1 (f64.const 1e8))))

   (if (param f64 f64) (result f64 f64) (i32.or $n (i32.const 0x10))
       (then ($double-mul-1 (f64.const 1e16))))

   (if (param f64 f64) (result f64 f64) (i32.or $n (i32.const 0x20))
       (then ($double-mul (f64.const 1e32) (f64.const -905969664.0))))

   (if (param f64 f64) (result f64 f64) (i32.or $n (i32.const 0x40))
       (then ($double-mul (f64.const 1e64) (f64.const -4.242063737401796e+19))))

   (if (param f64 f64) (result f64 f64) (i32.or $n (i32.const 0x80))
       (then ($double-mul (f64.const 1e128) (f64.const 5.3509723052451824e+32))))

   (if (param f64 f64) (result f64 f64) (i32.or $n (i32.const 0x100))
       (then ($double-mul (f64.const 1e256) (f64.const -2.1320419009454396e+47)))))

 (func $double-negative-pow-10 (debug (export "double-negative-pow-10"))
   (param $h f64)
   (param $l f64)
   (param $n i32)
   (result f64 f64)

   (if (i32.and $n (i32.const 0xfffffe00))
       (then
        (return (f64.const 0) (f64.const 0))))

   ;; Put $h $l on the stack.  Any consequent will consume and replace
   ;; these two values -- as indicated by the (param ...) (result ...)
   ;; annotations on the conditionals -- and at the end, they are the
   ;; return value.

   $h
   $l

   (if (param f64 f64) (result f64 f64) (i32.or $n (i32.const 1))
       (then ($double-mul (f64.const 0.1) (f64.const -1.6305215615551747e-19))))

   (if (param f64 f64) (result f64 f64) (i32.or $n (i32.const 2))
       (then ($double-mul (f64.const 0.01) (f64.const -9.477862787268161e-20))))

   (if (param f64 f64) (result f64 f64) (i32.or $n (i32.const 4))
       (then ($double-mul (f64.const 0.0001) (f64.const 1.3447671533954056e-22))))

   (if (param f64 f64) (result f64 f64) (i32.or $n (i32.const 8))
       (then ($double-mul (f64.const 1e-08) (f64.const -8.149880976617501e-26))))

   (if (param f64 f64) (result f64 f64) (i32.or $n (i32.const 0x10))
       (then ($double-mul (f64.const 1e-16) (f64.const 1.0721879329278485e-34))))

   (if (param f64 f64) (result f64 f64) (i32.or $n (i32.const 0x20))
       (then ($double-mul (f64.const 1e-32) (f64.const 1.8183955345018783e-50))))

   (if (param f64 f64) (result f64 f64) (i32.or $n (i32.const 0x40))
       (then ($double-mul (f64.const 1e-64) (f64.const -2.3056703642312677e-82))))

   (if (param f64 f64) (result f64 f64) (i32.or $n (i32.const 0x80))
       (then ($double-mul (f64.const 1e-128) (f64.const 4.0957073008694175e-146))))

   (if (param f64 f64) (result f64 f64) (i32.or $n (i32.const 0x100))
       (then ($double-mul (f64.const 1e-256) (f64.const -1.331139458467538e-274)))))

 (func $double-pow-10 (debug (export "double-pow-10"))
   (param $h f64)
   (param $l f64)
   (param $n i32)
   (result f64 f64)

   (if (i32.eqz $n) (then (return (f64.const 1) (f64.const 0))))

   (if (result f64 f64) (i32.gt_s $n (i32.const 0))
     (then ($double-positive-pow-10 $h $l $n))
     (else ($double-negative-pow-10 $h $l (i32.sub (i32.const 0) $n)))))

 (func $make-decimal (debug (export "make-decimal"))
   (param $significand i64)
   (param $exp i32)
   (result i32)
   ($make-decimal-f96 $significand $exp))

 (func $make-decimal-double (debug (export "make-decimal-double"))
   (param $significand i64)
   (param $exp i32)
   (result i32)

   (local $x f64)
   (local $err f64)

   (set! $x
         (set! $err ($double-pow-10 (f64.convert_i64_u $significand)
                                    (f64.const 0.0)
                                    $exp)))

   ($make-boxed-f64 (f64.add $x (f64.mul $err (f64.const 2.0)))))

 (func $make-decimal-f96 (debug (export "make-decimal-f96"))
   (param $sig i64)
   (param $exp i32)
   (result i32)

   ($make-boxed-f64 ($f64-round-f96 ($f96-mul-pow-10 ($f96-convert-i64-u $sig)
                                                     $exp))))

 (define _f96-inf  (i64.const 0) (i32.const 0x7fffffff)) ;; max exp
 (define _f96-zero (i64.const 0) (i32.const 0x80000000)) ;; min exp

 (func $f96-mul-pow-10 (debug (export "f96-mul-pow-10"))
   (param $sig i64)
   (param $exp i32)
   (param $n i32)
   (result i64 i32)
   ($f96-mul-pow-10-lookup $sig $exp $n))

 (func $f96-mul-pow-10-compute (debug (export "f96-mul-pow-10-compute"))
   (param $sig i64)
   (param $exp i32)
   (param $n i32)
   (result i64 i32)

   (if (i32.eqz $n) (then (return $sig $exp)))

   (if (result i64 i32) (i32.gt_s $n (i32.const 0))
     (then ($f96-mul-positive-pow-10 $sig $exp $n))
     (else ($f96-mul-negative-pow-10 $sig $exp (i32.sub (i32.const 0) $n)))))

 (func $f96-mul-pow-10-lookup (debug (export "f96-mul-pow-10-lookup"))
   (param $sig i64)
   (param $exp i32)
   (param $n i32)
   (result i64 i32)

   (local $idx i32)

   (if (i32.lt_s $n (i32.const -342))
       (then
        (return _f96-zero)))

   (if (i32.gt_s $n (i32.const 308))
       (then
        (return _f96-inf)))

   (set! $idx (i32.add $n (i32.const 342)))
   ($f96-mul
    (i64.load (i32.add (global.get $powers-of-10-sig-addr) (i32.shl $idx (i32.const 3))))
    (i32.load (i32.add (global.get $powers-of-10-exp-addr) (i32.shl $idx (i32.const 2))))
    $sig
    $exp))

 (func $f96-mul-positive-pow-10 (debug (export "f96-mul-positive-pow-10"))
   (param $sig i64)
   (param $exp i32)
   (param $n i32)
   (result i64 i32)

   (if (i32.and $n (i32.const 0xfffffe00))
       (then
        (return _f96-inf)))

   $sig
   $exp

   (if (param i64 i32) (result i64 i32) (i32.and $n (i32.const 1))
       (then ($f96-mul (i64.const 4611686018427387904) (i32.const 3))))

   (if (param i64 i32) (result i64 i32) (i32.and $n (i32.const 2))
       (then ($f96-mul (i64.const 10376293541461622784) (i32.const 6))))

   (if (param i64 i32) (result i64 i32) (i32.and $n (i32.const 4))
       (then ($f96-mul (i64.const 4071254063142928384) (i32.const 13))))

   (if (param i64 i32) (result i64 i32) (i32.and $n (i32.const 8))
       (then ($f96-mul (i64.const 9041046620690448384) (i32.const 26))))

   (if (param i64 i32) (result i64 i32) (i32.and $n (i32.const 0x10))
       (then ($f96-mul (i64.const 2033255926290448384) (i32.const 53))))

   (if (param i64 i32) (result i64 i32) (i32.and $n (i32.const 0x20))
       (then ($f96-mul (i64.const 4290623470613654332) (i32.const 106))))

   (if (param i64 i32) (result i64 i32) (i32.and $n (i32.const 0x40))
       (then ($f96-mul (i64.const 9579225212786789802) (i32.const 212))))

   (if (param i64 i32) (result i64 i32) (i32.and $n (i32.const 0x80))
       (then ($f96-mul (i64.const 2843055126331201984) (i32.const 425))))

   (if (param i64 i32) (result i64 i32) (i32.and $n (i32.const 0x100))
       (then ($f96-mul (i64.const 6124288525156465948) (i32.const 850)))))

 (func $f96-mul-negative-pow-10 (debug (export "f96-mul-negative-pow-10"))
   (param $sig i64)
   (param $exp i32)
   (param $n i32)
   (result i64 i32)

   (if (i32.and $n (i32.const 0xfffffe00))
       (then
        (return _f96-zero)))

   $sig
   $exp

   (if (param i64 i32) (result i64 i32) (i32.and $n (i32.const 1))
       (then ($f96-mul (i64.const 11068046444225730970) (i32.const -4))))

   (if (param i64 i32) (result i64 i32) (i32.and $n (i32.const 2))
       (then ($f96-mul (i64.const 5165088340638674452) (i32.const -7))))

   (if (param i64 i32) (result i64 i32) (i32.and $n (i32.const 4))
       (then ($f96-mul (i64.const 11776401416656177752) (i32.const -14))))

   (if (param i64 i32) (result i64 i32) (i32.and $n (i32.const 8))
       (then ($f96-mul (i64.const 6312056711998053882) (i32.const -27))))

   (if (param i64 i32) (result i64 i32) (i32.and $n (i32.const 0x10))
       (then ($f96-mul (i64.const 14783955820913345207) (i32.const -54))))

   (if (param i64 i32) (result i64 i32) (i32.and $n (i32.const 0x20))
       (then ($f96-mul (i64.const 11484809458827340149) (i32.const -107))))

   (if (param i64 i32) (result i64 i32) (i32.and $n (i32.const 0x40))
       (then ($f96-mul (i64.const 5836617079112061770) (i32.const -213))))

   (if (param i64 i32) (result i64 i32) (i32.and $n (i32.const 0x80))
       (then ($f96-mul (i64.const 13519961081526208833) (i32.const -426))))

   (if (param i64 i32) (result i64 i32) (i32.and $n (i32.const 0x100))
       (then ($f96-mul (i64.const 9251104240296014452) (i32.const -851)))))

 (macro %i64-high-i32-u
   (expr ,x)
   (i64.shr_u ,x (i64.const 32)))

 (macro %i64-low-i32-u
   (expr ,x)
   (i64.and ,x (i64.const 0xffffffff)))

 (func $multiply-sig64 (debug (export "multiply-sig64"))
   ;; Notionally, multiplies two 65 bit integers, returning a 65 bit integer,
   ;; where each is represented as an i64 with a presumed leading digit of 1.
   ;;
   ;; The return value is composed of an i64 representing the lower 64 bits,
   ;; again presuming a leading digit of 1, plus a flag indicating whether or
   ;; not there was a carry. This flag may also be used as an exponent
   ;; increment, since it takes the values of 0 or 1.
   ;;
   ;; Multiplication of these numbers is accomplished as follows:
   ;;
   ;; 1. It will be convenient to think of each of these as composed of two 32
   ;;    bit parts -- ah, al, bh, bl.
   ;;
   ;; 2. Then we want to compute the product
   ;;
   ;;      (2**64 + ah + al) * (2**64 + bh + bl)
   ;;          = 2**128 + 2**64 * ah + 2**64 * al
   ;;            + 2**64 * bh + ah * bh + al * bh
   ;;            + 2**64 * bl + ah * bl + al * bl
   ;;
   ;; 3. This will produce a 129 or 130 bit product.
   ;;
   ;; 4. The result will be the 64 bits immediately below the high bit of the sum.
   ;;
   ;; 5. These terms align with each other as follows:
   ;;
   ;;      144             128             96              64              32              0
   ;;      | 2**128        |
   ;;      |               | 2**64 * ah    |
   ;;                      | 2**64 * bh    |
   ;;                      | ah * bh                       |
   ;;                                      | 2**64 * al    |
   ;;                                      | 2**64 * bl    |
   ;;                                      | ah * bl                       |
   ;;                                      | al * bh                       |
   ;;                                                      | al * bl                       |
   ;;
   ;; 6. The sum of terms 2-9 may produce up to 2 carries into the 128th bit.
   ;;

   (param $a i64)
   (param $b i64)
   (result i64 i32)

   (local $ah i64)
   (local $ah_x_bh i64)
   (local $ah_x_bl i64)
   (local $al i64)
   (local $al_x_bh i64)
   (local $al_x_bl i64)
   (local $bh i64)
   (local $bl i64)
   (local $r i64)
   (local $sh i64)
   (local $sl i64)

   (set! $al (%i64-low-i32-u $a))
   (set! $ah (%i64-high-i32-u $a))

   (set! $bl (%i64-low-i32-u $b))
   (set! $bh (%i64-high-i32-u $b))

   ;; primary products
   (set! $ah_x_bh (i64.mul $ah $bh))
   (set! $ah_x_bl (i64.mul $ah $bl))
   (set! $al_x_bh (i64.mul $al $bh))
   (set! $al_x_bl (i64.mul $al $bl))

   ;; rounding term
   ;;      144             128             96              64              32              0
   ;;                                      | ah * bl                       |
   ;;                                      | al * bh                       |
   ;;                                                      | al * bl                       |
   (set! $r (i64.add (%i64-high-i32-u $al_x_bl)
                     (i64.add (%i64-low-i32-u $al_x_bh)
                              (%i64-low-i32-u $ah_x_bl))))

   ;; sig terms
   ;;      144             128             96              64              32              0
   ;;                      | ah * bh                       |
   ;;                                      | 2**64 * al    |
   ;;                                      | 2**64 * bl    |
   ;;                                      | ah * bl                       |
   ;;                                      | al * bh                       |
   (set! $sl (i64.add (i64.add (%i64-low-i32-u $ah_x_bh)
                               (i64.add $al $bl))
                      (i64.add (i64.add (%i64-high-i32-u $ah_x_bl)
                                        (%i64-high-i32-u $al_x_bh))
                               (%i64-high-i32-u $r))))

   ;;      144             128             96              64              32              0
   ;;      | 2**128        |
   ;;      |               | 2**64 * ah    |
   ;;                      | 2**64 * bh    |
   ;;                      | ah * bh                       |
   (set! $sh (i64.add (i64.add (i64.const 0x100000000)
                               (i64.add (i64.add $ah $bh)
                                        (%i64-high-i32-u $ah_x_bh)))
                      (%i64-high-i32-u $sl)))

   ;; detect carry into 128th bit
   (if (result i64 i32) (i64.eqz (i64.and $sh (i64.const 0x200000000)))
     (then
      (i64.or (i64.shl $sh (i64.const 32))
              (%i64-low-i32-u $sl))
      (i32.const 0))
     (else
      (i64.or (i64.shl $sh (i64.const 31))
              (i64.shr_u (%i64-low-i32-u $sl)
                         (i64.const 1)))
      (i32.const 1))))

 (func $f96-mul (debug (export "f96-mul"))
   (param $sig-a i64)
   (param $exp-a i32)
   (param $sig-b i64)
   (param $exp-b i32)
   (result i64 i32)

   ;; multiply-sig64 returns and i64 (the significand) and an i32 (0 or 1, the
   ;; exponent).  The additions add the exponents of the products to the
   ;; exponent produced by the product of the significands. The significand
   ;; itself is left on the stack and implicit in the result of this function.

   (i32.add ($multiply-sig64 $sig-a $sig-b)
            (i32.add $exp-a $exp-b)))

 (func $f64-round-f96 (debug (export "f64-round-f96"))
   (param $sig i64)
   (param $exp i32)
   (result f64)

   (local $e i64)
   (local $r i64)
   (local $s i64)

   (if (i32.eq $exp (i32.const 0x7fffffff))
       (then (return (f64.const inf))))

   (if (i32.eq $exp (i32.const 0x80000000))
       (then (return (f64.const 0.0))))

   (set! $e (i64.extend_i32_s (i32.add $exp (i32.const 0x3ff))))
   (global.set $d1 $e)
   (global.set $d2 $sig)

   (if (i64.ge_s $e (i64.const 0x7ff))
       (then
        (return (f64.const +inf))))

   (if (i64.lt_s $e (i64.const -52))
       (then
        ;; 0 by way of large negative exponent
        (return (f64.const 0.0))))

   (if (i64.eq $e (i64.const -52))
       (then
        ;; Least positive f64
        (return (f64.const 5e-324))))

   ;; Drop lsb and set msb, and then another shift to allow
   ;; for carry in rounding below.
   (set! $sig (i64.or (i64.shr_u $sig (i64.const 2))
                      (i64.const 0x4000000000000000)))

   (if (i64.le_s $e (i64.const 0))
       (then
        ;; subnormal number

        ;; # of bits to be shifted out of sig
        (set! $s (i64.sub (i64.const 11) $e))

        ;; round to even
        (set! $r (i64.sub (i64.shl (i64.const 1) (i64.sub $s (i64.const 1)))
                          (i64.xor (i64.and (i64.shr_u $sig $s)
                                            (i64.const 1))
                                   (i64.const 1))))

        (return (f64.reinterpret_i64 (i64.shr_u (i64.add $sig $r) $s)))))

   ;; round to even
   (set! $r (i64.add (i64.const 0x1ff)
                     (i64.and (i64.shr_u $sig (i64.const 10))
                              (i64.const 1))))

   (set! $sig (i64.add $sig $r))

   (if (i64.eqz (i64.clz $sig))
       (then
        (%incr i64 $e)
        (set! $sig (i64.shr_u $sig (i64.const 1)))))

   (f64.reinterpret_i64
    (i64.or (i64.shl $e (i64.const 52))
            (i64.and (i64.shr_u $sig (i64.const 10))
                     (i64.const 0xfffffffffffff)))))

 (func $f96-convert-i64-u (debug (export "f96-convert-i64-u"))
   (param $n i64)
   (result i64 i32)

   (local $c i64)

   (if (i64.eqz $n)
       (then (return _f96-zero)))

   (set! $c (i64.clz $n))

   (i64.shl $n (i64.add $c (i64.const 1)))
   (i32.wrap_i64 (i64.sub (i64.const 63) $c)))

 (func $init-powers-of-10 (debug (export "init-powers-of-10"))
   ($init-powers-of-10-round-up))

 (func $init-powers-of-10-round-even (debug (export "init-powers-of-10-round-even"))

   (local $block i32)
   (local $exp-addr i32)
   (local $sig-addr i32)

   (set! $block ($alloc-block _numbers-blockset _powers-of-10-block-size))

   (set! $exp-addr ($get-block-addr $block))
   (set! $sig-addr (i32.add $sig-addr (i32.shl _powers-of-10-count
                                               (i32.const 2))))

   (global.set $powers-of-10-exp-addr $exp-addr)
   (global.set $powers-of-10-sig-addr $sig-addr)

   ;; 10**-342
   (i64.store $sig-addr (i64.const 15990214839061949620))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -1137))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-341
   (i64.store $sig-addr (i64.const 3076355246772636656))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -1133))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-340
   (i64.store $sig-addr (i64.const 8457130076893183724))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -1130))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-339
   (i64.store $sig-addr (i64.const 15183098614543867560))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -1127))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-338
   (i64.store $sig-addr (i64.const 2571907606448835368))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -1123))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-337
   (i64.store $sig-addr (i64.const 7826570526488432115))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -1120))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-336
   (i64.store $sig-addr (i64.const 14394899176537928048))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -1117))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-335
   (i64.store $sig-addr (i64.const 2079282957695123174))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -1113))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-334
   (i64.store $sig-addr (i64.const 7210789715546291871))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -1110))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-333
   (i64.store $sig-addr (i64.const 13625173162860252743))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -1107))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-332
   (i64.store $sig-addr (i64.const 1598204199146576108))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -1103))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-331
   (i64.store $sig-addr (i64.const 6609441267360608040))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -1100))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-330
   (i64.store $sig-addr (i64.const 12873487602628147954))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -1097))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-329
   (i64.store $sig-addr (i64.const 1128400724001510615))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -1093))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-328
   (i64.store $sig-addr (i64.const 6022186923429276172))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -1090))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-327
   (i64.store $sig-addr (i64.const 12139419672713983120))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -1087))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-326
   (i64.store $sig-addr (i64.const 669608267805157594))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -1083))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-325
   (i64.store $sig-addr (i64.const 5448696353183834896))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -1080))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-324
   (i64.store $sig-addr (i64.const 11422556459907181524))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -1077))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-323
   (i64.store $sig-addr (i64.const 221568759800906596))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -1073))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-322
   (i64.store $sig-addr (i64.const 4888646968178521150))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -1070))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-321
   (i64.store $sig-addr (i64.const 10722494728650539342))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -1067))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-320
   (i64.store $sig-addr (i64.const 18014804429240562081))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -1064))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-319
   (i64.store $sig-addr (i64.const 4341723740634269444))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -1060))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-318
   (i64.store $sig-addr (i64.const 10038840694220224710))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -1057))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-317
   (i64.store $sig-addr (i64.const 17160236886202668791))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -1054))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-316
   (i64.store $sig-addr (i64.const 3807619026235586138))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -1050))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-315
   (i64.store $sig-addr (i64.const 9371209801221870577))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -1047))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-314
   (i64.store $sig-addr (i64.const 16325698269954726126))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -1044))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-313
   (i64.store $sig-addr (i64.const 3286032391080621972))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -1040))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-312
   (i64.store $sig-addr (i64.const 8719226507278165370))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -1037))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-311
   (i64.store $sig-addr (i64.const 15510719152525094616))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -1034))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-310
   (i64.store $sig-addr (i64.const 2776670442687102278))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -1030))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-309
   (i64.store $sig-addr (i64.const 8082524071786265752))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -1027))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-308
   (i64.store $sig-addr (i64.const 14714841108160220094))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -1024))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-307
   (i64.store $sig-addr (i64.const 2279246664959055703))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -1020))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-306
   (i64.store $sig-addr (i64.const 7460744349626207533))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -1017))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-305
   (i64.store $sig-addr (i64.const 13937616455460147320))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -1014))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-304
   (i64.store $sig-addr (i64.const 1793481257021510219))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -1010))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-303
   (i64.store $sig-addr (i64.const 6853537589704275678))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -1007))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-302
   (i64.store $sig-addr (i64.const 13178608005557732502))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -1004))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-301
   (i64.store $sig-addr (i64.const 1319100975832500957))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -1000))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-300
   (i64.store $sig-addr (i64.const 6260562238218014100))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -997))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-299
   (i64.store $sig-addr (i64.const 12437388816199905530))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -994))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-298
   (i64.store $sig-addr (i64.const 855838982483859100))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -990))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-297
   (i64.store $sig-addr (i64.const 5681484746532211779))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -987))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-296
   (i64.store $sig-addr (i64.const 11713541951592652628))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -984))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-295
   (i64.store $sig-addr (i64.const 403434692104326036))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -980))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-294
   (i64.store $sig-addr (i64.const 5115979383557795450))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -977))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-293
   (i64.store $sig-addr (i64.const 11006660247874632216))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -974))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-292
   (i64.store $sig-addr (i64.const 18370011328270678174))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -971))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-291
   (i64.store $sig-addr (i64.const 4563728052528092002))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -967))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-290
   (i64.store $sig-addr (i64.const 10316346084087502908))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -964))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-289
   (i64.store $sig-addr (i64.const 17507118623536766538))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -961))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-288
   (i64.store $sig-addr (i64.const 4024420112069397230))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -957))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-287
   (i64.store $sig-addr (i64.const 9642211158514134442))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -954))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-286
   (i64.store $sig-addr (i64.const 16664449966570055956))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -951))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-285
   (i64.store $sig-addr (i64.const 3497752201465203117))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -947))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-284
   (i64.store $sig-addr (i64.const 8983876270258891800))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -944))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-283
   (i64.store $sig-addr (i64.const 15841531356251002654))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -941))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-282
   (i64.store $sig-addr (i64.const 2983428070015794802))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -937))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-281
   (i64.store $sig-addr (i64.const 8340971105947131408))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -934))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-280
   (i64.store $sig-addr (i64.const 15037899900861302164))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -931))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-279
   (i64.store $sig-addr (i64.const 2481158410397231996))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -927))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-278
   (i64.store $sig-addr (i64.const 7713134031423927899))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -924))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-277
   (i64.store $sig-addr (i64.const 14253103557707297778))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -921))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-276
   (i64.store $sig-addr (i64.const 1990660695925979255))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -917))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-275
   (i64.store $sig-addr (i64.const 7100011888334861973))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -914))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-274
   (i64.store $sig-addr (i64.const 13486700878845965370))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -911))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-273
   (i64.store $sig-addr (i64.const 1511659021637646500))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -907))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-272
   (i64.store $sig-addr (i64.const 6501259795474446030))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -904))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-271
   (i64.store $sig-addr (i64.const 12738260762770445441))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -901))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-270
   (i64.store $sig-addr (i64.const 1043883949090446544))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -897))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-269
   (i64.store $sig-addr (i64.const 5916540954790446084))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -894))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-268
   (i64.store $sig-addr (i64.const 12007362211915445510))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -891))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-267
   (i64.store $sig-addr (i64.const 587072354806071588))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -887))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-266
   (i64.store $sig-addr (i64.const 5345526461934977388))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -884))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-265
   (i64.store $sig-addr (i64.const 11293594095846109640))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -881))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-264
   (i64.store $sig-addr (i64.const 140967282262736668))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -877))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-263
   (i64.store $sig-addr (i64.const 4787895121255808740))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -874))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-262
   (i64.store $sig-addr (i64.const 10596554919997148829))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -871))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-261
   (i64.store $sig-addr (i64.const 17857379668423823940))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -868))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-260
   (i64.store $sig-addr (i64.const 4243333265123808106))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -864))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-259
   (i64.store $sig-addr (i64.const 9915852599832148038))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -861))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-258
   (i64.store $sig-addr (i64.const 17006501768217572950))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -858))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-257
   (i64.store $sig-addr (i64.const 3711534577494901238))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -854))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-256
   (i64.store $sig-addr (i64.const 9251104240296014452))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -851))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-255
   (i64.store $sig-addr (i64.const 16175566318797405968))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -848))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-254
   (i64.store $sig-addr (i64.const 3192199921607296874))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -844))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-253
   (i64.store $sig-addr (i64.const 8601935920436508997))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -841))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-252
   (i64.store $sig-addr (i64.const 15364105918973024150))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -838))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-251
   (i64.store $sig-addr (i64.const 2685037171717058238))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -834))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-250
   (i64.store $sig-addr (i64.const 7967982483073710702))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -831))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-249
   (i64.store $sig-addr (i64.const 14571664122269526281))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -828))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-248
   (i64.store $sig-addr (i64.const 2189761048777372070))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -824))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-247
   (i64.store $sig-addr (i64.const 7348887329399102991))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -821))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-246
   (i64.store $sig-addr (i64.const 13797795180176266642))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -818))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-245
   (i64.store $sig-addr (i64.const 1706092959969084796))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -814))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-244
   (i64.store $sig-addr (i64.const 6744302218388743898))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -811))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-243
   (i64.store $sig-addr (i64.const 13042063791413317777))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -808))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-242
   (i64.store $sig-addr (i64.const 1233760841992241754))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -804))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-241
   (i64.store $sig-addr (i64.const 6153887070917690098))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -801))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-240
   (i64.store $sig-addr (i64.const 12304044857074500526))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -798))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-239
   (i64.store $sig-addr (i64.const 772499008030480972))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -794))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-238
   (i64.store $sig-addr (i64.const 5577309778465489120))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -791))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-237
   (i64.store $sig-addr (i64.const 11583323241509249304))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -788))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-236
   (i64.store $sig-addr (i64.const 322047998302198958))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -784))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-235
   (i64.store $sig-addr (i64.const 5014246016305136602))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -781))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-234
   (i64.store $sig-addr (i64.const 10879493538808808657))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -778))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-233
   (i64.store $sig-addr (i64.const 18211052941938398726))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -775))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-232
   (i64.store $sig-addr (i64.const 4464379061070417348))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -771))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-231
   (i64.store $sig-addr (i64.const 10192159844765409588))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -768))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-230
   (i64.store $sig-addr (i64.const 17351885824384149890))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -765))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-229
   (i64.store $sig-addr (i64.const 3927399612599011824))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -761))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-228
   (i64.store $sig-addr (i64.const 9520935534176152685))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -758))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-227
   (i64.store $sig-addr (i64.const 16512855436147578760))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -755))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-226
   (i64.store $sig-addr (i64.const 3403005619951154869))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -751))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-225
   (i64.store $sig-addr (i64.const 8865443043366331490))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -748))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-224
   (i64.store $sig-addr (i64.const 15693489822635302267))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -745))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-223
   (i64.store $sig-addr (i64.const 2890902111505982061))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -741))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-222
   (i64.store $sig-addr (i64.const 8225313657809865480))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -738))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-221
   (i64.store $sig-addr (i64.const 14893328090689719754))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -735))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-220
   (i64.store $sig-addr (i64.const 2390801029039992990))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -731))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-219
   (i64.store $sig-addr (i64.const 7600187304727379142))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -728))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-218
   (i64.store $sig-addr (i64.const 14111920149336611832))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -725))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-217
   (i64.store $sig-addr (i64.const 1902421065694300538))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -721))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-216
   (i64.store $sig-addr (i64.const 6989712350545263577))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -718))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-215
   (i64.store $sig-addr (i64.const 13348826456608967376))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -715))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-214
   (i64.store $sig-addr (i64.const 1425487507739522754))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -711))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-213
   (i64.store $sig-addr (i64.const 6393545403101791346))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -708))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-212
   (i64.store $sig-addr (i64.const 12603617772304627086))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -705))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-211
   (i64.store $sig-addr (i64.const 959732080049310073))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -701))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-210
   (i64.store $sig-addr (i64.const 5811351118489025496))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -698))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-209
   (i64.store $sig-addr (i64.const 11875874916538669774))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -695))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-208
   (i64.store $sig-addr (i64.const 504892795195586752))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -691))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-207
   (i64.store $sig-addr (i64.const 5242802012421871344))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -688))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-206
   (i64.store $sig-addr (i64.const 11165188533954727084))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -685))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-205
   (i64.store $sig-addr (i64.const 60713806080622572))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -681))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-204
   (i64.store $sig-addr (i64.const 4687578276028166119))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -678))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-203
   (i64.store $sig-addr (i64.const 10471158863462595552))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -675))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-202
   (i64.store $sig-addr (i64.const 17700634597755632344))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -672))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-201
   (i64.store $sig-addr (i64.const 4145367595956188360))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -668))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-200
   (i64.store $sig-addr (i64.const 9793395513372623353))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -665))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-199
   (i64.store $sig-addr (i64.const 16853430410143167096))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -662))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-198
   (i64.store $sig-addr (i64.const 3615864978698397578))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -658))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-197
   (i64.store $sig-addr (i64.const 9131517241800384878))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -655))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-196
   (i64.store $sig-addr (i64.const 16026082570677869001))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -652))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-195
   (i64.store $sig-addr (i64.const 3098772579032586270))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -648))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-194
   (i64.store $sig-addr (i64.const 8485151742218120741))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -645))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-193
   (i64.store $sig-addr (i64.const 15218125696200038830))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -642))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-192
   (i64.store $sig-addr (i64.const 2593799532483942412))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -638))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-191
   (i64.store $sig-addr (i64.const 7853935434032315920))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -635))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-190
   (i64.store $sig-addr (i64.const 14429105310967782804))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -632))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-189
   (i64.store $sig-addr (i64.const 2100661791713782396))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -628))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-188
   (i64.store $sig-addr (i64.const 7237513258069615900))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -625))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-187
   (i64.store $sig-addr (i64.const 13658577591014407778))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -622))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-186
   (i64.store $sig-addr (i64.const 1619081966742923006))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -618))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-185
   (i64.store $sig-addr (i64.const 6635538476856041661))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -615))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-184
   (i64.store $sig-addr (i64.const 12906109114497439980))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -612))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-183
   (i64.store $sig-addr (i64.const 1148789168919818132))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -608))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-182
   (i64.store $sig-addr (i64.const 6047672479577160568))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -605))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-181
   (i64.store $sig-addr (i64.const 12171276617898838614))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -602))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-180
   (i64.store $sig-addr (i64.const 689518858545692278))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -598))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-179
   (i64.store $sig-addr (i64.const 5473584591609503252))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -595))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-178
   (i64.store $sig-addr (i64.const 11453666757939266968))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -592))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-177
   (i64.store $sig-addr (i64.const 241012696070960000))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -588))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-176
   (i64.store $sig-addr (i64.const 4912951888516087903))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -585))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-175
   (i64.store $sig-addr (i64.const 10752875879072497783))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -582))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-174
   (i64.store $sig-addr (i64.const 18052780867268010133))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -579))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-173
   (i64.store $sig-addr (i64.const 4365459014401424477))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -575))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-172
   (i64.store $sig-addr (i64.const 10068509786429168500))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -572))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-171
   (i64.store $sig-addr (i64.const 17197323251463848530))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -569))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-170
   (i64.store $sig-addr (i64.const 3830798004523823475))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -565))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-169
   (i64.store $sig-addr (i64.const 9400183524082167248))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -562))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-168
   (i64.store $sig-addr (i64.const 16361915423530096964))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -559))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-167
   (i64.store $sig-addr (i64.const 3308668112065228746))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -555))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-166
   (i64.store $sig-addr (i64.const 8747521158508923836))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -552))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-165
   (i64.store $sig-addr (i64.const 15546087466563542700))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -549))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-164
   (i64.store $sig-addr (i64.const 2798775638961132332))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -545))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-163
   (i64.store $sig-addr (i64.const 8110155567128803318))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -542))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-162
   (i64.store $sig-addr (i64.const 14749380477338392052))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -539))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-161
   (i64.store $sig-addr (i64.const 2300833770695413176))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -535))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-160
   (i64.store $sig-addr (i64.const 7487728231796654374))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -532))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-159
   (i64.store $sig-addr (i64.const 13971346308173205872))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -529))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-158
   (i64.store $sig-addr (i64.const 1814562414967171814))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -525))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-157
   (i64.store $sig-addr (i64.const 6879889037136352672))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -522))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-156
   (i64.store $sig-addr (i64.const 13211547314847828744))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -519))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-155
   (i64.store $sig-addr (i64.const 1339688044138811108))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -515))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-154
   (i64.store $sig-addr (i64.const 6286296073600901790))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -512))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-153
   (i64.store $sig-addr (i64.const 12469556110428515142))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -509))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-152
   (i64.store $sig-addr (i64.const 875943541376740107))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -505))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-151
   (i64.store $sig-addr (i64.const 5706615445148313038))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -502))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-150
   (i64.store $sig-addr (i64.const 11744955324862779202))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -499))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-149
   (i64.store $sig-addr (i64.const 423068050398155145))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -495))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-148
   (i64.store $sig-addr (i64.const 5140521081425081836))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -492))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-147
   (i64.store $sig-addr (i64.const 11037337370208740198))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -489))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-146
   (i64.store $sig-addr (i64.const 18408357731188313152))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -486))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-145
   (i64.store $sig-addr (i64.const 4587694554351613864))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -482))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-144
   (i64.store $sig-addr (i64.const 10346304211366905234))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -479))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-143
   (i64.store $sig-addr (i64.const 17544566282636019446))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -476))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-142
   (i64.store $sig-addr (i64.const 4047824899006430298))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -472))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-141
   (i64.store $sig-addr (i64.const 9671467142185425776))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -469))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-140
   (i64.store $sig-addr (i64.const 16701019946159170124))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -466))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-139
   (i64.store $sig-addr (i64.const 3520608438708399472))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -462))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-138
   (i64.store $sig-addr (i64.const 9012446566812887244))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -459))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-137
   (i64.store $sig-addr (i64.const 15877244226943496958))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -456))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-136
   (i64.store $sig-addr (i64.const 3005748614198603743))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -452))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-135
   (i64.store $sig-addr (i64.const 8368871786175642583))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -449))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-134
   (i64.store $sig-addr (i64.const 15072775751146941132))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -446))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-133
   (i64.store $sig-addr (i64.const 2502955816825756352))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -442))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-132
   (i64.store $sig-addr (i64.const 7740380789459583344))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -439))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-131
   (i64.store $sig-addr (i64.const 14287162005251867084))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -436))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-130
   (i64.store $sig-addr (i64.const 2011947225641335072))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -432))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-129
   (i64.store $sig-addr (i64.const 7126620050479056743))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -429))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-128
   (i64.store $sig-addr (i64.const 13519961081526208833))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -426))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-127
   (i64.store $sig-addr (i64.const 1532446648312798664))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -422))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-126
   (i64.store $sig-addr (i64.const 6527244328818386235))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -419))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-125
   (i64.store $sig-addr (i64.const 12770741429450370698))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -416))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-124
   (i64.store $sig-addr (i64.const 1064184365765399830))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -412))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-123
   (i64.store $sig-addr (i64.const 5941916475634137692))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -409))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-122
   (i64.store $sig-addr (i64.const 12039081612970060018))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -406))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-121
   (i64.store $sig-addr (i64.const 606896980465205656))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -402))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-120
   (i64.store $sig-addr (i64.const 5370307244008894974))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -399))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-119
   (i64.store $sig-addr (i64.const 11324570073438506620))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -396))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-118
   (i64.store $sig-addr (i64.const 160327268257984782))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -392))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-117
   (i64.store $sig-addr (i64.const 4812095103749868882))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -389))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-116
   (i64.store $sig-addr (i64.const 10626804898114724006))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -386))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-115
   (i64.store $sig-addr (i64.const 17895192141070792911))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -383))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-114
   (i64.store $sig-addr (i64.const 4266966060528163714))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -379))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-113
   (i64.store $sig-addr (i64.const 9945393594087592546))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -376))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-112
   (i64.store $sig-addr (i64.const 17043428011036878586))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -373))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-111
   (i64.store $sig-addr (i64.const 3734613479256967260))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -369))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-110
   (i64.store $sig-addr (i64.const 9279952867498596980))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -366))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-109
   (i64.store $sig-addr (i64.const 16211627102800634128))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -363))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-108
   (i64.store $sig-addr (i64.const 3214737911609314474))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -359))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-107
   (i64.store $sig-addr (i64.const 8630108407939030997))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -356))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-106
   (i64.store $sig-addr (i64.const 15399321528351176650))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -353))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-105
   (i64.store $sig-addr (i64.const 2707046927578403550))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -349))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-104
   (i64.store $sig-addr (i64.const 7995494677900392342))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -346))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-103
   (i64.store $sig-addr (i64.const 14606054365802878332))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -343))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-102
   (i64.store $sig-addr (i64.const 2211254950985717101))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -339))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-101
   (i64.store $sig-addr (i64.const 7375754707159534280))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -336))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-100
   (i64.store $sig-addr (i64.const 13831379402376805754))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -333))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-99
   (i64.store $sig-addr (i64.const 1727083098844421740))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -329))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-98
   (i64.store $sig-addr (i64.const 6770539891982915080))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -326))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-97
   (i64.store $sig-addr (i64.const 13074860883406031754))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -323))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-96
   (i64.store $sig-addr (i64.const 1254259024487687990))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -319))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-95
   (i64.store $sig-addr (i64.const 6179509799036997892))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -316))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-94
   (i64.store $sig-addr (i64.const 12336073267223635268))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -313))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-93
   (i64.store $sig-addr (i64.const 792516764373690186))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -309))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-92
   (i64.store $sig-addr (i64.const 5602331973894500638))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -306))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-91
   (i64.store $sig-addr (i64.const 11614600985795513700))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -303))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-90
   (i64.store $sig-addr (i64.const 341596588481114207))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -299))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-89
   (i64.store $sig-addr (i64.const 5038681754028780662))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -296))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-88
   (i64.store $sig-addr (i64.const 10910038210963363732))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -293))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-87
   (i64.store $sig-addr (i64.const 18249233782131592570))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -290))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-86
   (i64.store $sig-addr (i64.const 4488242086191163500))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -286))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-85
   (i64.store $sig-addr (i64.const 10221988626166342279))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -283))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-84
   (i64.store $sig-addr (i64.const 17389171801135315752))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -280))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-83
   (i64.store $sig-addr (i64.const 3950703348068490490))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -276))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-82
   (i64.store $sig-addr (i64.const 9550065203513001016))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -273))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-81
   (i64.store $sig-addr (i64.const 16549267522818639174))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -270))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-80
   (i64.store $sig-addr (i64.const 3425763174120567628))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -266))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-79
   (i64.store $sig-addr (i64.const 8893889986078097438))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -263))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-78
   (i64.store $sig-addr (i64.const 15729048501025009702))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -260))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-77
   (i64.store $sig-addr (i64.const 2913126285499549208))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -256))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-76
   (i64.store $sig-addr (i64.const 8253093875301824414))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -253))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-75
   (i64.store $sig-addr (i64.const 14928053362554668421))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -250))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-74
   (i64.store $sig-addr (i64.const 2412504323955585907))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -246))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-73
   (i64.store $sig-addr (i64.const 7627316423371870288))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -243))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-72
   (i64.store $sig-addr (i64.const 14145831547642225764))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -240))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-71
   (i64.store $sig-addr (i64.const 1923615689635309246))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -236))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-70
   (i64.store $sig-addr (i64.const 7016205630471524462))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -233))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-69
   (i64.store $sig-addr (i64.const 13381943056516793482))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -230))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-68
   (i64.store $sig-addr (i64.const 1446185382681914070))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -226))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-67
   (i64.store $sig-addr (i64.const 6419417746779780492))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -223))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-66
   (i64.store $sig-addr (i64.const 12635958201902113518))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -220))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-65
   (i64.store $sig-addr (i64.const 979944848547739093))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -216))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-64
   (i64.store $sig-addr (i64.const 5836617079112061770))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -213))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-63
   (i64.store $sig-addr (i64.const 11907457367317465117))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -210))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-62
   (i64.store $sig-addr (i64.const 524631826932333842))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -206))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-61
   (i64.store $sig-addr (i64.const 5267475802092805206))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -203))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-60
   (i64.store $sig-addr (i64.const 11196030771043394412))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -200))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-59
   (i64.store $sig-addr (i64.const 79990204261039652))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -196))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-58
   (i64.store $sig-addr (i64.const 4711673773753687468))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -193))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-57
   (i64.store $sig-addr (i64.const 10501278235619497240))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -190))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-56
   (i64.store $sig-addr (i64.const 17738283812951759454))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -187))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-55
   (i64.store $sig-addr (i64.const 4168898355453767802))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -183))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-54
   (i64.store $sig-addr (i64.const 9822808962744597657))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -180))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-53
   (i64.store $sig-addr (i64.const 16890197221858134976))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -177))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-52
   (i64.store $sig-addr (i64.const 3638844236020252504))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -173))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-51
   (i64.store $sig-addr (i64.const 9160241313452703534))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -170))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-50
   (i64.store $sig-addr (i64.const 16061987660243267321))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -167))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-49
   (i64.store $sig-addr (i64.const 3121213260010960220))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -163))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-48
   (i64.store $sig-addr (i64.const 8513202593441088178))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -160))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-47
   (i64.store $sig-addr (i64.const 15253189260228748127))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -157))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-46
   (i64.store $sig-addr (i64.const 2615714260001885724))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -153))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-45
   (i64.store $sig-addr (i64.const 7881328843429745058))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -150))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-44
   (i64.store $sig-addr (i64.const 14463347072714569227))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -147))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-43
   (i64.store $sig-addr (i64.const 2122062892805523910))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -143))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-42
   (i64.store $sig-addr (i64.const 7264264634434292792))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -140))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-41
   (i64.store $sig-addr (i64.const 13692016811470253894))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -137))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-40
   (i64.store $sig-addr (i64.const 1639981479527826828))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -133))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-39
   (i64.store $sig-addr (i64.const 6661662867837171439))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -130))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-38
   (i64.store $sig-addr (i64.const 12938764603223852203))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -127))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-37
   (i64.store $sig-addr (i64.const 1169198849373825770))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -123))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-36
   (i64.store $sig-addr (i64.const 6073184580144670118))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -120))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-35
   (i64.store $sig-addr (i64.const 12203166743608225551))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -117))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-34
   (i64.store $sig-addr (i64.const 709450187114059113))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -113))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-33
   (i64.store $sig-addr (i64.const 5498498752319961796))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -110))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-32
   (i64.store $sig-addr (i64.const 11484809458827340148))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -107))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-31
   (i64.store $sig-addr (i64.const 260476884126005737))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -103))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-30
   (i64.store $sig-addr (i64.const 4937282123584895075))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -100))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-29
   (i64.store $sig-addr (i64.const 10783288672908506748))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -97))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-28
   (i64.store $sig-addr (i64.const 18090796859563021339))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -94))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-27
   (i64.store $sig-addr (i64.const 4389219009585806480))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -90))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-26
   (i64.store $sig-addr (i64.const 10098209780409646005))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -87))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-25
   (i64.store $sig-addr (i64.const 17234448243939445410))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -84))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-24
   (i64.store $sig-addr (i64.const 3854001124821071526))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -80))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-23
   (i64.store $sig-addr (i64.const 9429187424453727310))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -77))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-22
   (i64.store $sig-addr (i64.const 16398170298994547042))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -74))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-21
   (i64.store $sig-addr (i64.const 3331327409230510046))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -70))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-20
   (i64.store $sig-addr (i64.const 8775845279965525461))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -67))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-19
   (i64.store $sig-addr (i64.const 15581492618384294730))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -64))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-18
   (i64.store $sig-addr (i64.const 2820903858849102350))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -60))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-17
   (i64.store $sig-addr (i64.const 8137815841988765842))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -57))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-16
   (i64.store $sig-addr (i64.const 14783955820913345206))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -54))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-15
   (i64.store $sig-addr (i64.const 2322443360429758898))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -50))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-14
   (i64.store $sig-addr (i64.const 7514740218964586526))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -47))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-13
   (i64.store $sig-addr (i64.const 14005111292133121062))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -44))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-12
   (i64.store $sig-addr (i64.const 1835665529942118808))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -40))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-11
   (i64.store $sig-addr (i64.const 6906267930855036414))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -37))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-10
   (i64.store $sig-addr (i64.const 13244520931996183421))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -34))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-9
   (i64.store $sig-addr (i64.const 1360296554856532782))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -30))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-8
   (i64.store $sig-addr (i64.const 6312056711998053882))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -27))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-7
   (i64.store $sig-addr (i64.const 12501756908424955256))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -24))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-6
   (i64.store $sig-addr (i64.const 896069040124515179))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -20))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-5
   (i64.store $sig-addr (i64.const 5731772318583031878))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -17))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-4
   (i64.store $sig-addr (i64.const 11776401416656177752))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -14))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-3
   (i64.store $sig-addr (i64.const 442721857769029238))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -10))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-2
   (i64.store $sig-addr (i64.const 5165088340638674452))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -7))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-1
   (i64.store $sig-addr (i64.const 11068046444225730970))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -4))
   (%incr-n i32 $exp-addr 4)

   ;; 10**0
   (i64.store $sig-addr (i64.const 0))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 0))
   (%incr-n i32 $exp-addr 4)

   ;; 10**1
   (i64.store $sig-addr (i64.const 4611686018427387904))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 3))
   (%incr-n i32 $exp-addr 4)

   ;; 10**2
   (i64.store $sig-addr (i64.const 10376293541461622784))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 6))
   (%incr-n i32 $exp-addr 4)

   ;; 10**3
   (i64.store $sig-addr (i64.const 17582052945254416384))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 9))
   (%incr-n i32 $exp-addr 4)

   ;; 10**4
   (i64.store $sig-addr (i64.const 4071254063142928384))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 13))
   (%incr-n i32 $exp-addr 4)

   ;; 10**5
   (i64.store $sig-addr (i64.const 9700753597356048384))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 16))
   (%incr-n i32 $exp-addr 4)

   ;; 10**6
   (i64.store $sig-addr (i64.const 16737628015122448384))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 19))
   (%incr-n i32 $exp-addr 4)

   ;; 10**7
   (i64.store $sig-addr (i64.const 3543488481810448384))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 23))
   (%incr-n i32 $exp-addr 4)

   ;; 10**8
   (i64.store $sig-addr (i64.const 9041046620690448384))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 26))
   (%incr-n i32 $exp-addr 4)

   ;; 10**9
   (i64.store $sig-addr (i64.const 15912994294290448384))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 29))
   (%incr-n i32 $exp-addr 4)

   ;; 10**10
   (i64.store $sig-addr (i64.const 3028092406290448384))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 33))
   (%incr-n i32 $exp-addr 4)

   ;; 10**11
   (i64.store $sig-addr (i64.const 8396801526290448384))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 36))
   (%incr-n i32 $exp-addr 4)

   ;; 10**12
   (i64.store $sig-addr (i64.const 15107687926290448384))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 39))
   (%incr-n i32 $exp-addr 4)

   ;; 10**13
   (i64.store $sig-addr (i64.const 2524775926290448384))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 43))
   (%incr-n i32 $exp-addr 4)

   ;; 10**14
   (i64.store $sig-addr (i64.const 7767655926290448384))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 46))
   (%incr-n i32 $exp-addr 4)

   ;; 10**15
   (i64.store $sig-addr (i64.const 14321255926290448384))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 49))
   (%incr-n i32 $exp-addr 4)

   ;; 10**16
   (i64.store $sig-addr (i64.const 2033255926290448384))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 53))
   (%incr-n i32 $exp-addr 4)

   ;; 10**17
   (i64.store $sig-addr (i64.const 7153255926290448384))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 56))
   (%incr-n i32 $exp-addr 4)

   ;; 10**18
   (i64.store $sig-addr (i64.const 13553255926290448384))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 59))
   (%incr-n i32 $exp-addr 4)

   ;; 10**19
   (i64.store $sig-addr (i64.const 1553255926290448384))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 63))
   (%incr-n i32 $exp-addr 4)

   ;; 10**20
   (i64.store $sig-addr (i64.const 6553255926290448384))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 66))
   (%incr-n i32 $exp-addr 4)

   ;; 10**21
   (i64.store $sig-addr (i64.const 12803255926290448384))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 69))
   (%incr-n i32 $exp-addr 4)

   ;; 10**22
   (i64.store $sig-addr (i64.const 1084505926290448384))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 73))
   (%incr-n i32 $exp-addr 4)

   ;; 10**23
   (i64.store $sig-addr (i64.const 5967318426290448384))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 76))
   (%incr-n i32 $exp-addr 4)

   ;; 10**24
   (i64.store $sig-addr (i64.const 12070834051290448384))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 79))
   (%incr-n i32 $exp-addr 4)

   ;; 10**25
   (i64.store $sig-addr (i64.const 626742254415448384))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 83))
   (%incr-n i32 $exp-addr 4)

   ;; 10**26
   (i64.store $sig-addr (i64.const 5395113836446698384))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 86))
   (%incr-n i32 $exp-addr 4)

   ;; 10**27
   (i64.store $sig-addr (i64.const 11355578313985760884))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 89))
   (%incr-n i32 $exp-addr 4)

   ;; 10**28
   (i64.store $sig-addr (i64.const 179707418600018696))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 93))
   (%incr-n i32 $exp-addr 4)

   ;; 10**29
   (i64.store $sig-addr (i64.const 4836320291677411274))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 96))
   (%incr-n i32 $exp-addr 4)

   ;; 10**30
   (i64.store $sig-addr (i64.const 10657086383024151997))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 99))
   (%incr-n i32 $exp-addr 4)

   ;; 10**31
   (i64.store $sig-addr (i64.const 17933043997207577900))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 102))
   (%incr-n i32 $exp-addr 4)

   ;; 10**32
   (i64.store $sig-addr (i64.const 4290623470613654332))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 106))
   (%incr-n i32 $exp-addr 4)

   ;; 10**33
   (i64.store $sig-addr (i64.const 9974965356694455818))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 109))
   (%incr-n i32 $exp-addr 4)

   ;; 10**34
   (i64.store $sig-addr (i64.const 17080392714295457678))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 112))
   (%incr-n i32 $exp-addr 4)

   ;; 10**35
   (i64.store $sig-addr (i64.const 3757716418793579192))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 116))
   (%incr-n i32 $exp-addr 4)

   ;; 10**36
   (i64.store $sig-addr (i64.const 9308831541919361894))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 119))
   (%incr-n i32 $exp-addr 4)

   ;; 10**37
   (i64.store $sig-addr (i64.const 16247725445826590272))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 122))
   (%incr-n i32 $exp-addr 4)

   ;; 10**38
   (i64.store $sig-addr (i64.const 3237299376000537064))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 126))
   (%incr-n i32 $exp-addr 4)

   ;; 10**39
   (i64.store $sig-addr (i64.const 8658310238428059234))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 129))
   (%incr-n i32 $exp-addr 4)

   ;; 10**40
   (i64.store $sig-addr (i64.const 15434573816462461946))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 132))
   (%incr-n i32 $exp-addr 4)

   ;; 10**41
   (i64.store $sig-addr (i64.const 2729079607647956860))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 136))
   (%incr-n i32 $exp-addr 4)

   ;; 10**42
   (i64.store $sig-addr (i64.const 8023035527987333980))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 139))
   (%incr-n i32 $exp-addr 4)

   ;; 10**43
   (i64.store $sig-addr (i64.const 14640480428411555378))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 142))
   (%incr-n i32 $exp-addr 4)

   ;; 10**44
   (i64.store $sig-addr (i64.const 2232771240116140256))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 146))
   (%incr-n i32 $exp-addr 4)

   ;; 10**45
   (i64.store $sig-addr (i64.const 7402650068572563224))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 149))
   (%incr-n i32 $exp-addr 4)

   ;; 10**46
   (i64.store $sig-addr (i64.const 13864998604143091934))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 152))
   (%incr-n i32 $exp-addr 4)

   ;; 10**47
   (i64.store $sig-addr (i64.const 1748095099948350602))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 156))
   (%incr-n i32 $exp-addr 4)

   ;; 10**48
   (i64.store $sig-addr (i64.const 6796804893362826157))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 159))
   (%incr-n i32 $exp-addr 4)

   ;; 10**49
   (i64.store $sig-addr (i64.const 13107692135130920600))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 162))
   (%incr-n i32 $exp-addr 4)

   ;; 10**50
   (i64.store $sig-addr (i64.const 1274778556815743519))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 166))
   (%incr-n i32 $exp-addr 4)

   ;; 10**51
   (i64.store $sig-addr (i64.const 6205159214447067303))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 169))
   (%incr-n i32 $exp-addr 4)

   ;; 10**52
   (i64.store $sig-addr (i64.const 12368135036486222032))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 172))
   (%incr-n i32 $exp-addr 4)

   ;; 10**53
   (i64.store $sig-addr (i64.const 812555370162806914))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 176))
   (%incr-n i32 $exp-addr 4)

   ;; 10**54
   (i64.store $sig-addr (i64.const 5627380231130896547))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 179))
   (%incr-n i32 $exp-addr 4)

   ;; 10**55
   (i64.store $sig-addr (i64.const 11645911307341008588))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 182))
   (%incr-n i32 $exp-addr 4)

   ;; 10**56
   (i64.store $sig-addr (i64.const 361165539447048511))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 186))
   (%incr-n i32 $exp-addr 4)

   ;; 10**57
   (i64.store $sig-addr (i64.const 5063142942736198543))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 189))
   (%incr-n i32 $exp-addr 4)

   ;; 10**58
   (i64.store $sig-addr (i64.const 10940614696847636083))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 192))
   (%incr-n i32 $exp-addr 4)

   ;; 10**59
   (i64.store $sig-addr (i64.const 18287454389486933008))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 195))
   (%incr-n i32 $exp-addr 4)

   ;; 10**60
   (i64.store $sig-addr (i64.const 4512129965788251274))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 199))
   (%incr-n i32 $exp-addr 4)

   ;; 10**61
   (i64.store $sig-addr (i64.const 10251848475662701996))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 202))
   (%incr-n i32 $exp-addr 4)

   ;; 10**62
   (i64.store $sig-addr (i64.const 17426496613005765400))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 205))
   (%incr-n i32 $exp-addr 4)

   ;; 10**63
   (i64.store $sig-addr (i64.const 3974031355487521518))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 209))
   (%incr-n i32 $exp-addr 4)

   ;; 10**64
   (i64.store $sig-addr (i64.const 9579225212786789802))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 212))
   (%incr-n i32 $exp-addr 4)

   ;; 10**65
   (i64.store $sig-addr (i64.const 16585717534410875157))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 215))
   (%incr-n i32 $exp-addr 4)

   ;; 10**66
   (i64.store $sig-addr (i64.const 3448544431365715117))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 219))
   (%incr-n i32 $exp-addr 4)

   ;; 10**67
   (i64.store $sig-addr (i64.const 8922366557634531800))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 222))
   (%incr-n i32 $exp-addr 4)

   ;; 10**68
   (i64.store $sig-addr (i64.const 15764644215470552654))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 225))
   (%incr-n i32 $exp-addr 4)

   ;; 10**69
   (i64.store $sig-addr (i64.const 2935373607028013553))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 229))
   (%incr-n i32 $exp-addr 4)

   ;; 10**70
   (i64.store $sig-addr (i64.const 8280903027212404845))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 232))
   (%incr-n i32 $exp-addr 4)

   ;; 10**71
   (i64.store $sig-addr (i64.const 14962814802442893960))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 235))
   (%incr-n i32 $exp-addr 4)

   ;; 10**72
   (i64.store $sig-addr (i64.const 2434230223885726869))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 239))
   (%incr-n i32 $exp-addr 4)

   ;; 10**73
   (i64.store $sig-addr (i64.const 7654473798284546490))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 242))
   (%incr-n i32 $exp-addr 4)

   ;; 10**74
   (i64.store $sig-addr (i64.const 14179778266283071018))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 245))
   (%incr-n i32 $exp-addr 4)

   ;; 10**75
   (i64.store $sig-addr (i64.const 1944832388785837530))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 249))
   (%incr-n i32 $exp-addr 4)

   ;; 10**76
   (i64.store $sig-addr (i64.const 7042726504409684816))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 252))
   (%incr-n i32 $exp-addr 4)

   ;; 10**77
   (i64.store $sig-addr (i64.const 13415094148939493924))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 255))
   (%incr-n i32 $exp-addr 4)

   ;; 10**78
   (i64.store $sig-addr (i64.const 1466904815446101846))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 259))
   (%incr-n i32 $exp-addr 4)

   ;; 10**79
   (i64.store $sig-addr (i64.const 6445317037735015212))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 262))
   (%incr-n i32 $exp-addr 4)

   ;; 10**80
   (i64.store $sig-addr (i64.const 12668332315596156920))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 265))
   (%incr-n i32 $exp-addr 4)

   ;; 10**81
   (i64.store $sig-addr (i64.const 1000178669606516218))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 269))
   (%incr-n i32 $exp-addr 4)

   ;; 10**82
   (i64.store $sig-addr (i64.const 5861909355435533178))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 272))
   (%incr-n i32 $exp-addr 4)

   ;; 10**83
   (i64.store $sig-addr (i64.const 11939072712721804376))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 275))
   (%incr-n i32 $exp-addr 4)

   ;; 10**84
   (i64.store $sig-addr (i64.const 544391417810045878))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 279))
   (%incr-n i32 $exp-addr 4)

   ;; 10**85
   (i64.store $sig-addr (i64.const 5292175290689945252))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 282))
   (%incr-n i32 $exp-addr 4)

   ;; 10**86
   (i64.store $sig-addr (i64.const 11226905131789819470))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 285))
   (%incr-n i32 $exp-addr 4)

   ;; 10**87
   (i64.store $sig-addr (i64.const 99286679727555312))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 289))
   (%incr-n i32 $exp-addr 4)

   ;; 10**88
   (i64.store $sig-addr (i64.const 4735794368086832044))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 292))
   (%incr-n i32 $exp-addr 4)

   ;; 10**89
   (i64.store $sig-addr (i64.const 10531428978535927960))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 295))
   (%incr-n i32 $exp-addr 4)

   ;; 10**90
   (i64.store $sig-addr (i64.const 17775972241597297854))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 298))
   (%incr-n i32 $exp-addr 4)

   ;; 10**91
   (i64.store $sig-addr (i64.const 4192453623357229302))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 302))
   (%incr-n i32 $exp-addr 4)

   ;; 10**92
   (i64.store $sig-addr (i64.const 9852253047623924532))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 305))
   (%incr-n i32 $exp-addr 4)

   ;; 10**93
   (i64.store $sig-addr (i64.const 16927002327957293570))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 308))
   (%incr-n i32 $exp-addr 4)

   ;; 10**94
   (i64.store $sig-addr (i64.const 3661847427332226624))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 312))
   (%incr-n i32 $exp-addr 4)

   ;; 10**95
   (i64.store $sig-addr (i64.const 9188995302592671185))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 315))
   (%incr-n i32 $exp-addr 4)

   ;; 10**96
   (i64.store $sig-addr (i64.const 16097930146668226886))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 318))
   (%incr-n i32 $exp-addr 4)

   ;; 10**97
   (i64.store $sig-addr (i64.const 3143677314026559947))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 322))
   (%incr-n i32 $exp-addr 4)

   ;; 10**98
   (i64.store $sig-addr (i64.const 8541282660960587838))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 325))
   (%incr-n i32 $exp-addr 4)

   ;; 10**99
   (i64.store $sig-addr (i64.const 15288289344628122702))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 328))
   (%incr-n i32 $exp-addr 4)

   ;; 10**100
   (i64.store $sig-addr (i64.const 2637651812751494832))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 332))
   (%incr-n i32 $exp-addr 4)

   ;; 10**101
   (i64.store $sig-addr (i64.const 7908750784366756444))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 335))
   (%incr-n i32 $exp-addr 4)

   ;; 10**102
   (i64.store $sig-addr (i64.const 14497624498885833460))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 338))
   (%incr-n i32 $exp-addr 4)

   ;; 10**103
   (i64.store $sig-addr (i64.const 2143486284162564056))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 342))
   (%incr-n i32 $exp-addr 4)

   ;; 10**104
   (i64.store $sig-addr (i64.const 7291043873630592974))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 345))
   (%incr-n i32 $exp-addr 4)

   ;; 10**105
   (i64.store $sig-addr (i64.const 13725490860465629122))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 348))
   (%incr-n i32 $exp-addr 4)

   ;; 10**106
   (i64.store $sig-addr (i64.const 1660902760149936345))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 352))
   (%incr-n i32 $exp-addr 4)

   ;; 10**107
   (i64.store $sig-addr (i64.const 6687814468614808336))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 355))
   (%incr-n i32 $exp-addr 4)

   ;; 10**108
   (i64.store $sig-addr (i64.const 12971454104195898324))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 358))
   (%incr-n i32 $exp-addr 4)

   ;; 10**109
   (i64.store $sig-addr (i64.const 1189629787481354596))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 362))
   (%incr-n i32 $exp-addr 4)

   ;; 10**110
   (i64.store $sig-addr (i64.const 6098723252779081149))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 365))
   (%incr-n i32 $exp-addr 4)

   ;; 10**111
   (i64.store $sig-addr (i64.const 12235090084401239340))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 368))
   (%incr-n i32 $exp-addr 4)

   ;; 10**112
   (i64.store $sig-addr (i64.const 729402275109692732))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 372))
   (%incr-n i32 $exp-addr 4)

   ;; 10**113
   (i64.store $sig-addr (i64.const 5523438862314503819))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 375))
   (%incr-n i32 $exp-addr 4)

   ;; 10**114
   (i64.store $sig-addr (i64.const 11515984596320517678))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 378))
   (%incr-n i32 $exp-addr 4)

   ;; 10**115
   (i64.store $sig-addr (i64.const 279961345059241692))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 382))
   (%incr-n i32 $exp-addr 4)

   ;; 10**116
   (i64.store $sig-addr (i64.const 4961637699751440020))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 385))
   (%incr-n i32 $exp-addr 4)

   ;; 10**117
   (i64.store $sig-addr (i64.const 10813733143116687928))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 388))
   (%incr-n i32 $exp-addr 4)

   ;; 10**118
   (i64.store $sig-addr (i64.const 18128852447323247814))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 391))
   (%incr-n i32 $exp-addr 4)

   ;; 10**119
   (i64.store $sig-addr (i64.const 4413003751935948028))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 395))
   (%incr-n i32 $exp-addr 4)

   ;; 10**120
   (i64.store $sig-addr (i64.const 10127940708347322939))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 398))
   (%incr-n i32 $exp-addr 4)

   ;; 10**121
   (i64.store $sig-addr (i64.const 17271611903861541578))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 401))
   (%incr-n i32 $exp-addr 4)

   ;; 10**122
   (i64.store $sig-addr (i64.const 3877228412272381630))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 405))
   (%incr-n i32 $exp-addr 4)

   ;; 10**123
   (i64.store $sig-addr (i64.const 9458221533767864942))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 408))
   (%incr-n i32 $exp-addr 4)

   ;; 10**124
   (i64.store $sig-addr (i64.const 16434462935637219082))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 411))
   (%incr-n i32 $exp-addr 4)

   ;; 10**125
   (i64.store $sig-addr (i64.const 3354010307132180070))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 415))
   (%incr-n i32 $exp-addr 4)

   ;; 10**126
   (i64.store $sig-addr (i64.const 8804198902342612991))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 418))
   (%incr-n i32 $exp-addr 4)

   ;; 10**127
   (i64.store $sig-addr (i64.const 15616934646355654143))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 421))
   (%incr-n i32 $exp-addr 4)

   ;; 10**128
   (i64.store $sig-addr (i64.const 2843055126331201984))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 425))
   (%incr-n i32 $exp-addr 4)

   ;; 10**129
   (i64.store $sig-addr (i64.const 8165504926341390383))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 428))
   (%incr-n i32 $exp-addr 4)

   ;; 10**130
   (i64.store $sig-addr (i64.const 14818567176354125883))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 431))
   (%incr-n i32 $exp-addr 4)

   ;; 10**131
   (i64.store $sig-addr (i64.const 2344075457580246821))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 435))
   (%incr-n i32 $exp-addr 4)

   ;; 10**132
   (i64.store $sig-addr (i64.const 7541780340402696430))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 438))
   (%incr-n i32 $exp-addr 4)

   ;; 10**133
   (i64.store $sig-addr (i64.const 14038911443930758442))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 441))
   (%incr-n i32 $exp-addr 4)

   ;; 10**134
   (i64.store $sig-addr (i64.const 1856790624815642170))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 445))
   (%incr-n i32 $exp-addr 4)

   ;; 10**135
   (i64.store $sig-addr (i64.const 6932674299446940616))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 448))
   (%incr-n i32 $exp-addr 4)

   ;; 10**136
   (i64.store $sig-addr (i64.const 13277528892736063674))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 451))
   (%incr-n i32 $exp-addr 4)

   ;; 10**137
   (i64.store $sig-addr (i64.const 1380926530318957940))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 455))
   (%incr-n i32 $exp-addr 4)

   ;; 10**138
   (i64.store $sig-addr (i64.const 6337844181326085330))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 458))
   (%incr-n i32 $exp-addr 4)

   ;; 10**139
   (i64.store $sig-addr (i64.const 12533991245084994566))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 461))
   (%incr-n i32 $exp-addr 4)

   ;; 10**140
   (i64.store $sig-addr (i64.const 916215500537039748))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 465))
   (%incr-n i32 $exp-addr 4)

   ;; 10**141
   (i64.store $sig-addr (i64.const 5756955394098687589))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 468))
   (%incr-n i32 $exp-addr 4)

   ;; 10**142
   (i64.store $sig-addr (i64.const 11807880261050747390))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 471))
   (%incr-n i32 $exp-addr 4)

   ;; 10**143
   (i64.store $sig-addr (i64.const 462396135515635262))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 475))
   (%incr-n i32 $exp-addr 4)

   ;; 10**144
   (i64.store $sig-addr (i64.const 5189681187821931982))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 478))
   (%incr-n i32 $exp-addr 4)

   ;; 10**145
   (i64.store $sig-addr (i64.const 11098787503204802882))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 481))
   (%incr-n i32 $exp-addr 4)

   ;; 10**146
   (i64.store $sig-addr (i64.const 19213161861919946))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 485))
   (%incr-n i32 $exp-addr 4)

   ;; 10**147
   (i64.store $sig-addr (i64.const 4635702470754787836))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 488))
   (%incr-n i32 $exp-addr 4)

   ;; 10**148
   (i64.store $sig-addr (i64.const 10406314106870872698))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 491))
   (%incr-n i32 $exp-addr 4)

   ;; 10**149
   (i64.store $sig-addr (i64.const 17619578652015978778))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 494))
   (%incr-n i32 $exp-addr 4)

   ;; 10**150
   (i64.store $sig-addr (i64.const 4094707629868904880))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 498))
   (%incr-n i32 $exp-addr 4)

   ;; 10**151
   (i64.store $sig-addr (i64.const 9730070555763519004))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 501))
   (%incr-n i32 $exp-addr 4)

   ;; 10**152
   (i64.store $sig-addr (i64.const 16774274213131786658))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 504))
   (%incr-n i32 $exp-addr 4)

   ;; 10**153
   (i64.store $sig-addr (i64.const 3566392355566284806))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 508))
   (%incr-n i32 $exp-addr 4)

   ;; 10**154
   (i64.store $sig-addr (i64.const 9069676462885243911))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 511))
   (%incr-n i32 $exp-addr 4)

   ;; 10**155
   (i64.store $sig-addr (i64.const 15948781597033942793))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 514))
   (%incr-n i32 $exp-addr 4)

   ;; 10**156
   (i64.store $sig-addr (i64.const 3050459470505132390))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 518))
   (%incr-n i32 $exp-addr 4)

   ;; 10**157
   (i64.store $sig-addr (i64.const 8424760356558803391))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 521))
   (%incr-n i32 $exp-addr 4)

   ;; 10**158
   (i64.store $sig-addr (i64.const 15142636464125892142))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 524))
   (%incr-n i32 $exp-addr 4)

   ;; 10**159
   (i64.store $sig-addr (i64.const 2546618762437600733))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 528))
   (%incr-n i32 $exp-addr 4)

   ;; 10**160
   (i64.store $sig-addr (i64.const 7794959471474388820))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 531))
   (%incr-n i32 $exp-addr 4)

   ;; 10**161
   (i64.store $sig-addr (i64.const 14355385357770373930))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 534))
   (%incr-n i32 $exp-addr 4)

   ;; 10**162
   (i64.store $sig-addr (i64.const 2054586820965401850))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 538))
   (%incr-n i32 $exp-addr 4)

   ;; 10**163
   (i64.store $sig-addr (i64.const 7179919544634140216))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 541))
   (%incr-n i32 $exp-addr 4)

   ;; 10**164
   (i64.store $sig-addr (i64.const 13586585449220063174))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 544))
   (%incr-n i32 $exp-addr 4)

   ;; 10**165
   (i64.store $sig-addr (i64.const 1574086878121457628))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 548))
   (%incr-n i32 $exp-addr 4)

   ;; 10**166
   (i64.store $sig-addr (i64.const 6579294616079209939))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 551))
   (%incr-n i32 $exp-addr 4)

   ;; 10**167
   (i64.store $sig-addr (i64.const 12835804288526400328))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 554))
   (%incr-n i32 $exp-addr 4)

   ;; 10**168
   (i64.store $sig-addr (i64.const 1104848652687918349))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 558))
   (%incr-n i32 $exp-addr 4)

   ;; 10**169
   (i64.store $sig-addr (i64.const 5992746834287285840))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 561))
   (%incr-n i32 $exp-addr 4)

   ;; 10**170
   (i64.store $sig-addr (i64.const 12102619561286495204))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 564))
   (%incr-n i32 $exp-addr 4)

   ;; 10**171
   (i64.store $sig-addr (i64.const 646608198162977646))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 568))
   (%incr-n i32 $exp-addr 4)

   ;; 10**172
   (i64.store $sig-addr (i64.const 5419946266131109962))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 571))
   (%incr-n i32 $exp-addr 4)

   ;; 10**173
   (i64.store $sig-addr (i64.const 11386618851091275357))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 574))
   (%incr-n i32 $exp-addr 4)

   ;; 10**174
   (i64.store $sig-addr (i64.const 199107754290965242))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 578))
   (%incr-n i32 $exp-addr 4)

   ;; 10**175
   (i64.store $sig-addr (i64.const 4860570711291094456))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 581))
   (%incr-n i32 $exp-addr 4)

   ;; 10**176
   (i64.store $sig-addr (i64.const 10687399407541255974))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 584))
   (%incr-n i32 $exp-addr 4)

   ;; 10**177
   (i64.store $sig-addr (i64.const 17970935277853957872))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 587))
   (%incr-n i32 $exp-addr 4)

   ;; 10**178
   (i64.store $sig-addr (i64.const 4314305521017641814))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 591))
   (%incr-n i32 $exp-addr 4)

   ;; 10**179
   (i64.store $sig-addr (i64.const 10004567919699440172))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 594))
   (%incr-n i32 $exp-addr 4)

   ;; 10**180
   (i64.store $sig-addr (i64.const 17117395918051688119))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 597))
   (%incr-n i32 $exp-addr 4)

   ;; 10**181
   (i64.store $sig-addr (i64.const 3780843421141223218))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 601))
   (%incr-n i32 $exp-addr 4)

   ;; 10**182
   (i64.store $sig-addr (i64.const 9337740294853916927))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 604))
   (%incr-n i32 $exp-addr 4)

   ;; 10**183
   (i64.store $sig-addr (i64.const 16283861386994784062))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 607))
   (%incr-n i32 $exp-addr 4)

   ;; 10**184
   (i64.store $sig-addr (i64.const 3259884339230658183))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 611))
   (%incr-n i32 $exp-addr 4)

   ;; 10**185
   (i64.store $sig-addr (i64.const 8686541442465710633))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 614))
   (%incr-n i32 $exp-addr 4)

   ;; 10**186
   (i64.store $sig-addr (i64.const 15469862821509526195))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 617))
   (%incr-n i32 $exp-addr 4)

   ;; 10**187
   (i64.store $sig-addr (i64.const 2751135235802372016))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 621))
   (%incr-n i32 $exp-addr 4)

   ;; 10**188
   (i64.store $sig-addr (i64.const 8050605063180352924))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 624))
   (%incr-n i32 $exp-addr 4)

   ;; 10**189
   (i64.store $sig-addr (i64.const 14674942347402829059))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 627))
   (%incr-n i32 $exp-addr 4)

   ;; 10**190
   (i64.store $sig-addr (i64.const 2254309939485686306))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 631))
   (%incr-n i32 $exp-addr 4)

   ;; 10**191
   (i64.store $sig-addr (i64.const 7429573442784495786))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 634))
   (%incr-n i32 $exp-addr 4)

   ;; 10**192
   (i64.store $sig-addr (i64.const 13898652821908007637))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 637))
   (%incr-n i32 $exp-addr 4)

   ;; 10**193
   (i64.store $sig-addr (i64.const 1769128986051422917))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 641))
   (%incr-n i32 $exp-addr 4)

   ;; 10**194
   (i64.store $sig-addr (i64.const 6823097250991666550))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 644))
   (%incr-n i32 $exp-addr 4)

   ;; 10**195
   (i64.store $sig-addr (i64.const 13140557582166971092))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 647))
   (%incr-n i32 $exp-addr 4)

   ;; 10**196
   (i64.store $sig-addr (i64.const 1295319461213275076))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 651))
   (%incr-n i32 $exp-addr 4)

   ;; 10**197
   (i64.store $sig-addr (i64.const 6230835344943981750))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 654))
   (%incr-n i32 $exp-addr 4)

   ;; 10**198
   (i64.store $sig-addr (i64.const 12400230199607365091))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 657))
   (%incr-n i32 $exp-addr 4)

   ;; 10**199
   (i64.store $sig-addr (i64.const 832614847113521326))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 661))
   (%incr-n i32 $exp-addr 4)

   ;; 10**200
   (i64.store $sig-addr (i64.const 5652454577319289561))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 664))
   (%incr-n i32 $exp-addr 4)

   ;; 10**201
   (i64.store $sig-addr (i64.const 11677254240076499856))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 667))
   (%incr-n i32 $exp-addr 4)

   ;; 10**202
   (i64.store $sig-addr (i64.const 380754872406730554))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 671))
   (%incr-n i32 $exp-addr 4)

   ;; 10**203
   (i64.store $sig-addr (i64.const 5087629608935801096))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 674))
   (%incr-n i32 $exp-addr 4)

   ;; 10**204
   (i64.store $sig-addr (i64.const 10971223029597139274))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 677))
   (%incr-n i32 $exp-addr 4)

   ;; 10**205
   (i64.store $sig-addr (i64.const 18325714805423811996))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 680))
   (%incr-n i32 $exp-addr 4)

   ;; 10**206
   (i64.store $sig-addr (i64.const 4536042725748800642))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 684))
   (%incr-n i32 $exp-addr 4)

   ;; 10**207
   (i64.store $sig-addr (i64.const 10281739425613388706))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 687))
   (%incr-n i32 $exp-addr 4)

   ;; 10**208
   (i64.store $sig-addr (i64.const 17463860300444123787))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 690))
   (%incr-n i32 $exp-addr 4)

   ;; 10**209
   (i64.store $sig-addr (i64.const 3997383660136495511))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 694))
   (%incr-n i32 $exp-addr 4)

   ;; 10**210
   (i64.store $sig-addr (i64.const 9608415593598007292))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 697))
   (%incr-n i32 $exp-addr 4)

   ;; 10**211
   (i64.store $sig-addr (i64.const 16622205510424897020))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 700))
   (%incr-n i32 $exp-addr 4)

   ;; 10**212
   (i64.store $sig-addr (i64.const 3471349416374478782))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 704))
   (%incr-n i32 $exp-addr 4)

   ;; 10**213
   (i64.store $sig-addr (i64.const 8950872788895486380))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 707))
   (%incr-n i32 $exp-addr 4)

   ;; 10**214
   (i64.store $sig-addr (i64.const 15800277004546745880))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 710))
   (%incr-n i32 $exp-addr 4)

   ;; 10**215
   (i64.store $sig-addr (i64.const 2957644100200634319))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 714))
   (%incr-n i32 $exp-addr 4)

   ;; 10**216
   (i64.store $sig-addr (i64.const 8308741143678180802))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 717))
   (%incr-n i32 $exp-addr 4)

   ;; 10**217
   (i64.store $sig-addr (i64.const 14997612448025113908))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 720))
   (%incr-n i32 $exp-addr 4)

   ;; 10**218
   (i64.store $sig-addr (i64.const 2455978752374614336))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 724))
   (%incr-n i32 $exp-addr 4)

   ;; 10**219
   (i64.store $sig-addr (i64.const 7681659458895655824))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 727))
   (%incr-n i32 $exp-addr 4)

   ;; 10**220
   (i64.store $sig-addr (i64.const 14213760342046957684))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 730))
   (%incr-n i32 $exp-addr 4)

   ;; 10**221
   (i64.store $sig-addr (i64.const 1966071186138266696))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 734))
   (%incr-n i32 $exp-addr 4)

   ;; 10**222
   (i64.store $sig-addr (i64.const 7069275001100221274))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 737))
   (%incr-n i32 $exp-addr 4)

   ;; 10**223
   (i64.store $sig-addr (i64.const 13448279769802664498))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 740))
   (%incr-n i32 $exp-addr 4)

   ;; 10**224
   (i64.store $sig-addr (i64.const 1487645828485583455))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 744))
   (%incr-n i32 $exp-addr 4)

   ;; 10**225
   (i64.store $sig-addr (i64.const 6471243304034367222))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 747))
   (%incr-n i32 $exp-addr 4)

   ;; 10**226
   (i64.store $sig-addr (i64.const 12700740148470346932))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 750))
   (%incr-n i32 $exp-addr 4)

   ;; 10**227
   (i64.store $sig-addr (i64.const 1020433565152884976))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 754))
   (%incr-n i32 $exp-addr 4)

   ;; 10**228
   (i64.store $sig-addr (i64.const 5887227974868494124))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 757))
   (%incr-n i32 $exp-addr 4)

   ;; 10**229
   (i64.store $sig-addr (i64.const 11970720987013005560))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 760))
   (%incr-n i32 $exp-addr 4)

   ;; 10**230
   (i64.store $sig-addr (i64.const 564171589242046619))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 764))
   (%incr-n i32 $exp-addr 4)

   ;; 10**231
   (i64.store $sig-addr (i64.const 5316900504979946178))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 767))
   (%incr-n i32 $exp-addr 4)

   ;; 10**232
   (i64.store $sig-addr (i64.const 11257811649652320626))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 770))
   (%incr-n i32 $exp-addr 4)

   ;; 10**233
   (i64.store $sig-addr (i64.const 118603253391618536))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 774))
   (%incr-n i32 $exp-addr 4)

   ;; 10**234
   (i64.store $sig-addr (i64.const 4759940085166911073))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 777))
   (%incr-n i32 $exp-addr 4)

   ;; 10**235
   (i64.store $sig-addr (i64.const 10561611124886026746))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 780))
   (%incr-n i32 $exp-addr 4)

   ;; 10**236
   (i64.store $sig-addr (i64.const 17813699924534921336))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 783))
   (%incr-n i32 $exp-addr 4)

   ;; 10**237
   (i64.store $sig-addr (i64.const 4216033425193243979))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 787))
   (%incr-n i32 $exp-addr 4)

   ;; 10**238
   (i64.store $sig-addr (i64.const 9881727799918942878))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 790))
   (%incr-n i32 $exp-addr 4)

   ;; 10**239
   (i64.store $sig-addr (i64.const 16963845768326066501))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 793))
   (%incr-n i32 $exp-addr 4)

   ;; 10**240
   (i64.store $sig-addr (i64.const 3684874577562709707))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 797))
   (%incr-n i32 $exp-addr 4)

   ;; 10**241
   (i64.store $sig-addr (i64.const 9217779240380775038))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 800))
   (%incr-n i32 $exp-addr 4)

   ;; 10**242
   (i64.store $sig-addr (i64.const 16133910068903356702))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 803))
   (%incr-n i32 $exp-addr 4)

   ;; 10**243
   (i64.store $sig-addr (i64.const 3166164765423516082))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 807))
   (%incr-n i32 $exp-addr 4)

   ;; 10**244
   (i64.store $sig-addr (i64.const 8569391975206783007))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 810))
   (%incr-n i32 $exp-addr 4)

   ;; 10**245
   (i64.store $sig-addr (i64.const 15323425987435866663))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 813))
   (%incr-n i32 $exp-addr 4)

   ;; 10**246
   (i64.store $sig-addr (i64.const 2659612214506334808))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 817))
   (%incr-n i32 $exp-addr 4)

   ;; 10**247
   (i64.store $sig-addr (i64.const 7936201286560306414))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 820))
   (%incr-n i32 $exp-addr 4)

   ;; 10**248
   (i64.store $sig-addr (i64.const 14531937626627770922))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 823))
   (%incr-n i32 $exp-addr 4)

   ;; 10**249
   (i64.store $sig-addr (i64.const 2164931989001274970))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 827))
   (%incr-n i32 $exp-addr 4)

   ;; 10**250
   (i64.store $sig-addr (i64.const 7317851004678981616))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 830))
   (%incr-n i32 $exp-addr 4)

   ;; 10**251
   (i64.store $sig-addr (i64.const 13758999774276114925))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 833))
   (%incr-n i32 $exp-addr 4)

   ;; 10**252
   (i64.store $sig-addr (i64.const 1681845831281489972))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 837))
   (%incr-n i32 $exp-addr 4)

   ;; 10**253
   (i64.store $sig-addr (i64.const 6713993307529250369))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 840))
   (%incr-n i32 $exp-addr 4)

   ;; 10**254
   (i64.store $sig-addr (i64.const 13004177652838950866))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 843))
   (%incr-n i32 $exp-addr 4)

   ;; 10**255
   (i64.store $sig-addr (i64.const 1210082005383262434))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 847))
   (%incr-n i32 $exp-addr 4)

   ;; 10**256
   (i64.store $sig-addr (i64.const 6124288525156465948))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 850))
   (%incr-n i32 $exp-addr 4)

   ;; 10**257
   (i64.store $sig-addr (i64.const 12267046674872970338))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 853))
   (%incr-n i32 $exp-addr 4)

   ;; 10**258
   (i64.store $sig-addr (i64.const 749375144154524606))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 857))
   (%incr-n i32 $exp-addr 4)

   ;; 10**259
   (i64.store $sig-addr (i64.const 5548404948620543661))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 860))
   (%incr-n i32 $exp-addr 4)

   ;; 10**260
   (i64.store $sig-addr (i64.const 11547192204203067480))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 863))
   (%incr-n i32 $exp-addr 4)

   ;; 10**261
   (i64.store $sig-addr (i64.const 299466099985835319))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 867))
   (%incr-n i32 $exp-addr 4)

   ;; 10**262
   (i64.store $sig-addr (i64.const 4986018643409682053))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 870))
   (%incr-n i32 $exp-addr 4)

   ;; 10**263
   (i64.store $sig-addr (i64.const 10844209322689490470))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 873))
   (%incr-n i32 $exp-addr 4)

   ;; 10**264
   (i64.store $sig-addr (i64.const 18166947671789250992))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 876))
   (%incr-n i32 $exp-addr 4)

   ;; 10**265
   (i64.store $sig-addr (i64.const 4436813267227200014))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 880))
   (%incr-n i32 $exp-addr 4)

   ;; 10**266
   (i64.store $sig-addr (i64.const 10157702602461387921))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 883))
   (%incr-n i32 $exp-addr 4)

   ;; 10**267
   (i64.store $sig-addr (i64.const 17308814271504122806))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 886))
   (%incr-n i32 $exp-addr 4)

   ;; 10**268
   (i64.store $sig-addr (i64.const 3900479892048994898))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 890))
   (%incr-n i32 $exp-addr 4)

   ;; 10**269
   (i64.store $sig-addr (i64.const 9487285883488631526))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 893))
   (%incr-n i32 $exp-addr 4)

   ;; 10**270
   (i64.store $sig-addr (i64.const 16470793372788177311))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 896))
   (%incr-n i32 $exp-addr 4)

   ;; 10**271
   (i64.store $sig-addr (i64.const 3376716830351528964))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 900))
   (%incr-n i32 $exp-addr 4)

   ;; 10**272
   (i64.store $sig-addr (i64.const 8832582056366799108))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 903))
   (%incr-n i32 $exp-addr 4)

   ;; 10**273
   (i64.store $sig-addr (i64.const 15652413588885886790))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 906))
   (%incr-n i32 $exp-addr 4)

   ;; 10**274
   (i64.store $sig-addr (i64.const 2865229465412597388))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 910))
   (%incr-n i32 $exp-addr 4)

   ;; 10**275
   (i64.store $sig-addr (i64.const 8193222850193134638))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 913))
   (%incr-n i32 $exp-addr 4)

   ;; 10**276
   (i64.store $sig-addr (i64.const 14853214581168806202))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 916))
   (%incr-n i32 $exp-addr 4)

   ;; 10**277
   (i64.store $sig-addr (i64.const 2365730085589422020))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 920))
   (%incr-n i32 $exp-addr 4)

   ;; 10**278
   (i64.store $sig-addr (i64.const 7568848625414165429))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 923))
   (%incr-n i32 $exp-addr 4)

   ;; 10**279
   (i64.store $sig-addr (i64.const 14072746800195094690))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 926))
   (%incr-n i32 $exp-addr 4)

   ;; 10**280
   (i64.store $sig-addr (i64.const 1877937722480852326))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 930))
   (%incr-n i32 $exp-addr 4)

   ;; 10**281
   (i64.store $sig-addr (i64.const 6959108171528453311))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 933))
   (%incr-n i32 $exp-addr 4)

   ;; 10**282
   (i64.store $sig-addr (i64.const 13310571232837954542))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 936))
   (%incr-n i32 $exp-addr 4)

   ;; 10**283
   (i64.store $sig-addr (i64.const 1401577992882639733))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 940))
   (%incr-n i32 $exp-addr 4)

   ;; 10**284
   (i64.store $sig-addr (i64.const 6363658509530687570))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 943))
   (%incr-n i32 $exp-addr 4)

   ;; 10**285
   (i64.store $sig-addr (i64.const 12566259155340747367))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 946))
   (%incr-n i32 $exp-addr 4)

   ;; 10**286
   (i64.store $sig-addr (i64.const 936382944446885248))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 950))
   (%incr-n i32 $exp-addr 4)

   ;; 10**287
   (i64.store $sig-addr (i64.const 5782164698985994464))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 953))
   (%incr-n i32 $exp-addr 4)

   ;; 10**288
   (i64.store $sig-addr (i64.const 11839391892159880984))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 956))
   (%incr-n i32 $exp-addr 4)

   ;; 10**289
   (i64.store $sig-addr (i64.const 482090904958843760))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 960))
   (%incr-n i32 $exp-addr 4)

   ;; 10**290
   (i64.store $sig-addr (i64.const 5214299649625942603))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 963))
   (%incr-n i32 $exp-addr 4)

   ;; 10**291
   (i64.store $sig-addr (i64.const 11129560580459816158))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 966))
   (%incr-n i32 $exp-addr 4)

   ;; 10**292
   (i64.store $sig-addr (i64.const 38446335146303242))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 970))
   (%incr-n i32 $exp-addr 4)

   ;; 10**293
   (i64.store $sig-addr (i64.const 4659743937360266958))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 973))
   (%incr-n i32 $exp-addr 4)

   ;; 10**294
   (i64.store $sig-addr (i64.const 10436365940127721601))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 976))
   (%incr-n i32 $exp-addr 4)

   ;; 10**295
   (i64.store $sig-addr (i64.const 17657143443587039905))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 979))
   (%incr-n i32 $exp-addr 4)

   ;; 10**296
   (i64.store $sig-addr (i64.const 4118185624600818084))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 983))
   (%incr-n i32 $exp-addr 4)

   ;; 10**297
   (i64.store $sig-addr (i64.const 9759418049178410510))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 986))
   (%incr-n i32 $exp-addr 4)

   ;; 10**298
   (i64.store $sig-addr (i64.const 16810958579900401042))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 989))
   (%incr-n i32 $exp-addr 4)

   ;; 10**299
   (i64.store $sig-addr (i64.const 3589320084796668795))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 993))
   (%incr-n i32 $exp-addr 4)

   ;; 10**300
   (i64.store $sig-addr (i64.const 9098336124423223898))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 996))
   (%incr-n i32 $exp-addr 4)

   ;; 10**301
   (i64.store $sig-addr (i64.const 15984606173956417776))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 999))
   (%incr-n i32 $exp-addr 4)

   ;; 10**302
   (i64.store $sig-addr (i64.const 3072849831081679254))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 1003))
   (%incr-n i32 $exp-addr 4)

   ;; 10**303
   (i64.store $sig-addr (i64.const 8452748307279486972))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 1006))
   (%incr-n i32 $exp-addr 4)

   ;; 10**304
   (i64.store $sig-addr (i64.const 15177621402526746618))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 1009))
   (%incr-n i32 $exp-addr 4)

   ;; 10**305
   (i64.store $sig-addr (i64.const 2568484348938134780))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 1013))
   (%incr-n i32 $exp-addr 4)

   ;; 10**306
   (i64.store $sig-addr (i64.const 7822291454600056380))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 1016))
   (%incr-n i32 $exp-addr 4)

   ;; 10**307
   (i64.store $sig-addr (i64.const 14389550336677458378))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 1019))
   (%incr-n i32 $exp-addr 4)

   ;; 10**308
   (i64.store $sig-addr (i64.const 2075939932782329630))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 1023))
   (%incr-n i32 $exp-addr 4)

   (debug
    ;; check that the block is the right size
    (if (i32.gt_s $sig-addr (i32.add (global.get $powers-of-10-exp-addr)
                                     _powers-of-10-block-size))
        (then
         (unreachable)))))

 (func $init-powers-of-10-round-up (debug (export "init-powers-of-10-round-up"))

   (local $block i32)
   (local $exp-addr i32)
   (local $sig-addr i32)

   (set! $block ($alloc-block _numbers-blockset _powers-of-10-block-size))

   (set! $exp-addr ($get-block-addr $block))
   (set! $sig-addr (i32.add $sig-addr (i32.shl _powers-of-10-count
                                               (i32.const 2))))

   (global.set $powers-of-10-exp-addr $exp-addr)
   (global.set $powers-of-10-sig-addr $sig-addr)

   ;; 10**-342
   (i64.store $sig-addr (i64.const 15990214839061949620))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -1137))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-341
   (i64.store $sig-addr (i64.const 3076355246772636657))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -1133))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-340
   (i64.store $sig-addr (i64.const 8457130076893183725))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -1130))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-339
   (i64.store $sig-addr (i64.const 15183098614543867560))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -1127))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-338
   (i64.store $sig-addr (i64.const 2571907606448835369))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -1123))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-337
   (i64.store $sig-addr (i64.const 7826570526488432115))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -1120))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-336
   (i64.store $sig-addr (i64.const 14394899176537928048))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -1117))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-335
   (i64.store $sig-addr (i64.const 2079282957695123174))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -1113))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-334
   (i64.store $sig-addr (i64.const 7210789715546291871))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -1110))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-333
   (i64.store $sig-addr (i64.const 13625173162860252743))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -1107))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-332
   (i64.store $sig-addr (i64.const 1598204199146576109))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -1103))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-331
   (i64.store $sig-addr (i64.const 6609441267360608040))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -1100))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-330
   (i64.store $sig-addr (i64.const 12873487602628147954))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -1097))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-329
   (i64.store $sig-addr (i64.const 1128400724001510615))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -1093))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-328
   (i64.store $sig-addr (i64.const 6022186923429276173))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -1090))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-327
   (i64.store $sig-addr (i64.const 12139419672713983120))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -1087))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-326
   (i64.store $sig-addr (i64.const 669608267805157594))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -1083))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-325
   (i64.store $sig-addr (i64.const 5448696353183834897))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -1080))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-324
   (i64.store $sig-addr (i64.const 11422556459907181525))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -1077))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-323
   (i64.store $sig-addr (i64.const 221568759800906597))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -1073))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-322
   (i64.store $sig-addr (i64.const 4888646968178521150))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -1070))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-321
   (i64.store $sig-addr (i64.const 10722494728650539342))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -1067))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-320
   (i64.store $sig-addr (i64.const 18014804429240562081))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -1064))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-319
   (i64.store $sig-addr (i64.const 4341723740634269445))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -1060))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-318
   (i64.store $sig-addr (i64.const 10038840694220224710))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -1057))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-317
   (i64.store $sig-addr (i64.const 17160236886202668791))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -1054))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-316
   (i64.store $sig-addr (i64.const 3807619026235586139))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -1050))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-315
   (i64.store $sig-addr (i64.const 9371209801221870577))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -1047))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-314
   (i64.store $sig-addr (i64.const 16325698269954726126))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -1044))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-313
   (i64.store $sig-addr (i64.const 3286032391080621972))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -1040))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-312
   (i64.store $sig-addr (i64.const 8719226507278165370))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -1037))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-311
   (i64.store $sig-addr (i64.const 15510719152525094616))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -1034))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-310
   (i64.store $sig-addr (i64.const 2776670442687102279))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -1030))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-309
   (i64.store $sig-addr (i64.const 8082524071786265753))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -1027))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-308
   (i64.store $sig-addr (i64.const 14714841108160220095))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -1024))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-307
   (i64.store $sig-addr (i64.const 2279246664959055703))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -1020))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-306
   (i64.store $sig-addr (i64.const 7460744349626207533))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -1017))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-305
   (i64.store $sig-addr (i64.const 13937616455460147320))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -1014))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-304
   (i64.store $sig-addr (i64.const 1793481257021510219))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -1010))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-303
   (i64.store $sig-addr (i64.const 6853537589704275678))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -1007))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-302
   (i64.store $sig-addr (i64.const 13178608005557732502))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -1004))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-301
   (i64.store $sig-addr (i64.const 1319100975832500957))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -1000))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-300
   (i64.store $sig-addr (i64.const 6260562238218014101))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -997))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-299
   (i64.store $sig-addr (i64.const 12437388816199905530))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -994))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-298
   (i64.store $sig-addr (i64.const 855838982483859100))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -990))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-297
   (i64.store $sig-addr (i64.const 5681484746532211779))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -987))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-296
   (i64.store $sig-addr (i64.const 11713541951592652628))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -984))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-295
   (i64.store $sig-addr (i64.const 403434692104326037))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -980))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-294
   (i64.store $sig-addr (i64.const 5115979383557795450))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -977))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-293
   (i64.store $sig-addr (i64.const 11006660247874632216))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -974))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-292
   (i64.store $sig-addr (i64.const 18370011328270678174))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -971))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-291
   (i64.store $sig-addr (i64.const 4563728052528092003))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -967))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-290
   (i64.store $sig-addr (i64.const 10316346084087502908))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -964))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-289
   (i64.store $sig-addr (i64.const 17507118623536766539))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -961))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-288
   (i64.store $sig-addr (i64.const 4024420112069397231))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -957))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-287
   (i64.store $sig-addr (i64.const 9642211158514134442))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -954))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-286
   (i64.store $sig-addr (i64.const 16664449966570055957))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -951))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-285
   (i64.store $sig-addr (i64.const 3497752201465203117))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -947))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-284
   (i64.store $sig-addr (i64.const 8983876270258891800))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -944))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-283
   (i64.store $sig-addr (i64.const 15841531356251002654))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -941))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-282
   (i64.store $sig-addr (i64.const 2983428070015794803))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -937))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-281
   (i64.store $sig-addr (i64.const 8340971105947131408))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -934))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-280
   (i64.store $sig-addr (i64.const 15037899900861302164))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -931))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-279
   (i64.store $sig-addr (i64.const 2481158410397231996))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -927))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-278
   (i64.store $sig-addr (i64.const 7713134031423927899))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -924))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-277
   (i64.store $sig-addr (i64.const 14253103557707297778))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -921))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-276
   (i64.store $sig-addr (i64.const 1990660695925979255))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -917))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-275
   (i64.store $sig-addr (i64.const 7100011888334861973))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -914))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-274
   (i64.store $sig-addr (i64.const 13486700878845965371))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -911))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-273
   (i64.store $sig-addr (i64.const 1511659021637646501))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -907))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-272
   (i64.store $sig-addr (i64.const 6501259795474446030))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -904))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-271
   (i64.store $sig-addr (i64.const 12738260762770445441))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -901))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-270
   (i64.store $sig-addr (i64.const 1043883949090446545))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -897))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-269
   (i64.store $sig-addr (i64.const 5916540954790446085))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -894))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-268
   (i64.store $sig-addr (i64.const 12007362211915445510))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -891))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-267
   (i64.store $sig-addr (i64.const 587072354806071588))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -887))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-266
   (i64.store $sig-addr (i64.const 5345526461934977389))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -884))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-265
   (i64.store $sig-addr (i64.const 11293594095846109640))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -881))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-264
   (i64.store $sig-addr (i64.const 140967282262736669))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -877))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-263
   (i64.store $sig-addr (i64.const 4787895121255808740))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -874))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-262
   (i64.store $sig-addr (i64.const 10596554919997148829))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -871))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-261
   (i64.store $sig-addr (i64.const 17857379668423823941))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -868))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-260
   (i64.store $sig-addr (i64.const 4243333265123808107))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -864))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-259
   (i64.store $sig-addr (i64.const 9915852599832148038))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -861))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-258
   (i64.store $sig-addr (i64.const 17006501768217572951))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -858))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-257
   (i64.store $sig-addr (i64.const 3711534577494901238))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -854))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-256
   (i64.store $sig-addr (i64.const 9251104240296014452))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -851))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-255
   (i64.store $sig-addr (i64.const 16175566318797405969))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -848))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-254
   (i64.store $sig-addr (i64.const 3192199921607296875))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -844))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-253
   (i64.store $sig-addr (i64.const 8601935920436508997))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -841))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-252
   (i64.store $sig-addr (i64.const 15364105918973024151))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -838))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-251
   (i64.store $sig-addr (i64.const 2685037171717058238))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -834))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-250
   (i64.store $sig-addr (i64.const 7967982483073710702))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -831))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-249
   (i64.store $sig-addr (i64.const 14571664122269526281))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -828))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-248
   (i64.store $sig-addr (i64.const 2189761048777372070))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -824))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-247
   (i64.store $sig-addr (i64.const 7348887329399102991))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -821))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-246
   (i64.store $sig-addr (i64.const 13797795180176266643))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -818))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-245
   (i64.store $sig-addr (i64.const 1706092959969084796))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -814))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-244
   (i64.store $sig-addr (i64.const 6744302218388743899))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -811))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-243
   (i64.store $sig-addr (i64.const 13042063791413317777))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -808))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-242
   (i64.store $sig-addr (i64.const 1233760841992241755))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -804))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-241
   (i64.store $sig-addr (i64.const 6153887070917690098))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -801))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-240
   (i64.store $sig-addr (i64.const 12304044857074500526))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -798))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-239
   (i64.store $sig-addr (i64.const 772499008030480973))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -794))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-238
   (i64.store $sig-addr (i64.const 5577309778465489120))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -791))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-237
   (i64.store $sig-addr (i64.const 11583323241509249304))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -788))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-236
   (i64.store $sig-addr (i64.const 322047998302198959))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -784))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-235
   (i64.store $sig-addr (i64.const 5014246016305136603))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -781))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-234
   (i64.store $sig-addr (i64.const 10879493538808808657))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -778))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-233
   (i64.store $sig-addr (i64.const 18211052941938398726))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -775))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-232
   (i64.store $sig-addr (i64.const 4464379061070417348))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -771))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-231
   (i64.store $sig-addr (i64.const 10192159844765409588))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -768))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-230
   (i64.store $sig-addr (i64.const 17351885824384149890))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -765))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-229
   (i64.store $sig-addr (i64.const 3927399612599011825))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -761))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-228
   (i64.store $sig-addr (i64.const 9520935534176152685))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -758))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-227
   (i64.store $sig-addr (i64.const 16512855436147578760))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -755))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-226
   (i64.store $sig-addr (i64.const 3403005619951154869))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -751))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-225
   (i64.store $sig-addr (i64.const 8865443043366331491))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -748))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-224
   (i64.store $sig-addr (i64.const 15693489822635302267))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -745))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-223
   (i64.store $sig-addr (i64.const 2890902111505982061))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -741))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-222
   (i64.store $sig-addr (i64.const 8225313657809865480))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -738))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-221
   (i64.store $sig-addr (i64.const 14893328090689719754))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -735))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-220
   (i64.store $sig-addr (i64.const 2390801029039992990))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -731))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-219
   (i64.store $sig-addr (i64.const 7600187304727379142))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -728))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-218
   (i64.store $sig-addr (i64.const 14111920149336611832))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -725))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-217
   (i64.store $sig-addr (i64.const 1902421065694300539))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -721))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-216
   (i64.store $sig-addr (i64.const 6989712350545263577))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -718))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-215
   (i64.store $sig-addr (i64.const 13348826456608967376))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -715))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-214
   (i64.store $sig-addr (i64.const 1425487507739522754))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -711))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-213
   (i64.store $sig-addr (i64.const 6393545403101791346))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -708))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-212
   (i64.store $sig-addr (i64.const 12603617772304627087))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -705))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-211
   (i64.store $sig-addr (i64.const 959732080049310073))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -701))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-210
   (i64.store $sig-addr (i64.const 5811351118489025496))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -698))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-209
   (i64.store $sig-addr (i64.const 11875874916538669774))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -695))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-208
   (i64.store $sig-addr (i64.const 504892795195586753))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -691))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-207
   (i64.store $sig-addr (i64.const 5242802012421871345))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -688))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-206
   (i64.store $sig-addr (i64.const 11165188533954727085))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -685))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-205
   (i64.store $sig-addr (i64.const 60713806080622572))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -681))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-204
   (i64.store $sig-addr (i64.const 4687578276028166119))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -678))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-203
   (i64.store $sig-addr (i64.const 10471158863462595553))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -675))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-202
   (i64.store $sig-addr (i64.const 17700634597755632345))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -672))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-201
   (i64.store $sig-addr (i64.const 4145367595956188360))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -668))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-200
   (i64.store $sig-addr (i64.const 9793395513372623353))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -665))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-199
   (i64.store $sig-addr (i64.const 16853430410143167096))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -662))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-198
   (i64.store $sig-addr (i64.const 3615864978698397579))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -658))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-197
   (i64.store $sig-addr (i64.const 9131517241800384878))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -655))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-196
   (i64.store $sig-addr (i64.const 16026082570677869001))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -652))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-195
   (i64.store $sig-addr (i64.const 3098772579032586270))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -648))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-194
   (i64.store $sig-addr (i64.const 8485151742218120741))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -645))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-193
   (i64.store $sig-addr (i64.const 15218125696200038830))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -642))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-192
   (i64.store $sig-addr (i64.const 2593799532483942413))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -638))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-191
   (i64.store $sig-addr (i64.const 7853935434032315920))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -635))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-190
   (i64.store $sig-addr (i64.const 14429105310967782804))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -632))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-189
   (i64.store $sig-addr (i64.const 2100661791713782397))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -628))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-188
   (i64.store $sig-addr (i64.const 7237513258069615900))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -625))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-187
   (i64.store $sig-addr (i64.const 13658577591014407779))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -622))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-186
   (i64.store $sig-addr (i64.const 1619081966742923006))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -618))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-185
   (i64.store $sig-addr (i64.const 6635538476856041661))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -615))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-184
   (i64.store $sig-addr (i64.const 12906109114497439980))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -612))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-183
   (i64.store $sig-addr (i64.const 1148789168919818132))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -608))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-182
   (i64.store $sig-addr (i64.const 6047672479577160569))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -605))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-181
   (i64.store $sig-addr (i64.const 12171276617898838615))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -602))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-180
   (i64.store $sig-addr (i64.const 689518858545692278))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -598))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-179
   (i64.store $sig-addr (i64.const 5473584591609503252))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -595))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-178
   (i64.store $sig-addr (i64.const 11453666757939266969))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -592))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-177
   (i64.store $sig-addr (i64.const 241012696070960000))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -588))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-176
   (i64.store $sig-addr (i64.const 4912951888516087903))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -585))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-175
   (i64.store $sig-addr (i64.const 10752875879072497783))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -582))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-174
   (i64.store $sig-addr (i64.const 18052780867268010133))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -579))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-173
   (i64.store $sig-addr (i64.const 4365459014401424477))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -575))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-172
   (i64.store $sig-addr (i64.const 10068509786429168501))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -572))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-171
   (i64.store $sig-addr (i64.const 17197323251463848530))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -569))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-170
   (i64.store $sig-addr (i64.const 3830798004523823475))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -565))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-169
   (i64.store $sig-addr (i64.const 9400183524082167248))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -562))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-168
   (i64.store $sig-addr (i64.const 16361915423530096964))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -559))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-167
   (i64.store $sig-addr (i64.const 3308668112065228746))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -555))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-166
   (i64.store $sig-addr (i64.const 8747521158508923837))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -552))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-165
   (i64.store $sig-addr (i64.const 15546087466563542700))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -549))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-164
   (i64.store $sig-addr (i64.const 2798775638961132332))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -545))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-163
   (i64.store $sig-addr (i64.const 8110155567128803318))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -542))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-162
   (i64.store $sig-addr (i64.const 14749380477338392052))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -539))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-161
   (i64.store $sig-addr (i64.const 2300833770695413177))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -535))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-160
   (i64.store $sig-addr (i64.const 7487728231796654375))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -532))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-159
   (i64.store $sig-addr (i64.const 13971346308173205872))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -529))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-158
   (i64.store $sig-addr (i64.const 1814562414967171814))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -525))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-157
   (i64.store $sig-addr (i64.const 6879889037136352672))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -522))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-156
   (i64.store $sig-addr (i64.const 13211547314847828744))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -519))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-155
   (i64.store $sig-addr (i64.const 1339688044138811109))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -515))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-154
   (i64.store $sig-addr (i64.const 6286296073600901790))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -512))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-153
   (i64.store $sig-addr (i64.const 12469556110428515142))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -509))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-152
   (i64.store $sig-addr (i64.const 875943541376740107))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -505))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-151
   (i64.store $sig-addr (i64.const 5706615445148313038))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -502))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-150
   (i64.store $sig-addr (i64.const 11744955324862779202))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -499))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-149
   (i64.store $sig-addr (i64.const 423068050398155145))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -495))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-148
   (i64.store $sig-addr (i64.const 5140521081425081836))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -492))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-147
   (i64.store $sig-addr (i64.const 11037337370208740198))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -489))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-146
   (i64.store $sig-addr (i64.const 18408357731188313152))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -486))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-145
   (i64.store $sig-addr (i64.const 4587694554351613864))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -482))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-144
   (i64.store $sig-addr (i64.const 10346304211366905234))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -479))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-143
   (i64.store $sig-addr (i64.const 17544566282636019446))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -476))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-142
   (i64.store $sig-addr (i64.const 4047824899006430298))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -472))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-141
   (i64.store $sig-addr (i64.const 9671467142185425777))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -469))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-140
   (i64.store $sig-addr (i64.const 16701019946159170125))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -466))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-139
   (i64.store $sig-addr (i64.const 3520608438708399472))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -462))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-138
   (i64.store $sig-addr (i64.const 9012446566812887244))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -459))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-137
   (i64.store $sig-addr (i64.const 15877244226943496959))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -456))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-136
   (i64.store $sig-addr (i64.const 3005748614198603743))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -452))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-135
   (i64.store $sig-addr (i64.const 8368871786175642583))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -449))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-134
   (i64.store $sig-addr (i64.const 15072775751146941133))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -446))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-133
   (i64.store $sig-addr (i64.const 2502955816825756352))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -442))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-132
   (i64.store $sig-addr (i64.const 7740380789459583344))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -439))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-131
   (i64.store $sig-addr (i64.const 14287162005251867084))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -436))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-130
   (i64.store $sig-addr (i64.const 2011947225641335072))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -432))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-129
   (i64.store $sig-addr (i64.const 7126620050479056743))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -429))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-128
   (i64.store $sig-addr (i64.const 13519961081526208833))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -426))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-127
   (i64.store $sig-addr (i64.const 1532446648312798665))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -422))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-126
   (i64.store $sig-addr (i64.const 6527244328818386235))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -419))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-125
   (i64.store $sig-addr (i64.const 12770741429450370698))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -416))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-124
   (i64.store $sig-addr (i64.const 1064184365765399830))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -412))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-123
   (i64.store $sig-addr (i64.const 5941916475634137692))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -409))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-122
   (i64.store $sig-addr (i64.const 12039081612970060019))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -406))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-121
   (i64.store $sig-addr (i64.const 606896980465205656))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -402))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-120
   (i64.store $sig-addr (i64.const 5370307244008894974))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -399))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-119
   (i64.store $sig-addr (i64.const 11324570073438506621))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -396))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-118
   (i64.store $sig-addr (i64.const 160327268257984782))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -392))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-117
   (i64.store $sig-addr (i64.const 4812095103749868882))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -389))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-116
   (i64.store $sig-addr (i64.const 10626804898114724006))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -386))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-115
   (i64.store $sig-addr (i64.const 17895192141070792911))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -383))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-114
   (i64.store $sig-addr (i64.const 4266966060528163714))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -379))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-113
   (i64.store $sig-addr (i64.const 9945393594087592546))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -376))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-112
   (i64.store $sig-addr (i64.const 17043428011036878587))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -373))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-111
   (i64.store $sig-addr (i64.const 3734613479256967261))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -369))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-110
   (i64.store $sig-addr (i64.const 9279952867498596980))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -366))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-109
   (i64.store $sig-addr (i64.const 16211627102800634129))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -363))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-108
   (i64.store $sig-addr (i64.const 3214737911609314474))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -359))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-107
   (i64.store $sig-addr (i64.const 8630108407939030997))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -356))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-106
   (i64.store $sig-addr (i64.const 15399321528351176650))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -353))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-105
   (i64.store $sig-addr (i64.const 2707046927578403550))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -349))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-104
   (i64.store $sig-addr (i64.const 7995494677900392342))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -346))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-103
   (i64.store $sig-addr (i64.const 14606054365802878332))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -343))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-102
   (i64.store $sig-addr (i64.const 2211254950985717101))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -339))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-101
   (i64.store $sig-addr (i64.const 7375754707159534281))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -336))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-100
   (i64.store $sig-addr (i64.const 13831379402376805755))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -333))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-99
   (i64.store $sig-addr (i64.const 1727083098844421741))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -329))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-98
   (i64.store $sig-addr (i64.const 6770539891982915080))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -326))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-97
   (i64.store $sig-addr (i64.const 13074860883406031754))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -323))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-96
   (i64.store $sig-addr (i64.const 1254259024487687990))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -319))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-95
   (i64.store $sig-addr (i64.const 6179509799036997892))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -316))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-94
   (i64.store $sig-addr (i64.const 12336073267223635269))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -313))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-93
   (i64.store $sig-addr (i64.const 792516764373690187))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -309))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-92
   (i64.store $sig-addr (i64.const 5602331973894500638))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -306))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-91
   (i64.store $sig-addr (i64.const 11614600985795513701))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -303))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-90
   (i64.store $sig-addr (i64.const 341596588481114207))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -299))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-89
   (i64.store $sig-addr (i64.const 5038681754028780663))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -296))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-88
   (i64.store $sig-addr (i64.const 10910038210963363733))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -293))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-87
   (i64.store $sig-addr (i64.const 18249233782131592570))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -290))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-86
   (i64.store $sig-addr (i64.const 4488242086191163500))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -286))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-85
   (i64.store $sig-addr (i64.const 10221988626166342279))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -283))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-84
   (i64.store $sig-addr (i64.const 17389171801135315753))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -280))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-83
   (i64.store $sig-addr (i64.const 3950703348068490490))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -276))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-82
   (i64.store $sig-addr (i64.const 9550065203513001016))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -273))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-81
   (i64.store $sig-addr (i64.const 16549267522818639174))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -270))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-80
   (i64.store $sig-addr (i64.const 3425763174120567628))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -266))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-79
   (i64.store $sig-addr (i64.const 8893889986078097439))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -263))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-78
   (i64.store $sig-addr (i64.const 15729048501025009702))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -260))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-77
   (i64.store $sig-addr (i64.const 2913126285499549208))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -256))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-76
   (i64.store $sig-addr (i64.const 8253093875301824414))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -253))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-75
   (i64.store $sig-addr (i64.const 14928053362554668421))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -250))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-74
   (i64.store $sig-addr (i64.const 2412504323955585907))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -246))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-73
   (i64.store $sig-addr (i64.const 7627316423371870288))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -243))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-72
   (i64.store $sig-addr (i64.const 14145831547642225764))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -240))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-71
   (i64.store $sig-addr (i64.const 1923615689635309247))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -236))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-70
   (i64.store $sig-addr (i64.const 7016205630471524462))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -233))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-69
   (i64.store $sig-addr (i64.const 13381943056516793482))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -230))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-68
   (i64.store $sig-addr (i64.const 1446185382681914070))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -226))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-67
   (i64.store $sig-addr (i64.const 6419417746779780492))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -223))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-66
   (i64.store $sig-addr (i64.const 12635958201902113519))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -220))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-65
   (i64.store $sig-addr (i64.const 979944848547739093))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -216))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-64
   (i64.store $sig-addr (i64.const 5836617079112061770))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -213))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-63
   (i64.store $sig-addr (i64.const 11907457367317465117))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -210))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-62
   (i64.store $sig-addr (i64.const 524631826932333842))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -206))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-61
   (i64.store $sig-addr (i64.const 5267475802092805207))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -203))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-60
   (i64.store $sig-addr (i64.const 11196030771043394412))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -200))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-59
   (i64.store $sig-addr (i64.const 79990204261039652))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -196))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-58
   (i64.store $sig-addr (i64.const 4711673773753687469))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -193))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-57
   (i64.store $sig-addr (i64.const 10501278235619497240))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -190))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-56
   (i64.store $sig-addr (i64.const 17738283812951759454))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -187))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-55
   (i64.store $sig-addr (i64.const 4168898355453767803))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -183))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-54
   (i64.store $sig-addr (i64.const 9822808962744597657))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -180))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-53
   (i64.store $sig-addr (i64.const 16890197221858134976))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -177))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-52
   (i64.store $sig-addr (i64.const 3638844236020252504))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -173))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-51
   (i64.store $sig-addr (i64.const 9160241313452703534))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -170))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-50
   (i64.store $sig-addr (i64.const 16061987660243267321))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -167))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-49
   (i64.store $sig-addr (i64.const 3121213260010960220))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -163))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-48
   (i64.store $sig-addr (i64.const 8513202593441088179))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -160))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-47
   (i64.store $sig-addr (i64.const 15253189260228748127))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -157))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-46
   (i64.store $sig-addr (i64.const 2615714260001885724))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -153))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-45
   (i64.store $sig-addr (i64.const 7881328843429745058))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -150))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-44
   (i64.store $sig-addr (i64.const 14463347072714569227))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -147))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-43
   (i64.store $sig-addr (i64.const 2122062892805523911))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -143))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-42
   (i64.store $sig-addr (i64.const 7264264634434292793))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -140))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-41
   (i64.store $sig-addr (i64.const 13692016811470253895))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -137))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-40
   (i64.store $sig-addr (i64.const 1639981479527826828))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -133))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-39
   (i64.store $sig-addr (i64.const 6661662867837171439))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -130))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-38
   (i64.store $sig-addr (i64.const 12938764603223852203))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -127))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-37
   (i64.store $sig-addr (i64.const 1169198849373825771))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -123))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-36
   (i64.store $sig-addr (i64.const 6073184580144670118))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -120))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-35
   (i64.store $sig-addr (i64.const 12203166743608225551))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -117))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-34
   (i64.store $sig-addr (i64.const 709450187114059113))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -113))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-33
   (i64.store $sig-addr (i64.const 5498498752319961796))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -110))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-32
   (i64.store $sig-addr (i64.const 11484809458827340149))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -107))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-31
   (i64.store $sig-addr (i64.const 260476884126005737))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -103))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-30
   (i64.store $sig-addr (i64.const 4937282123584895075))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -100))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-29
   (i64.store $sig-addr (i64.const 10783288672908506748))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -97))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-28
   (i64.store $sig-addr (i64.const 18090796859563021339))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -94))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-27
   (i64.store $sig-addr (i64.const 4389219009585806481))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -90))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-26
   (i64.store $sig-addr (i64.const 10098209780409646005))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -87))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-25
   (i64.store $sig-addr (i64.const 17234448243939445410))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -84))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-24
   (i64.store $sig-addr (i64.const 3854001124821071526))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -80))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-23
   (i64.store $sig-addr (i64.const 9429187424453727311))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -77))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-22
   (i64.store $sig-addr (i64.const 16398170298994547043))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -74))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-21
   (i64.store $sig-addr (i64.const 3331327409230510046))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -70))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-20
   (i64.store $sig-addr (i64.const 8775845279965525461))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -67))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-19
   (i64.store $sig-addr (i64.const 15581492618384294730))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -64))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-18
   (i64.store $sig-addr (i64.const 2820903858849102350))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -60))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-17
   (i64.store $sig-addr (i64.const 8137815841988765842))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -57))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-16
   (i64.store $sig-addr (i64.const 14783955820913345207))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -54))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-15
   (i64.store $sig-addr (i64.const 2322443360429758898))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -50))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-14
   (i64.store $sig-addr (i64.const 7514740218964586527))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -47))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-13
   (i64.store $sig-addr (i64.const 14005111292133121062))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -44))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-12
   (i64.store $sig-addr (i64.const 1835665529942118808))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -40))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-11
   (i64.store $sig-addr (i64.const 6906267930855036414))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -37))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-10
   (i64.store $sig-addr (i64.const 13244520931996183421))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -34))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-9
   (i64.store $sig-addr (i64.const 1360296554856532782))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -30))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-8
   (i64.store $sig-addr (i64.const 6312056711998053882))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -27))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-7
   (i64.store $sig-addr (i64.const 12501756908424955256))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -24))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-6
   (i64.store $sig-addr (i64.const 896069040124515179))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -20))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-5
   (i64.store $sig-addr (i64.const 5731772318583031878))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -17))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-4
   (i64.store $sig-addr (i64.const 11776401416656177752))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -14))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-3
   (i64.store $sig-addr (i64.const 442721857769029239))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -10))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-2
   (i64.store $sig-addr (i64.const 5165088340638674452))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -7))
   (%incr-n i32 $exp-addr 4)

   ;; 10**-1
   (i64.store $sig-addr (i64.const 11068046444225730970))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const -4))
   (%incr-n i32 $exp-addr 4)

   ;; 10**0
   (i64.store $sig-addr (i64.const 0))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 0))
   (%incr-n i32 $exp-addr 4)

   ;; 10**1
   (i64.store $sig-addr (i64.const 4611686018427387904))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 3))
   (%incr-n i32 $exp-addr 4)

   ;; 10**2
   (i64.store $sig-addr (i64.const 10376293541461622784))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 6))
   (%incr-n i32 $exp-addr 4)

   ;; 10**3
   (i64.store $sig-addr (i64.const 17582052945254416384))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 9))
   (%incr-n i32 $exp-addr 4)

   ;; 10**4
   (i64.store $sig-addr (i64.const 4071254063142928384))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 13))
   (%incr-n i32 $exp-addr 4)

   ;; 10**5
   (i64.store $sig-addr (i64.const 9700753597356048384))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 16))
   (%incr-n i32 $exp-addr 4)

   ;; 10**6
   (i64.store $sig-addr (i64.const 16737628015122448384))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 19))
   (%incr-n i32 $exp-addr 4)

   ;; 10**7
   (i64.store $sig-addr (i64.const 3543488481810448384))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 23))
   (%incr-n i32 $exp-addr 4)

   ;; 10**8
   (i64.store $sig-addr (i64.const 9041046620690448384))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 26))
   (%incr-n i32 $exp-addr 4)

   ;; 10**9
   (i64.store $sig-addr (i64.const 15912994294290448384))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 29))
   (%incr-n i32 $exp-addr 4)

   ;; 10**10
   (i64.store $sig-addr (i64.const 3028092406290448384))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 33))
   (%incr-n i32 $exp-addr 4)

   ;; 10**11
   (i64.store $sig-addr (i64.const 8396801526290448384))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 36))
   (%incr-n i32 $exp-addr 4)

   ;; 10**12
   (i64.store $sig-addr (i64.const 15107687926290448384))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 39))
   (%incr-n i32 $exp-addr 4)

   ;; 10**13
   (i64.store $sig-addr (i64.const 2524775926290448384))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 43))
   (%incr-n i32 $exp-addr 4)

   ;; 10**14
   (i64.store $sig-addr (i64.const 7767655926290448384))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 46))
   (%incr-n i32 $exp-addr 4)

   ;; 10**15
   (i64.store $sig-addr (i64.const 14321255926290448384))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 49))
   (%incr-n i32 $exp-addr 4)

   ;; 10**16
   (i64.store $sig-addr (i64.const 2033255926290448384))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 53))
   (%incr-n i32 $exp-addr 4)

   ;; 10**17
   (i64.store $sig-addr (i64.const 7153255926290448384))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 56))
   (%incr-n i32 $exp-addr 4)

   ;; 10**18
   (i64.store $sig-addr (i64.const 13553255926290448384))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 59))
   (%incr-n i32 $exp-addr 4)

   ;; 10**19
   (i64.store $sig-addr (i64.const 1553255926290448384))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 63))
   (%incr-n i32 $exp-addr 4)

   ;; 10**20
   (i64.store $sig-addr (i64.const 6553255926290448384))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 66))
   (%incr-n i32 $exp-addr 4)

   ;; 10**21
   (i64.store $sig-addr (i64.const 12803255926290448384))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 69))
   (%incr-n i32 $exp-addr 4)

   ;; 10**22
   (i64.store $sig-addr (i64.const 1084505926290448384))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 73))
   (%incr-n i32 $exp-addr 4)

   ;; 10**23
   (i64.store $sig-addr (i64.const 5967318426290448384))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 76))
   (%incr-n i32 $exp-addr 4)

   ;; 10**24
   (i64.store $sig-addr (i64.const 12070834051290448384))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 79))
   (%incr-n i32 $exp-addr 4)

   ;; 10**25
   (i64.store $sig-addr (i64.const 626742254415448384))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 83))
   (%incr-n i32 $exp-addr 4)

   ;; 10**26
   (i64.store $sig-addr (i64.const 5395113836446698384))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 86))
   (%incr-n i32 $exp-addr 4)

   ;; 10**27
   (i64.store $sig-addr (i64.const 11355578313985760884))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 89))
   (%incr-n i32 $exp-addr 4)

   ;; 10**28
   (i64.store $sig-addr (i64.const 179707418600018697))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 93))
   (%incr-n i32 $exp-addr 4)

   ;; 10**29
   (i64.store $sig-addr (i64.const 4836320291677411275))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 96))
   (%incr-n i32 $exp-addr 4)

   ;; 10**30
   (i64.store $sig-addr (i64.const 10657086383024151997))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 99))
   (%incr-n i32 $exp-addr 4)

   ;; 10**31
   (i64.store $sig-addr (i64.const 17933043997207577901))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 102))
   (%incr-n i32 $exp-addr 4)

   ;; 10**32
   (i64.store $sig-addr (i64.const 4290623470613654332))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 106))
   (%incr-n i32 $exp-addr 4)

   ;; 10**33
   (i64.store $sig-addr (i64.const 9974965356694455819))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 109))
   (%incr-n i32 $exp-addr 4)

   ;; 10**34
   (i64.store $sig-addr (i64.const 17080392714295457678))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 112))
   (%incr-n i32 $exp-addr 4)

   ;; 10**35
   (i64.store $sig-addr (i64.const 3757716418793579192))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 116))
   (%incr-n i32 $exp-addr 4)

   ;; 10**36
   (i64.store $sig-addr (i64.const 9308831541919361895))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 119))
   (%incr-n i32 $exp-addr 4)

   ;; 10**37
   (i64.store $sig-addr (i64.const 16247725445826590272))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 122))
   (%incr-n i32 $exp-addr 4)

   ;; 10**38
   (i64.store $sig-addr (i64.const 3237299376000537064))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 126))
   (%incr-n i32 $exp-addr 4)

   ;; 10**39
   (i64.store $sig-addr (i64.const 8658310238428059234))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 129))
   (%incr-n i32 $exp-addr 4)

   ;; 10**40
   (i64.store $sig-addr (i64.const 15434573816462461947))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 132))
   (%incr-n i32 $exp-addr 4)

   ;; 10**41
   (i64.store $sig-addr (i64.const 2729079607647956861))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 136))
   (%incr-n i32 $exp-addr 4)

   ;; 10**42
   (i64.store $sig-addr (i64.const 8023035527987333980))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 139))
   (%incr-n i32 $exp-addr 4)

   ;; 10**43
   (i64.store $sig-addr (i64.const 14640480428411555379))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 142))
   (%incr-n i32 $exp-addr 4)

   ;; 10**44
   (i64.store $sig-addr (i64.const 2232771240116140256))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 146))
   (%incr-n i32 $exp-addr 4)

   ;; 10**45
   (i64.store $sig-addr (i64.const 7402650068572563224))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 149))
   (%incr-n i32 $exp-addr 4)

   ;; 10**46
   (i64.store $sig-addr (i64.const 13864998604143091934))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 152))
   (%incr-n i32 $exp-addr 4)

   ;; 10**47
   (i64.store $sig-addr (i64.const 1748095099948350603))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 156))
   (%incr-n i32 $exp-addr 4)

   ;; 10**48
   (i64.store $sig-addr (i64.const 6796804893362826157))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 159))
   (%incr-n i32 $exp-addr 4)

   ;; 10**49
   (i64.store $sig-addr (i64.const 13107692135130920600))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 162))
   (%incr-n i32 $exp-addr 4)

   ;; 10**50
   (i64.store $sig-addr (i64.const 1274778556815743519))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 166))
   (%incr-n i32 $exp-addr 4)

   ;; 10**51
   (i64.store $sig-addr (i64.const 6205159214447067303))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 169))
   (%incr-n i32 $exp-addr 4)

   ;; 10**52
   (i64.store $sig-addr (i64.const 12368135036486222033))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 172))
   (%incr-n i32 $exp-addr 4)

   ;; 10**53
   (i64.store $sig-addr (i64.const 812555370162806915))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 176))
   (%incr-n i32 $exp-addr 4)

   ;; 10**54
   (i64.store $sig-addr (i64.const 5627380231130896547))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 179))
   (%incr-n i32 $exp-addr 4)

   ;; 10**55
   (i64.store $sig-addr (i64.const 11645911307341008588))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 182))
   (%incr-n i32 $exp-addr 4)

   ;; 10**56
   (i64.store $sig-addr (i64.const 361165539447048511))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 186))
   (%incr-n i32 $exp-addr 4)

   ;; 10**57
   (i64.store $sig-addr (i64.const 5063142942736198543))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 189))
   (%incr-n i32 $exp-addr 4)

   ;; 10**58
   (i64.store $sig-addr (i64.const 10940614696847636083))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 192))
   (%incr-n i32 $exp-addr 4)

   ;; 10**59
   (i64.store $sig-addr (i64.const 18287454389486933008))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 195))
   (%incr-n i32 $exp-addr 4)

   ;; 10**60
   (i64.store $sig-addr (i64.const 4512129965788251274))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 199))
   (%incr-n i32 $exp-addr 4)

   ;; 10**61
   (i64.store $sig-addr (i64.const 10251848475662701997))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 202))
   (%incr-n i32 $exp-addr 4)

   ;; 10**62
   (i64.store $sig-addr (i64.const 17426496613005765400))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 205))
   (%incr-n i32 $exp-addr 4)

   ;; 10**63
   (i64.store $sig-addr (i64.const 3974031355487521519))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 209))
   (%incr-n i32 $exp-addr 4)

   ;; 10**64
   (i64.store $sig-addr (i64.const 9579225212786789802))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 212))
   (%incr-n i32 $exp-addr 4)

   ;; 10**65
   (i64.store $sig-addr (i64.const 16585717534410875157))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 215))
   (%incr-n i32 $exp-addr 4)

   ;; 10**66
   (i64.store $sig-addr (i64.const 3448544431365715117))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 219))
   (%incr-n i32 $exp-addr 4)

   ;; 10**67
   (i64.store $sig-addr (i64.const 8922366557634531800))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 222))
   (%incr-n i32 $exp-addr 4)

   ;; 10**68
   (i64.store $sig-addr (i64.const 15764644215470552655))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 225))
   (%incr-n i32 $exp-addr 4)

   ;; 10**69
   (i64.store $sig-addr (i64.const 2935373607028013553))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 229))
   (%incr-n i32 $exp-addr 4)

   ;; 10**70
   (i64.store $sig-addr (i64.const 8280903027212404845))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 232))
   (%incr-n i32 $exp-addr 4)

   ;; 10**71
   (i64.store $sig-addr (i64.const 14962814802442893961))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 235))
   (%incr-n i32 $exp-addr 4)

   ;; 10**72
   (i64.store $sig-addr (i64.const 2434230223885726869))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 239))
   (%incr-n i32 $exp-addr 4)

   ;; 10**73
   (i64.store $sig-addr (i64.const 7654473798284546491))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 242))
   (%incr-n i32 $exp-addr 4)

   ;; 10**74
   (i64.store $sig-addr (i64.const 14179778266283071018))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 245))
   (%incr-n i32 $exp-addr 4)

   ;; 10**75
   (i64.store $sig-addr (i64.const 1944832388785837530))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 249))
   (%incr-n i32 $exp-addr 4)

   ;; 10**76
   (i64.store $sig-addr (i64.const 7042726504409684816))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 252))
   (%incr-n i32 $exp-addr 4)

   ;; 10**77
   (i64.store $sig-addr (i64.const 13415094148939493925))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 255))
   (%incr-n i32 $exp-addr 4)

   ;; 10**78
   (i64.store $sig-addr (i64.const 1466904815446101847))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 259))
   (%incr-n i32 $exp-addr 4)

   ;; 10**79
   (i64.store $sig-addr (i64.const 6445317037735015213))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 262))
   (%incr-n i32 $exp-addr 4)

   ;; 10**80
   (i64.store $sig-addr (i64.const 12668332315596156920))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 265))
   (%incr-n i32 $exp-addr 4)

   ;; 10**81
   (i64.store $sig-addr (i64.const 1000178669606516219))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 269))
   (%incr-n i32 $exp-addr 4)

   ;; 10**82
   (i64.store $sig-addr (i64.const 5861909355435533178))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 272))
   (%incr-n i32 $exp-addr 4)

   ;; 10**83
   (i64.store $sig-addr (i64.const 11939072712721804376))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 275))
   (%incr-n i32 $exp-addr 4)

   ;; 10**84
   (i64.store $sig-addr (i64.const 544391417810045879))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 279))
   (%incr-n i32 $exp-addr 4)

   ;; 10**85
   (i64.store $sig-addr (i64.const 5292175290689945253))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 282))
   (%incr-n i32 $exp-addr 4)

   ;; 10**86
   (i64.store $sig-addr (i64.const 11226905131789819470))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 285))
   (%incr-n i32 $exp-addr 4)

   ;; 10**87
   (i64.store $sig-addr (i64.const 99286679727555313))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 289))
   (%incr-n i32 $exp-addr 4)

   ;; 10**88
   (i64.store $sig-addr (i64.const 4735794368086832045))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 292))
   (%incr-n i32 $exp-addr 4)

   ;; 10**89
   (i64.store $sig-addr (i64.const 10531428978535927960))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 295))
   (%incr-n i32 $exp-addr 4)

   ;; 10**90
   (i64.store $sig-addr (i64.const 17775972241597297854))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 298))
   (%incr-n i32 $exp-addr 4)

   ;; 10**91
   (i64.store $sig-addr (i64.const 4192453623357229303))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 302))
   (%incr-n i32 $exp-addr 4)

   ;; 10**92
   (i64.store $sig-addr (i64.const 9852253047623924532))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 305))
   (%incr-n i32 $exp-addr 4)

   ;; 10**93
   (i64.store $sig-addr (i64.const 16927002327957293570))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 308))
   (%incr-n i32 $exp-addr 4)

   ;; 10**94
   (i64.store $sig-addr (i64.const 3661847427332226625))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 312))
   (%incr-n i32 $exp-addr 4)

   ;; 10**95
   (i64.store $sig-addr (i64.const 9188995302592671185))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 315))
   (%incr-n i32 $exp-addr 4)

   ;; 10**96
   (i64.store $sig-addr (i64.const 16097930146668226886))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 318))
   (%incr-n i32 $exp-addr 4)

   ;; 10**97
   (i64.store $sig-addr (i64.const 3143677314026559947))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 322))
   (%incr-n i32 $exp-addr 4)

   ;; 10**98
   (i64.store $sig-addr (i64.const 8541282660960587838))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 325))
   (%incr-n i32 $exp-addr 4)

   ;; 10**99
   (i64.store $sig-addr (i64.const 15288289344628122702))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 328))
   (%incr-n i32 $exp-addr 4)

   ;; 10**100
   (i64.store $sig-addr (i64.const 2637651812751494833))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 332))
   (%incr-n i32 $exp-addr 4)

   ;; 10**101
   (i64.store $sig-addr (i64.const 7908750784366756445))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 335))
   (%incr-n i32 $exp-addr 4)

   ;; 10**102
   (i64.store $sig-addr (i64.const 14497624498885833460))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 338))
   (%incr-n i32 $exp-addr 4)

   ;; 10**103
   (i64.store $sig-addr (i64.const 2143486284162564057))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 342))
   (%incr-n i32 $exp-addr 4)

   ;; 10**104
   (i64.store $sig-addr (i64.const 7291043873630592975))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 345))
   (%incr-n i32 $exp-addr 4)

   ;; 10**105
   (i64.store $sig-addr (i64.const 13725490860465629122))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 348))
   (%incr-n i32 $exp-addr 4)

   ;; 10**106
   (i64.store $sig-addr (i64.const 1660902760149936345))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 352))
   (%incr-n i32 $exp-addr 4)

   ;; 10**107
   (i64.store $sig-addr (i64.const 6687814468614808336))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 355))
   (%incr-n i32 $exp-addr 4)

   ;; 10**108
   (i64.store $sig-addr (i64.const 12971454104195898324))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 358))
   (%incr-n i32 $exp-addr 4)

   ;; 10**109
   (i64.store $sig-addr (i64.const 1189629787481354596))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 362))
   (%incr-n i32 $exp-addr 4)

   ;; 10**110
   (i64.store $sig-addr (i64.const 6098723252779081149))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 365))
   (%incr-n i32 $exp-addr 4)

   ;; 10**111
   (i64.store $sig-addr (i64.const 12235090084401239341))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 368))
   (%incr-n i32 $exp-addr 4)

   ;; 10**112
   (i64.store $sig-addr (i64.const 729402275109692732))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 372))
   (%incr-n i32 $exp-addr 4)

   ;; 10**113
   (i64.store $sig-addr (i64.const 5523438862314503819))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 375))
   (%incr-n i32 $exp-addr 4)

   ;; 10**114
   (i64.store $sig-addr (i64.const 11515984596320517678))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 378))
   (%incr-n i32 $exp-addr 4)

   ;; 10**115
   (i64.store $sig-addr (i64.const 279961345059241693))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 382))
   (%incr-n i32 $exp-addr 4)

   ;; 10**116
   (i64.store $sig-addr (i64.const 4961637699751440020))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 385))
   (%incr-n i32 $exp-addr 4)

   ;; 10**117
   (i64.store $sig-addr (i64.const 10813733143116687929))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 388))
   (%incr-n i32 $exp-addr 4)

   ;; 10**118
   (i64.store $sig-addr (i64.const 18128852447323247815))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 391))
   (%incr-n i32 $exp-addr 4)

   ;; 10**119
   (i64.store $sig-addr (i64.const 4413003751935948028))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 395))
   (%incr-n i32 $exp-addr 4)

   ;; 10**120
   (i64.store $sig-addr (i64.const 10127940708347322939))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 398))
   (%incr-n i32 $exp-addr 4)

   ;; 10**121
   (i64.store $sig-addr (i64.const 17271611903861541578))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 401))
   (%incr-n i32 $exp-addr 4)

   ;; 10**122
   (i64.store $sig-addr (i64.const 3877228412272381630))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 405))
   (%incr-n i32 $exp-addr 4)

   ;; 10**123
   (i64.store $sig-addr (i64.const 9458221533767864942))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 408))
   (%incr-n i32 $exp-addr 4)

   ;; 10**124
   (i64.store $sig-addr (i64.const 16434462935637219082))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 411))
   (%incr-n i32 $exp-addr 4)

   ;; 10**125
   (i64.store $sig-addr (i64.const 3354010307132180070))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 415))
   (%incr-n i32 $exp-addr 4)

   ;; 10**126
   (i64.store $sig-addr (i64.const 8804198902342612991))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 418))
   (%incr-n i32 $exp-addr 4)

   ;; 10**127
   (i64.store $sig-addr (i64.const 15616934646355654143))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 421))
   (%incr-n i32 $exp-addr 4)

   ;; 10**128
   (i64.store $sig-addr (i64.const 2843055126331201984))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 425))
   (%incr-n i32 $exp-addr 4)

   ;; 10**129
   (i64.store $sig-addr (i64.const 8165504926341390383))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 428))
   (%incr-n i32 $exp-addr 4)

   ;; 10**130
   (i64.store $sig-addr (i64.const 14818567176354125883))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 431))
   (%incr-n i32 $exp-addr 4)

   ;; 10**131
   (i64.store $sig-addr (i64.const 2344075457580246821))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 435))
   (%incr-n i32 $exp-addr 4)

   ;; 10**132
   (i64.store $sig-addr (i64.const 7541780340402696430))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 438))
   (%incr-n i32 $exp-addr 4)

   ;; 10**133
   (i64.store $sig-addr (i64.const 14038911443930758442))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 441))
   (%incr-n i32 $exp-addr 4)

   ;; 10**134
   (i64.store $sig-addr (i64.const 1856790624815642170))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 445))
   (%incr-n i32 $exp-addr 4)

   ;; 10**135
   (i64.store $sig-addr (i64.const 6932674299446940617))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 448))
   (%incr-n i32 $exp-addr 4)

   ;; 10**136
   (i64.store $sig-addr (i64.const 13277528892736063675))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 451))
   (%incr-n i32 $exp-addr 4)

   ;; 10**137
   (i64.store $sig-addr (i64.const 1380926530318957941))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 455))
   (%incr-n i32 $exp-addr 4)

   ;; 10**138
   (i64.store $sig-addr (i64.const 6337844181326085330))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 458))
   (%incr-n i32 $exp-addr 4)

   ;; 10**139
   (i64.store $sig-addr (i64.const 12533991245084994567))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 461))
   (%incr-n i32 $exp-addr 4)

   ;; 10**140
   (i64.store $sig-addr (i64.const 916215500537039748))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 465))
   (%incr-n i32 $exp-addr 4)

   ;; 10**141
   (i64.store $sig-addr (i64.const 5756955394098687589))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 468))
   (%incr-n i32 $exp-addr 4)

   ;; 10**142
   (i64.store $sig-addr (i64.const 11807880261050747390))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 471))
   (%incr-n i32 $exp-addr 4)

   ;; 10**143
   (i64.store $sig-addr (i64.const 462396135515635263))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 475))
   (%incr-n i32 $exp-addr 4)

   ;; 10**144
   (i64.store $sig-addr (i64.const 5189681187821931983))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 478))
   (%incr-n i32 $exp-addr 4)

   ;; 10**145
   (i64.store $sig-addr (i64.const 11098787503204802882))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 481))
   (%incr-n i32 $exp-addr 4)

   ;; 10**146
   (i64.store $sig-addr (i64.const 19213161861919946))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 485))
   (%incr-n i32 $exp-addr 4)

   ;; 10**147
   (i64.store $sig-addr (i64.const 4635702470754787836))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 488))
   (%incr-n i32 $exp-addr 4)

   ;; 10**148
   (i64.store $sig-addr (i64.const 10406314106870872699))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 491))
   (%incr-n i32 $exp-addr 4)

   ;; 10**149
   (i64.store $sig-addr (i64.const 17619578652015978778))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 494))
   (%incr-n i32 $exp-addr 4)

   ;; 10**150
   (i64.store $sig-addr (i64.const 4094707629868904880))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 498))
   (%incr-n i32 $exp-addr 4)

   ;; 10**151
   (i64.store $sig-addr (i64.const 9730070555763519004))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 501))
   (%incr-n i32 $exp-addr 4)

   ;; 10**152
   (i64.store $sig-addr (i64.const 16774274213131786659))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 504))
   (%incr-n i32 $exp-addr 4)

   ;; 10**153
   (i64.store $sig-addr (i64.const 3566392355566284806))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 508))
   (%incr-n i32 $exp-addr 4)

   ;; 10**154
   (i64.store $sig-addr (i64.const 9069676462885243911))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 511))
   (%incr-n i32 $exp-addr 4)

   ;; 10**155
   (i64.store $sig-addr (i64.const 15948781597033942793))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 514))
   (%incr-n i32 $exp-addr 4)

   ;; 10**156
   (i64.store $sig-addr (i64.const 3050459470505132390))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 518))
   (%incr-n i32 $exp-addr 4)

   ;; 10**157
   (i64.store $sig-addr (i64.const 8424760356558803391))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 521))
   (%incr-n i32 $exp-addr 4)

   ;; 10**158
   (i64.store $sig-addr (i64.const 15142636464125892143))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 524))
   (%incr-n i32 $exp-addr 4)

   ;; 10**159
   (i64.store $sig-addr (i64.const 2546618762437600733))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 528))
   (%incr-n i32 $exp-addr 4)

   ;; 10**160
   (i64.store $sig-addr (i64.const 7794959471474388821))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 531))
   (%incr-n i32 $exp-addr 4)

   ;; 10**161
   (i64.store $sig-addr (i64.const 14355385357770373930))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 534))
   (%incr-n i32 $exp-addr 4)

   ;; 10**162
   (i64.store $sig-addr (i64.const 2054586820965401850))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 538))
   (%incr-n i32 $exp-addr 4)

   ;; 10**163
   (i64.store $sig-addr (i64.const 7179919544634140217))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 541))
   (%incr-n i32 $exp-addr 4)

   ;; 10**164
   (i64.store $sig-addr (i64.const 13586585449220063175))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 544))
   (%incr-n i32 $exp-addr 4)

   ;; 10**165
   (i64.store $sig-addr (i64.const 1574086878121457628))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 548))
   (%incr-n i32 $exp-addr 4)

   ;; 10**166
   (i64.store $sig-addr (i64.const 6579294616079209939))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 551))
   (%incr-n i32 $exp-addr 4)

   ;; 10**167
   (i64.store $sig-addr (i64.const 12835804288526400328))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 554))
   (%incr-n i32 $exp-addr 4)

   ;; 10**168
   (i64.store $sig-addr (i64.const 1104848652687918349))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 558))
   (%incr-n i32 $exp-addr 4)

   ;; 10**169
   (i64.store $sig-addr (i64.const 5992746834287285840))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 561))
   (%incr-n i32 $exp-addr 4)

   ;; 10**170
   (i64.store $sig-addr (i64.const 12102619561286495205))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 564))
   (%incr-n i32 $exp-addr 4)

   ;; 10**171
   (i64.store $sig-addr (i64.const 646608198162977647))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 568))
   (%incr-n i32 $exp-addr 4)

   ;; 10**172
   (i64.store $sig-addr (i64.const 5419946266131109963))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 571))
   (%incr-n i32 $exp-addr 4)

   ;; 10**173
   (i64.store $sig-addr (i64.const 11386618851091275357))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 574))
   (%incr-n i32 $exp-addr 4)

   ;; 10**174
   (i64.store $sig-addr (i64.const 199107754290965242))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 578))
   (%incr-n i32 $exp-addr 4)

   ;; 10**175
   (i64.store $sig-addr (i64.const 4860570711291094457))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 581))
   (%incr-n i32 $exp-addr 4)

   ;; 10**176
   (i64.store $sig-addr (i64.const 10687399407541255975))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 584))
   (%incr-n i32 $exp-addr 4)

   ;; 10**177
   (i64.store $sig-addr (i64.const 17970935277853957873))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 587))
   (%incr-n i32 $exp-addr 4)

   ;; 10**178
   (i64.store $sig-addr (i64.const 4314305521017641814))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 591))
   (%incr-n i32 $exp-addr 4)

   ;; 10**179
   (i64.store $sig-addr (i64.const 10004567919699440172))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 594))
   (%incr-n i32 $exp-addr 4)

   ;; 10**180
   (i64.store $sig-addr (i64.const 17117395918051688119))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 597))
   (%incr-n i32 $exp-addr 4)

   ;; 10**181
   (i64.store $sig-addr (i64.const 3780843421141223218))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 601))
   (%incr-n i32 $exp-addr 4)

   ;; 10**182
   (i64.store $sig-addr (i64.const 9337740294853916927))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 604))
   (%incr-n i32 $exp-addr 4)

   ;; 10**183
   (i64.store $sig-addr (i64.const 16283861386994784063))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 607))
   (%incr-n i32 $exp-addr 4)

   ;; 10**184
   (i64.store $sig-addr (i64.const 3259884339230658183))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 611))
   (%incr-n i32 $exp-addr 4)

   ;; 10**185
   (i64.store $sig-addr (i64.const 8686541442465710633))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 614))
   (%incr-n i32 $exp-addr 4)

   ;; 10**186
   (i64.store $sig-addr (i64.const 15469862821509526195))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 617))
   (%incr-n i32 $exp-addr 4)

   ;; 10**187
   (i64.store $sig-addr (i64.const 2751135235802372016))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 621))
   (%incr-n i32 $exp-addr 4)

   ;; 10**188
   (i64.store $sig-addr (i64.const 8050605063180352924))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 624))
   (%incr-n i32 $exp-addr 4)

   ;; 10**189
   (i64.store $sig-addr (i64.const 14674942347402829059))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 627))
   (%incr-n i32 $exp-addr 4)

   ;; 10**190
   (i64.store $sig-addr (i64.const 2254309939485686306))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 631))
   (%incr-n i32 $exp-addr 4)

   ;; 10**191
   (i64.store $sig-addr (i64.const 7429573442784495786))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 634))
   (%incr-n i32 $exp-addr 4)

   ;; 10**192
   (i64.store $sig-addr (i64.const 13898652821908007637))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 637))
   (%incr-n i32 $exp-addr 4)

   ;; 10**193
   (i64.store $sig-addr (i64.const 1769128986051422917))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 641))
   (%incr-n i32 $exp-addr 4)

   ;; 10**194
   (i64.store $sig-addr (i64.const 6823097250991666550))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 644))
   (%incr-n i32 $exp-addr 4)

   ;; 10**195
   (i64.store $sig-addr (i64.const 13140557582166971092))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 647))
   (%incr-n i32 $exp-addr 4)

   ;; 10**196
   (i64.store $sig-addr (i64.const 1295319461213275077))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 651))
   (%incr-n i32 $exp-addr 4)

   ;; 10**197
   (i64.store $sig-addr (i64.const 6230835344943981750))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 654))
   (%incr-n i32 $exp-addr 4)

   ;; 10**198
   (i64.store $sig-addr (i64.const 12400230199607365091))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 657))
   (%incr-n i32 $exp-addr 4)

   ;; 10**199
   (i64.store $sig-addr (i64.const 832614847113521326))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 661))
   (%incr-n i32 $exp-addr 4)

   ;; 10**200
   (i64.store $sig-addr (i64.const 5652454577319289561))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 664))
   (%incr-n i32 $exp-addr 4)

   ;; 10**201
   (i64.store $sig-addr (i64.const 11677254240076499856))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 667))
   (%incr-n i32 $exp-addr 4)

   ;; 10**202
   (i64.store $sig-addr (i64.const 380754872406730554))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 671))
   (%incr-n i32 $exp-addr 4)

   ;; 10**203
   (i64.store $sig-addr (i64.const 5087629608935801096))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 674))
   (%incr-n i32 $exp-addr 4)

   ;; 10**204
   (i64.store $sig-addr (i64.const 10971223029597139274))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 677))
   (%incr-n i32 $exp-addr 4)

   ;; 10**205
   (i64.store $sig-addr (i64.const 18325714805423811997))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 680))
   (%incr-n i32 $exp-addr 4)

   ;; 10**206
   (i64.store $sig-addr (i64.const 4536042725748800642))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 684))
   (%incr-n i32 $exp-addr 4)

   ;; 10**207
   (i64.store $sig-addr (i64.const 10281739425613388707))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 687))
   (%incr-n i32 $exp-addr 4)

   ;; 10**208
   (i64.store $sig-addr (i64.const 17463860300444123787))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 690))
   (%incr-n i32 $exp-addr 4)

   ;; 10**209
   (i64.store $sig-addr (i64.const 3997383660136495511))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 694))
   (%incr-n i32 $exp-addr 4)

   ;; 10**210
   (i64.store $sig-addr (i64.const 9608415593598007293))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 697))
   (%incr-n i32 $exp-addr 4)

   ;; 10**211
   (i64.store $sig-addr (i64.const 16622205510424897020))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 700))
   (%incr-n i32 $exp-addr 4)

   ;; 10**212
   (i64.store $sig-addr (i64.const 3471349416374478782))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 704))
   (%incr-n i32 $exp-addr 4)

   ;; 10**213
   (i64.store $sig-addr (i64.const 8950872788895486381))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 707))
   (%incr-n i32 $exp-addr 4)

   ;; 10**214
   (i64.store $sig-addr (i64.const 15800277004546745880))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 710))
   (%incr-n i32 $exp-addr 4)

   ;; 10**215
   (i64.store $sig-addr (i64.const 2957644100200634319))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 714))
   (%incr-n i32 $exp-addr 4)

   ;; 10**216
   (i64.store $sig-addr (i64.const 8308741143678180803))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 717))
   (%incr-n i32 $exp-addr 4)

   ;; 10**217
   (i64.store $sig-addr (i64.const 14997612448025113908))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 720))
   (%incr-n i32 $exp-addr 4)

   ;; 10**218
   (i64.store $sig-addr (i64.const 2455978752374614336))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 724))
   (%incr-n i32 $exp-addr 4)

   ;; 10**219
   (i64.store $sig-addr (i64.const 7681659458895655824))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 727))
   (%incr-n i32 $exp-addr 4)

   ;; 10**220
   (i64.store $sig-addr (i64.const 14213760342046957684))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 730))
   (%incr-n i32 $exp-addr 4)

   ;; 10**221
   (i64.store $sig-addr (i64.const 1966071186138266697))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 734))
   (%incr-n i32 $exp-addr 4)

   ;; 10**222
   (i64.store $sig-addr (i64.const 7069275001100221275))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 737))
   (%incr-n i32 $exp-addr 4)

   ;; 10**223
   (i64.store $sig-addr (i64.const 13448279769802664498))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 740))
   (%incr-n i32 $exp-addr 4)

   ;; 10**224
   (i64.store $sig-addr (i64.const 1487645828485583455))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 744))
   (%incr-n i32 $exp-addr 4)

   ;; 10**225
   (i64.store $sig-addr (i64.const 6471243304034367223))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 747))
   (%incr-n i32 $exp-addr 4)

   ;; 10**226
   (i64.store $sig-addr (i64.const 12700740148470346932))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 750))
   (%incr-n i32 $exp-addr 4)

   ;; 10**227
   (i64.store $sig-addr (i64.const 1020433565152884977))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 754))
   (%incr-n i32 $exp-addr 4)

   ;; 10**228
   (i64.store $sig-addr (i64.const 5887227974868494125))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 757))
   (%incr-n i32 $exp-addr 4)

   ;; 10**229
   (i64.store $sig-addr (i64.const 11970720987013005560))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 760))
   (%incr-n i32 $exp-addr 4)

   ;; 10**230
   (i64.store $sig-addr (i64.const 564171589242046619))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 764))
   (%incr-n i32 $exp-addr 4)

   ;; 10**231
   (i64.store $sig-addr (i64.const 5316900504979946178))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 767))
   (%incr-n i32 $exp-addr 4)

   ;; 10**232
   (i64.store $sig-addr (i64.const 11257811649652320626))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 770))
   (%incr-n i32 $exp-addr 4)

   ;; 10**233
   (i64.store $sig-addr (i64.const 118603253391618536))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 774))
   (%incr-n i32 $exp-addr 4)

   ;; 10**234
   (i64.store $sig-addr (i64.const 4759940085166911073))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 777))
   (%incr-n i32 $exp-addr 4)

   ;; 10**235
   (i64.store $sig-addr (i64.const 10561611124886026746))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 780))
   (%incr-n i32 $exp-addr 4)

   ;; 10**236
   (i64.store $sig-addr (i64.const 17813699924534921336))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 783))
   (%incr-n i32 $exp-addr 4)

   ;; 10**237
   (i64.store $sig-addr (i64.const 4216033425193243979))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 787))
   (%incr-n i32 $exp-addr 4)

   ;; 10**238
   (i64.store $sig-addr (i64.const 9881727799918942878))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 790))
   (%incr-n i32 $exp-addr 4)

   ;; 10**239
   (i64.store $sig-addr (i64.const 16963845768326066501))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 793))
   (%incr-n i32 $exp-addr 4)

   ;; 10**240
   (i64.store $sig-addr (i64.const 3684874577562709707))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 797))
   (%incr-n i32 $exp-addr 4)

   ;; 10**241
   (i64.store $sig-addr (i64.const 9217779240380775038))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 800))
   (%incr-n i32 $exp-addr 4)

   ;; 10**242
   (i64.store $sig-addr (i64.const 16133910068903356702))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 803))
   (%incr-n i32 $exp-addr 4)

   ;; 10**243
   (i64.store $sig-addr (i64.const 3166164765423516083))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 807))
   (%incr-n i32 $exp-addr 4)

   ;; 10**244
   (i64.store $sig-addr (i64.const 8569391975206783007))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 810))
   (%incr-n i32 $exp-addr 4)

   ;; 10**245
   (i64.store $sig-addr (i64.const 15323425987435866663))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 813))
   (%incr-n i32 $exp-addr 4)

   ;; 10**246
   (i64.store $sig-addr (i64.const 2659612214506334808))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 817))
   (%incr-n i32 $exp-addr 4)

   ;; 10**247
   (i64.store $sig-addr (i64.const 7936201286560306414))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 820))
   (%incr-n i32 $exp-addr 4)

   ;; 10**248
   (i64.store $sig-addr (i64.const 14531937626627770922))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 823))
   (%incr-n i32 $exp-addr 4)

   ;; 10**249
   (i64.store $sig-addr (i64.const 2164931989001274970))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 827))
   (%incr-n i32 $exp-addr 4)

   ;; 10**250
   (i64.store $sig-addr (i64.const 7317851004678981617))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 830))
   (%incr-n i32 $exp-addr 4)

   ;; 10**251
   (i64.store $sig-addr (i64.const 13758999774276114925))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 833))
   (%incr-n i32 $exp-addr 4)

   ;; 10**252
   (i64.store $sig-addr (i64.const 1681845831281489972))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 837))
   (%incr-n i32 $exp-addr 4)

   ;; 10**253
   (i64.store $sig-addr (i64.const 6713993307529250369))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 840))
   (%incr-n i32 $exp-addr 4)

   ;; 10**254
   (i64.store $sig-addr (i64.const 13004177652838950866))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 843))
   (%incr-n i32 $exp-addr 4)

   ;; 10**255
   (i64.store $sig-addr (i64.const 1210082005383262435))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 847))
   (%incr-n i32 $exp-addr 4)

   ;; 10**256
   (i64.store $sig-addr (i64.const 6124288525156465948))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 850))
   (%incr-n i32 $exp-addr 4)

   ;; 10**257
   (i64.store $sig-addr (i64.const 12267046674872970339))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 853))
   (%incr-n i32 $exp-addr 4)

   ;; 10**258
   (i64.store $sig-addr (i64.const 749375144154524606))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 857))
   (%incr-n i32 $exp-addr 4)

   ;; 10**259
   (i64.store $sig-addr (i64.const 5548404948620543661))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 860))
   (%incr-n i32 $exp-addr 4)

   ;; 10**260
   (i64.store $sig-addr (i64.const 11547192204203067480))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 863))
   (%incr-n i32 $exp-addr 4)

   ;; 10**261
   (i64.store $sig-addr (i64.const 299466099985835319))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 867))
   (%incr-n i32 $exp-addr 4)

   ;; 10**262
   (i64.store $sig-addr (i64.const 4986018643409682053))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 870))
   (%incr-n i32 $exp-addr 4)

   ;; 10**263
   (i64.store $sig-addr (i64.const 10844209322689490470))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 873))
   (%incr-n i32 $exp-addr 4)

   ;; 10**264
   (i64.store $sig-addr (i64.const 18166947671789250992))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 876))
   (%incr-n i32 $exp-addr 4)

   ;; 10**265
   (i64.store $sig-addr (i64.const 4436813267227200014))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 880))
   (%incr-n i32 $exp-addr 4)

   ;; 10**266
   (i64.store $sig-addr (i64.const 10157702602461387921))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 883))
   (%incr-n i32 $exp-addr 4)

   ;; 10**267
   (i64.store $sig-addr (i64.const 17308814271504122806))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 886))
   (%incr-n i32 $exp-addr 4)

   ;; 10**268
   (i64.store $sig-addr (i64.const 3900479892048994898))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 890))
   (%incr-n i32 $exp-addr 4)

   ;; 10**269
   (i64.store $sig-addr (i64.const 9487285883488631526))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 893))
   (%incr-n i32 $exp-addr 4)

   ;; 10**270
   (i64.store $sig-addr (i64.const 16470793372788177311))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 896))
   (%incr-n i32 $exp-addr 4)

   ;; 10**271
   (i64.store $sig-addr (i64.const 3376716830351528964))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 900))
   (%incr-n i32 $exp-addr 4)

   ;; 10**272
   (i64.store $sig-addr (i64.const 8832582056366799109))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 903))
   (%incr-n i32 $exp-addr 4)

   ;; 10**273
   (i64.store $sig-addr (i64.const 15652413588885886790))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 906))
   (%incr-n i32 $exp-addr 4)

   ;; 10**274
   (i64.store $sig-addr (i64.const 2865229465412597388))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 910))
   (%incr-n i32 $exp-addr 4)

   ;; 10**275
   (i64.store $sig-addr (i64.const 8193222850193134638))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 913))
   (%incr-n i32 $exp-addr 4)

   ;; 10**276
   (i64.store $sig-addr (i64.const 14853214581168806202))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 916))
   (%incr-n i32 $exp-addr 4)

   ;; 10**277
   (i64.store $sig-addr (i64.const 2365730085589422020))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 920))
   (%incr-n i32 $exp-addr 4)

   ;; 10**278
   (i64.store $sig-addr (i64.const 7568848625414165429))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 923))
   (%incr-n i32 $exp-addr 4)

   ;; 10**279
   (i64.store $sig-addr (i64.const 14072746800195094691))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 926))
   (%incr-n i32 $exp-addr 4)

   ;; 10**280
   (i64.store $sig-addr (i64.const 1877937722480852326))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 930))
   (%incr-n i32 $exp-addr 4)

   ;; 10**281
   (i64.store $sig-addr (i64.const 6959108171528453311))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 933))
   (%incr-n i32 $exp-addr 4)

   ;; 10**282
   (i64.store $sig-addr (i64.const 13310571232837954543))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 936))
   (%incr-n i32 $exp-addr 4)

   ;; 10**283
   (i64.store $sig-addr (i64.const 1401577992882639733))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 940))
   (%incr-n i32 $exp-addr 4)

   ;; 10**284
   (i64.store $sig-addr (i64.const 6363658509530687571))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 943))
   (%incr-n i32 $exp-addr 4)

   ;; 10**285
   (i64.store $sig-addr (i64.const 12566259155340747367))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 946))
   (%incr-n i32 $exp-addr 4)

   ;; 10**286
   (i64.store $sig-addr (i64.const 936382944446885249))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 950))
   (%incr-n i32 $exp-addr 4)

   ;; 10**287
   (i64.store $sig-addr (i64.const 5782164698985994465))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 953))
   (%incr-n i32 $exp-addr 4)

   ;; 10**288
   (i64.store $sig-addr (i64.const 11839391892159880985))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 956))
   (%incr-n i32 $exp-addr 4)

   ;; 10**289
   (i64.store $sig-addr (i64.const 482090904958843760))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 960))
   (%incr-n i32 $exp-addr 4)

   ;; 10**290
   (i64.store $sig-addr (i64.const 5214299649625942603))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 963))
   (%incr-n i32 $exp-addr 4)

   ;; 10**291
   (i64.store $sig-addr (i64.const 11129560580459816158))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 966))
   (%incr-n i32 $exp-addr 4)

   ;; 10**292
   (i64.store $sig-addr (i64.const 38446335146303243))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 970))
   (%incr-n i32 $exp-addr 4)

   ;; 10**293
   (i64.store $sig-addr (i64.const 4659743937360266958))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 973))
   (%incr-n i32 $exp-addr 4)

   ;; 10**294
   (i64.store $sig-addr (i64.const 10436365940127721601))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 976))
   (%incr-n i32 $exp-addr 4)

   ;; 10**295
   (i64.store $sig-addr (i64.const 17657143443587039905))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 979))
   (%incr-n i32 $exp-addr 4)

   ;; 10**296
   (i64.store $sig-addr (i64.const 4118185624600818085))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 983))
   (%incr-n i32 $exp-addr 4)

   ;; 10**297
   (i64.store $sig-addr (i64.const 9759418049178410510))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 986))
   (%incr-n i32 $exp-addr 4)

   ;; 10**298
   (i64.store $sig-addr (i64.const 16810958579900401042))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 989))
   (%incr-n i32 $exp-addr 4)

   ;; 10**299
   (i64.store $sig-addr (i64.const 3589320084796668795))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 993))
   (%incr-n i32 $exp-addr 4)

   ;; 10**300
   (i64.store $sig-addr (i64.const 9098336124423223898))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 996))
   (%incr-n i32 $exp-addr 4)

   ;; 10**301
   (i64.store $sig-addr (i64.const 15984606173956417776))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 999))
   (%incr-n i32 $exp-addr 4)

   ;; 10**302
   (i64.store $sig-addr (i64.const 3072849831081679254))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 1003))
   (%incr-n i32 $exp-addr 4)

   ;; 10**303
   (i64.store $sig-addr (i64.const 8452748307279486972))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 1006))
   (%incr-n i32 $exp-addr 4)

   ;; 10**304
   (i64.store $sig-addr (i64.const 15177621402526746619))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 1009))
   (%incr-n i32 $exp-addr 4)

   ;; 10**305
   (i64.store $sig-addr (i64.const 2568484348938134781))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 1013))
   (%incr-n i32 $exp-addr 4)

   ;; 10**306
   (i64.store $sig-addr (i64.const 7822291454600056380))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 1016))
   (%incr-n i32 $exp-addr 4)

   ;; 10**307
   (i64.store $sig-addr (i64.const 14389550336677458379))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 1019))
   (%incr-n i32 $exp-addr 4)

   ;; 10**308
   (i64.store $sig-addr (i64.const 2075939932782329631))
   (%incr-n i32 $sig-addr 8)
   (i32.store $exp-addr (i32.const 1023))
   (%incr-n i32 $exp-addr 4)

   (debug
    ;; check that the block is the right size
    (if (i32.gt_s $sig-addr (i32.add (global.get $powers-of-10-exp-addr)
                                     _powers-of-10-block-size))
        (then
         (unreachable)))))

 )
