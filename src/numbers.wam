(module

 (import "block-mgr" "memory-copy" (table $block-mgr-memory-copy))
 (import "block-mgr" "memory-grow" (table $block-mgr-memory-grow))
 (import "block-mgr" "memory-size" (table $block-mgr-memory-size))

 (memory $memory (export "memory") 1)

 (include "./globals.wam")

 (func $init-numbers (export "init-numbers")
   (call $init-blockset (global.get $numbers-blockset-id))

   (table.set $block-mgr-memory-copy (global.get $numbers-blockset-id) (ref.func $memory-copy))
   (table.set $block-mgr-memory-grow (global.get $numbers-blockset-id) (ref.func $memory-grow))
   (table.set $block-mgr-memory-size (global.get $numbers-blockset-id) (ref.func $memory-size)))

 ;; defines $memory-copy $memory-grow $memory-size
 (include "./memory-proxies.wam")

 (func $make-small-integer (export "make-small-integer")
   (param $x i32)
   (result i32)
   (call $make-value
         (i32.shl (local.get $x) (global.get $tag-size-bits))
         (global.get $tag-small-integer)))

 (func $make-boxed-i32 (export "make-boxed-i32")
   (param $x i32)
   (result i32)
   (call $make-box (global.get $box-type-number-i32) (local.get $x)))

 (func $make-boxed-f32 (export "make-boxed-f32")
   (param $x f32)
   (result i32)
   (call $make-box-f32 (global.get $box-type-number-f32) (local.get $x)))

 (func $make-block-f64 (export "make-block-f64")
   (param $x f64)
   (result i32)

   (local.set $block (call $alloc-block
                           (global.get $numbers-blockset-id)
                           (i32.const 8)))

   (f64.store (call $get-block-addr (local.get $block))
              (local.get $x))

   (call $make-box (global.get $box-type-number-f64) (local.get $block)))

 (func $make-block-f64-complex (export "make-block-complex-f64")
   (param $re f64)
   (param $im f64)
   (result i32)

   (local.set $block (call $alloc-block
                           (global.get $numbers-blockset-id)
                           (i32.const 16)))

   (f64.store (call $get-block-addr (local.get $block))
              (local.get $re))

   (f64.store (i32.add (call $get-block-addr (local.get $block))
                       (i32.const 8))
              (local.get $im))

   (call $make-box (global.get $box-type-number-f64-complex) (local.get $block)))

 (func $make-block-integer-i32 (export "make-block-integer-i32")
   (param $x i32)
   (result i32)

   (local.set $block (call $alloc-block
                           (global.get $numbers-blockset-id)
                           (i32.const 4)))

   (i32.store (call $get-block-addr (local.get $block))
              (local.get $x))

   (call $make-box (call $make-integer-box-type (i32.const 1)) (local.get $block)))

 (func $make-block-rational (export "make-block-rational")
   (param $n i32)
   (param $d i32)
   (result i32)

   (local $block i32)
   (local $block-addr i32)

   (local $d-size i32)
   (local $n-size i32)

   (local $d-byte-size i32)
   (local $n-byte-size i32)

   (local.set $d-size (call $get-integer-size (local.get $d)))
   (local.set $n-size (call $get-integer-size (local.get $n)))

   (local.set $d-byte-size (i32.shl (local.get $d-size) (i32.const 2)))
   (local.set $n-byte-size (i32.shl (local.get $n-size) (i32.const 2)))

   (local.set $block (call $alloc-block
                           (global.get $numbers-blockset-id)
                           (i32.add (local.get $n-byte-size)
                                    (local.get $d-byte-size))))

   (local.set $block-addr (call $get-block-addr (local.get $block)))

   (memory.copy (local.get $block-addr)
                (call $get-integer-addr (local.get $n))
                (local.get $n-byte-size))

   (memory.copy (i32.add (local.get $block-addr)
                         (local.get $n-byte-size))
                (call $get-integer-addr (local.get $d))
                (local.get $d-byte-size))

   (call $make-box (call $make-rational-box-type
                         (local.get $n-size)
                         (local.get $d-size))
         (local.get $block)))

 (func $make-block-complex-integer (export "make-block-complex-integer")
   (param $re i32)
   (param $im i32)
   (result i32)

   (local $block i32)
   (local $block-addr i32)

   (local $re-size i32)
   (local $im-size i32)

   (local $re-byte-size i32)
   (local $im-byte-size i32)

   (local.set $re-size (call $get-integer-size (local.get $re)))
   (local.set $im-size (call $get-integer-size (local.get $im)))

   (local.set $re-byte-size (i32.shl (local.get $re-size) (i32.const 2)))
   (local.set $im-byte-size (i32.shl (local.get $im-size) (i32.const 2)))

   (local.set $block (call $alloc-block
                           (global.get $numbers-blockset-id)
                           (i32.add (local.get $im-byte-size)
                                    (local.get $re-byte-size))))

   (local.set $block-addr (call $get-block-addr (local.get $block)))

   (memory.copy (local.get $block-addr)
                (call $get-integer-addr (local.get $re))
                (local.get $re-byte-size))

   (memory.copy (i32.add (local.get $block-addr)
                         (local.get $re-byte-size))
                (call $get-integer-addr (local.get $im))
                (local.get $im-byte-size))

   (call $make-box (call $make-complex-box-type
                         (local.get $im-size)
                         (local.get $re-size))
         (local.get $block)))

 (func $make-block-complex-rational (export "make-block-complex-rational")
   (param $re i32)
   (param $im i32)
   (result i32)

   (local $block i32)
   (local $block-addr i32)

   (local $re-size i32)
   (local $im-size i32)

   (local $re-byte-size i32)
   (local $im-byte-size i32)

   (local.set $re-size (call $get-rational-size (local.get $re)))
   (local.set $im-size (call $get-rational-size (local.get $im)))

   (local.set $re-byte-size (i32.shl (local.get $re-size) (i32.const 2)))
   (local.set $im-byte-size (i32.shl (local.get $im-size) (i32.const 2)))

   (local.set $block (call $alloc-block
                           (global.get $numbers-blockset-id)
                           (i32.add (local.get $im-byte-size)
                                    (local.get $re-byte-size))))

   (local.set $block-addr (call $get-block-addr (local.get $block)))

   (memory.copy (local.get $block-addr)
                (call $get-integer-addr (local.get $re))
                (local.get $re-byte-size))

   (memory.copy (i32.add (local.get $block-addr)
                         (local.get $re-byte-size))
                (call $get-integer-addr (local.get $im))
                (local.get $im-byte-size))

   (call $make-box (call $make-complex-rational-box-type
                         (call $get-rational-n-size (local.get $re))
                         (call $get-rational-d-size (local.get $re))
                         (call $get-rational-n-size (local.get $im))
                         (call $get-rational-d-size (local.get $im)))
         (local.get $block)))

 (func $make-giant-complex-rational (export "make-giant-complex-rational")
   (param $x i32)
   (result i32)


   ))
