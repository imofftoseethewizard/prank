(module

 ;;=============================================================================
 ;;
 ;; Pairs
 ;;
 ;; A pair is the most basic data structure, consisting of 2 address-sized
 ;; words.
 ;;
 ;; The lisp terminology of "car", "cdr", etc is used below.
 ;;
 ;; There is a free list linked through the first element of each pair.  When
 ;; the free list is empty (ie. the head has value $null), then a new block
 ;; of pairs is initialized, and if necessary, this module's memory is grown
 ;; to allow that.
 ;;

 (memory (debug (export "memory")) 1)

 (include "./constants.wam")
 (include "./globals.wam")
 (include "./gc-client.wam")
 (include "./values.wam")

 ;;-----------------------------------------------------------------------------
 ;;
 ;; Globals
 ;;
 ;; $pairs-top is the address just beyond the highest initialized pair.
 ;; $pair-free-list is the address of the head of the free list.

 (global $pairs-top      (debug (export "pairs-top"))      (mut i32) (i32.const 0))
 (global $pair-free-list (debug (export "pair-free-list")) (mut i32) (i32.const #null))

 (macro %get-pairs-top
   (global.get $pairs-top))

 (macro %set-pairs-top
   (expr ,v)
   (global.set $pairs-top ,v))

 (macro %get-pair-free-list
   (global.get $pair-free-list))

 (macro %set-pair-free-list
   (expr ,v)
   (global.set $pair-free-list ,v))

 ;; $pair-count is used in tests to ensure that there are no memory leaks in
 ;; uses of make-pair and dealloc-pair.
 (debug
  (global $pair-count (debug (export "pair-count")) (mut i32) (i32.const 0)))

 ;; initialize 8 KB of pairs at a time. A higher number here increases run time variance
 ;; in order to gain some CPU efficiency.

 (define _provision-free-list-count (i32.const 1024))

 ;;-----------------------------------------------------------------------------
 ;;
 ;; Initialization
 ;;

 (start $init-pairs)
 (func $init-pairs (debug (export "init-pairs"))

   (%set-pairs-top (i32.const 0))
   (%set-pair-free-list _null)
   (debug
    (global.set $pair-count (i32.const 0))))

 ;;-----------------------------------------------------------------------------
 ;;
 ;; Accessors
 ;;

 (macro %get-pair-car
   (expr ,pair)
   (i32.load ,pair))

 (macro %get-pair-cdr
   (expr ,pair)
   (i32.load (i32.add ,pair _value-size)))

 (macro %set-pair-car
   (expr ,pair)
   (expr ,value)
   (i32.store ,pair ,value))

 (macro %set-pair-cdr
   (expr ,pair)
   (expr ,value)
   (i32.store (i32.add ,pair _value-size) ,value))

 (func $is-pair (export "is-pair")
   (param $x i32)
   (result i32)
   (i32.eq (%get-value-tag $x) _tag-pair))

 (func $get-car (export "get-car")
   (param $pair i32)
   (result i32)
   (%get-pair-car (%get-value-data $pair)))

 (func $get-cdr (export "get-cdr")
   (param $pair i32)
   (result i32)
   (%get-pair-cdr (%get-value-data $pair)))

 (func $get-cdar (export "get-cdar")
   (param $pair i32)
   (result i32)
   (%get-pair-car (%get-value-data (%get-pair-cdr (%get-value-data $pair)))))

 (func $get-cddr (export "get-cddr")
   (param $pair i32)
   (result i32)
   (%get-pair-cdr (%get-value-data (%get-pair-cdr (%get-value-data $pair)))))

 (func $get-cddar (export "get-cddar")
   (param $pair i32)
   (result i32)
   (%get-pair-car (%get-value-data (%get-pair-cdr (%get-value-data (%get-pair-cdr (%get-value-data $pair)))))))

 (func $get-pair-car (export "get-pair-car")
   (param $pair i32)
   (result i32)
   (%get-pair-car $pair))

 (func $get-pair-cdr (export "get-pair-cdr")
   (param $pair i32)
   (result i32)
   (%get-pair-cdr $pair))

 (func $get-pair-caar (export "get-pair-caar")
   (param $pair i32)
   (result i32)
   (%get-pair-car (%get-pair-car $pair)))

 (func $get-pair-cadr (export "get-pair-cadr")
   (param $pair i32)
   (result i32)
   (%get-pair-cdr (%get-pair-car $pair)))

 (func $get-pair-cdar (export "get-pair-cdar")
   (param $pair i32)
   (result i32)
   (%get-pair-car (%get-pair-cdr $pair)))

 (func $get-pair-cddr (export "get-pair-cddr")
   (param $pair i32)
   (result i32)
   (%get-pair-cdr (%get-pair-cdr $pair)))

 (func $get-pair-caaar (export "get-pair-caaar")
   (param $pair i32)
   (result i32)
   (%get-pair-car (%get-pair-car (%get-pair-car $pair))))

 (func $get-pair-caadr (export "get-pair-caadr")
   (param $pair i32)
   (result i32)
   (%get-pair-cdr (%get-pair-car (%get-pair-car $pair))))

 (func $get-pair-cadar (export "get-pair-cadar")
   (param $pair i32)
   (result i32)
   (%get-pair-car (%get-pair-cdr (%get-pair-car $pair))))

 (func $get-pair-caddr (export "get-pair-caddr")
   (param $pair i32)
   (result i32)
   (%get-pair-cdr (%get-pair-cdr (%get-pair-car $pair))))

 (func $get-pair-cdaar (export "get-pair-cdaar")
   (param $pair i32)
   (result i32)
   (%get-pair-car (%get-pair-car (%get-pair-cdr $pair))))

 (func $get-pair-cdadr (export "get-pair-cdadr")
   (param $pair i32)
   (result i32)
   (%get-pair-cdr (%get-pair-car (%get-pair-cdr $pair))))

 (func $get-pair-cddar (export "get-pair-cddar")
   (param $pair i32)
   (result i32)
   (%get-pair-car (%get-pair-cdr (%get-pair-cdr $pair))))

 (func $get-pair-cdddr (export "get-pair-cdddr")
   (param $pair i32)
   (result i32)
   (%get-pair-cdr (%get-pair-cdr (%get-pair-cdr $pair))))

 (func $set-pair-car (export "set-pair-car")
   (param $pair i32)
   (param $value i32)
   (%set-pair-car $pair $value))

 (func $set-pair-cdr (export "set-pair-cdr")
   (param $pair i32)
   (param $value i32)
   (%set-pair-cdr $pair $value))

 (func $set-pair-caar (export "set-pair-caar")
   (param $pair i32)
   (param $value i32)
   (%set-pair-car (%get-pair-car $pair) $value))

 (func $set-pair-cadr (export "set-pair-cadr")
   (param $pair i32)
   (param $value i32)
   (%set-pair-cdr (%get-pair-car $pair) $value))

 (func $set-pair-cdar (export "set-pair-cdar")
   (param $pair i32)
   (param $value i32)
   (%set-pair-car (%get-pair-cdr $pair) $value))

 (func $set-pair-cddr (export "set-pair-cddr")
   (param $pair i32)
   (param $value i32)
   (%set-pair-cdr (%get-pair-cdr $pair) $value))

 (func $set-pair-caaar (export "set-pair-caaar")
   (param $pair i32)
   (param $value i32)
   (%set-pair-car (%get-pair-car (%get-pair-car $pair)) $value))

 (func $set-pair-caadr (export "set-pair-caadr")
   (param $pair i32)
   (param $value i32)
   (%set-pair-cdr (%get-pair-car (%get-pair-car $pair)) $value))

 (func $set-pair-cadar (export "set-pair-cadar")
   (param $pair i32)
   (param $value i32)
   (%set-pair-car (%get-pair-cdr (%get-pair-car $pair)) $value))

 (func $set-pair-caddr (export "set-pair-caddr")
   (param $pair i32)
   (param $value i32)
   (%set-pair-cdr (%get-pair-cdr (%get-pair-car $pair)) $value))

 (func $set-pair-cdaar (export "set-pair-cdaar")
   (param $pair i32)
   (param $value i32)
   (%set-pair-car (%get-pair-car (%get-pair-cdr $pair)) $value))

 (func $set-pair-cdadr (export "set-pair-cdadr")
   (param $pair i32)
   (param $value i32)
   (%set-pair-cdr (%get-pair-car (%get-pair-cdr $pair)) $value))

 (func $set-pair-cddar (export "set-pair-cddar")
   (param $pair i32)
   (param $value i32)
   (%set-pair-car (%get-pair-cdr (%get-pair-cdr $pair)) $value))

 (func $set-pair-cdddr (export "set-pair-cdddr")
   (param $pair i32)
   (param $value i32)
   (%set-pair-cdr (%get-pair-cdr (%get-pair-cdr $pair)) $value))

 ;;-----------------------------------------------------------------------------
 ;;
 ;; Allocation
 ;;

 (func $make-pair (export "make-pair")

   ;; Creates and initializes a new pair, provisioning more and growing
   ;; memory if necessary.

   (param $car i32)
   (param $cdr i32)
   (result i32)

   (local $pair-addr i32)

   ;; Ensure that the free list is not empty.

   (if (i32.eq (%get-pair-free-list) _null)
       (then
        ($provision-free-list _provision-free-list-count)))

   (debug
    (%global.incr i32 $pair-count))

   ;; Pop the first pair from the free list.

   (set! $pair-addr (%get-pair-free-list))
   (%set-pair-free-list (i32.load (%get-pair-free-list)))

   ;; Initialize

   (%set-pair-car $pair-addr $car)
   (%set-pair-cdr $pair-addr $cdr)

   $pair-addr)

 (func $provision-free-list (debug (export "provision-free-list"))

   ;; Ensures that this module's memory is big enough for the new pairs,
   ;; and then adds $count new pairs to the free list.

   (param $count i32)

   (local $bytes-required i32)
   (local $new-top i32)
   (local $pages-required i32)

   (set! $new-top (i32.add (%get-pairs-top) (i32.shl $count _pair-size-bits)))

   (set! $bytes-required (i32.sub $new-top (i32.shl (memory.size) _page-size-bits)))

   (if (i32.gt_s $bytes-required (i32.const 0))
       (then
        (set! $pages-required (i32.add (i32.shr_u (i32.sub $bytes-required (i32.const 1))
                                                  _page-size-bits)
                                       (i32.const 1)))

        (drop (memory.grow $pages-required))))

   ($fill-pair-free-list $count))

 (func $fill-pair-free-list (debug (export "fill-pair-free-list"))
   (param $count i32)

   (local $next-pair i32)
   (local $pair i32)
   (local $top i32)

   (set! $pair (%get-pairs-top))

   (set! $top (i32.add (i32.shl $count _pair-size-bits) (%get-pairs-top)))

   (loop $again
     (set! $next-pair (i32.add $pair _pair-size))
     (if (i32.lt_u $next-pair $top)
         (then
          (%set-pair-car $pair $next-pair)
          (debug
           (%set-pair-cdr $pair (i32.const 0xdeadce11)))
          (set! $pair $next-pair)
          (br $again))
       (else
        (i32.store $pair (%get-pair-free-list)))))

   (%set-pair-free-list (%get-pairs-top))
   (%set-pairs-top $top))

 ;;-----------------------------------------------------------------------------
 ;;
 ;; Deallocation
 ;;

 (func $dealloc-pair (export "dealloc-pair")
   (param $pair i32)

   (local $addr i32)
   (set! $addr (%get-value-data $pair))

   (%set-pair-car $addr (%get-pair-free-list))

   (debug
    (%set-pair-cdr $addr (i32.const 0xdeadce11))
    (%global.decr i32 $pair-count))

   (%set-pair-free-list $addr))

 ;; end of module
 )
