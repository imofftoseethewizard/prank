(module

 (include "./block-mgr-memory-proxy-imports.wam")

 (import "block-mgr" "init-blockset" (func $init-blockset (param i32 i32)))
 (import "block-mgr" "get-block-addr" (func $get-block-addr (param i32) (result i32)))
 (import "block-mgr" "get-block-size" (func $get-block-size (param i32) (result i32)))

 (include "./globals.wam")
 (include "./block-mgr-memory-proxies.wam")

 (memory (export "memory") 1)

 (func $init (export "init")
   (param $blockset-id i32)

   ;; Init blockset such that during defrag blocks > 32KB are immobile, single
   ;; blocks between 4-32KB can be moved, and groups of blocks in aggregate < 4KB
   ;; can be moved.
   (call $init-blockset
         (local.get $blockset-id)
         (i32.const 0x100)) ;; aggregate block move size limit

   (call $init-blockset-memory-proxies (local.get $blockset-id)))

 (func $fill (export "fill")
   (param $block i32)
   (param $value i32)

   (memory.fill (call $get-block-addr (local.get $block))
                (local.get $value)
                (call $get-block-size (local.get $block))))

 (func $check-fill (export "check-fill")
   (param $block i32)
   (param $value i32)
   (result i32)

   (local $addr i32)
   (local $end i32)

   (local.set $addr (call $get-block-addr (local.get $block)))
   (local.set $end (i32.add (local.get $addr)
                            (call $get-block-size (local.get $block))))

   (loop $again
     (if (i32.lt_u (local.get $addr) (local.get $end))
         (then
          (if (i32.eq (i32.load8_u (local.get $addr)) (local.get $value))
              (then
               (local.set $addr (i32.add (local.get $addr) (i32.const 1)))
               (br $again))))))

   (i32.eq (local.get $addr) (local.get $end)))

 ;; end of module
 )
