(module

 (include "./block-mgr-memory-proxy-imports.wam")

 (import "block-mgr" "init-blockset" (func $init-blockset (param i32 i32)))
 (import "block-mgr" "get-block-addr" (func $get-block-addr (param i32) (result i32)))
 (import "block-mgr" "get-block-size" (func $get-block-size (param i32) (result i32)))

 (include "./constants.wam")
 (include "./globals.wam")
 (include "./block-mgr-memory-proxies.wam")

 (memory (export "memory") 1)

 (func $init (export "init")
   (param $blockset i32)

   ($init-blockset $blockset (i32.const 0x100))
   ($init-blockset-memory-proxies $blockset))

 (func $fill (export "fill")
   (param $block i32)
   (param $value i32)

   (memory.fill ($get-block-addr $block)
                $value
                ($get-block-size $block)))

 (func $check-fill (export "check-fill")
   (param $block i32)
   (param $value i32)
   (result i32)

   (local $addr i32)
   (local $end i32)

   (set! $addr ($get-block-addr $block))
   (set! $end (i32.add $addr ($get-block-size $block)))

   (set! $value (i32.and $value (i32.const 0xff)))

   (loop $again
     (if (i32.lt_u $addr $end)
         (then
          (if (i32.eq (i32.load8_u $addr) $value)
              (then
               (set! $addr (i32.add $addr (i32.const 1)))
               (br $again))))))

   (i32.eq $addr $end))

 ;; end of module
 )
