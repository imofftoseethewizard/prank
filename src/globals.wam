;; This file contains a fragment of a module which is included in most modules
;; in this project.  It should only contain non-mutable globals which are used
;; in more than one module.

(const #page-size       0x10000)
(const #page-size-bits  16)
(const #pair-size       8)
(const #pair-size-bits  3)
(const #tag-size-bits   3)
(const #value-size      4)
(const #value-size-bits 2)

(global $page-size             (export "page-size")             i32 (i32.const #page-size))
(global $pair-size             (export "pair-size")             i32 (i32.const #pair-size))
(global $value-size            (export "value-size")            i32 (i32.const #value-size))

(global $page-size-bits        (export "page-size-bits")        i32 (i32.const #page-size-bits))
(global $pair-size-bits        (export "pair-size-bits")        i32 (i32.const #pair-size-bits))
(global $tag-size-bits         (export "tag-size-bits")         i32 (i32.const #tag-size-bits))
(global $value-size-bits       (export "value-size-bits")       i32 (i32.const #value-size-bits))

(global $tag-small-integer     (export "tag-small-integer")     i32 (i32.const 0x00))
(global $tag-box               (export "tag-box")               i32 (i32.const 0x01))
(global $tag-char              (export "tag-char")              i32 (i32.const 0x02))
(global $tag-pair              (export "tag-pair")              i32 (i32.const 0x03))
(global $tag-procedure         (export "tag-procedure")         i32 (i32.const 0x04))
(global $tag-string            (export "tag-string")            i32 (i32.const 0x05))
(global $tag-symbol            (export "tag-symbol")            i32 (i32.const 0x06))
(global $tag-singleton         (export "tag-singleton")         i32 (i32.const 0x07))

(global $singleton-type-mask   (export "singleton-type-mask")   i32 (i32.const 0x00000f07))

(global $type-null             (export "type-null")             i32 (i32.const 0x00000f07))
(global $type-boolean          (export "type-boolean")          i32 (i32.const 0x00000007))
(global $type-eof              (export "type-eof")              i32 (i32.const 0x00000e07))

(global $eof                   (export "#eof-object")           i32 (i32.const 0x00000e0f))
(global $false                 (export "#false")                i32 (i32.const 0x00000007))
(global $null                  (export "#null")                 i32 (i32.const 0xffffffff))
(global $true                  (export "#true")                 i32 (i32.const 0x0000000f))

(global $box-type-mask         (export "box-type-mask")         i32 (i32.const 0x000000ff))
(global $box-flags-mask        (export "box-flags-mask")        i32 (i32.const 0xffffff00))

(global $type-bytevector       (export "type-bytevector")       i32 (i32.const 0x00000000))
(global $type-number           (export "type-number")           i32 (i32.const 0x00000001))
(global $type-string           (export "type-string")           i32 (i32.const 0x00000002))
(global $type-vector           (export "type-vector")           i32 (i32.const 0x00000003))
(global $type-weakref          (export "typevalue-weakref")     i32 (i32.const 0x00000004))

(global $bytevectors-blockset-id (export "bytevectors-blockset-id") i32 (i32.const 0x00000000))
(global $numbers-blockset-id     (export "numbers-blockset-id")     i32 (i32.const 0x00000001))
(global $strings-blockset-id     (export "strings-blockset-id")     i32 (i32.const 0x00000002))
(global $vectors-blockset-id     (export "vectors-blockset-id")     i32 (i32.const 0x00000003))
(global $blockset-count          (export "blockset-count")          i32 (i32.const 4))

(macro %incr
  (class Int)
  (label $var)
  (%incr-n Int $var 1))

(macro %decr
  (class Int)
  (label $var)
  (%decr-n Int $var 1))

(macro %incr-n
  (class Int)
  (label $var)
  (expr ,n)
  (local.set $var (Int.add (local.get $var) (Int.const ,n))))

(macro %decr-n
  (class Int)
  (label $var)
  (expr ,n)
  (local.set $var (Int.sub (local.get $var) (Int.const ,n))))

(macro %global.incr
  (class Int)
  (label $var)
  (global.set $var (Int.add (global.get $var) (Int.const 1))))

(macro %global.decr
  (class Int)
  (label $var)
  (global.set $var (Int.sub (global.get $var) (Int.const 1))))

(macro %next-cdr
  (label $var)
  (local.set $var (call $get-pair-cdr (local.get $var))))

(macro %double
  (class Int)
  (label $var)
  (local.set $var (Int.shl (local.get $var) (Int.const 1))))

(macro %global.double
  (class Int)
  (label $var)
  (global.set $var (Int.shl (global.get $var) (Int.const 1))))

(macro %rank
  (class Int)
  (expr ,n)
  (Int.sub (Int.const Int.bits) (Int.clz ,n)))
