;; This file contains a fragment of a module which is included in most modules
;; in this project.  It should only contain non-mutable globals which are used
;; in more than one module.

(const #null -1)

(const #page-size       0x10000)
(const #page-size-bits  16)
(const #pair-size       8)
(const #pair-size-bits  3)
(const #tag-size-bits   3)
(const #value-size      4)
(const #value-size-bits 2)

(define _page-size       (i32.const #page-size))
(define _pair-size       (i32.const #pair-size))
(define _value-size      (i32.const #value-size))

(define _page-size-bits  (i32.const #page-size-bits))
(define _pair-size-bits  (i32.const #pair-size-bits))
(define _tag-size-bits   (i32.const #tag-size-bits))
(define _value-size-bits (i32.const #value-size-bits))

(define _tag-small-integer     (i32.const 0x00))
(define _tag-box               (i32.const 0x01))
(define _tag-char              (i32.const 0x02))
(define _tag-pair              (i32.const 0x03))
(define _tag-procedure         (i32.const 0x04))
(define _tag-unused            (i32.const 0x05))
(define _tag-symbol            (i32.const 0x06))
(define _tag-singleton         (i32.const 0x07))

(define _singleton-type-mask (i32.const 0x00000f07))

(define _type-null           (i32.const 0x00000f07))
(define _type-boolean        (i32.const 0x00000007))
(define _type-eof            (i32.const 0x00000e07))
(define _type-error          (i32.const 0x00000107))

(define _eof                 (i32.const 0x00000e0f))
(define _false               (i32.const 0x00000007))
(define _null                (i32.const 0xffffffff))
(define _true                (i32.const 0x0000000f))

(define _box-type-mask       (i32.const 0x000000ff))
(define _box-flags-mask      (i32.const 0xffffff00))

(define _type-bytevector     (i32.const 0x00000000))
(define _type-number         (i32.const 0x00000001))
(define _type-string         (i32.const 0x00000002))
(define _type-vector         (i32.const 0x00000003))
(define _type-weakref        (i32.const 0x00000004))

(define _blockset-size       (i32.const 0x0040))
(define _blockset-size-bits  (i32.const 6))

(macro %get-blockset-id
  (expr ,blockset)
  (i32.shr_u ,blockset (global.get $blockset-size-bits)))

(define _bytevectors-blockset (i32.const 0x00000000))
(define _numbers-blockset     (i32.const 0x00000040))
(define _strings-blockset     (i32.const 0x00000080))
(define _vectors-blockset     (i32.const 0x000000c0))
(define _blockset-count       (i32.const 4))

(define _error-delimiter-must-follow-directive (i32.const 0x00010107))
(define _error-illegal-bytevector-element      (i32.const 0x00020107))
(define _error-incomplete-input                (i32.const 0x00030107))
(define _error-pair-missing-close-parenthesis  (i32.const 0x00040107))
(define _error-unmatched-close-parenthesis     (i32.const 0x00050107))
(define _error-unrecognized-token              (i32.const 0x00060107))

(debug
 (global $page-size            (export "page-size")            i32 _page-size)
 (global $pair-size            (export "pair-size")            i32 _pair-size)
 (global $value-size           (export "value-size")           i32 _value-size)

 (global $page-size-bits       (export "page-size-bits")       i32 _page-size-bits)
 (global $pair-size-bits       (export "pair-size-bits")       i32 _pair-size-bits)
 (global $tag-size-bits        (export "tag-size-bits")        i32 _tag-size-bits)
 (global $value-size-bits      (export "value-size-bits")      i32 _value-size-bits)

 (global $tag-small-integer    (export "tag-small-integer")    i32 _tag-small-integer)
 (global $tag-box              (export "tag-box")              i32 _tag-box)
 (global $tag-char             (export "tag-char")             i32 _tag-char)
 (global $tag-pair             (export "tag-pair")             i32 _tag-pair)
 (global $tag-procedure        (export "tag-procedure")        i32 _tag-procedure)
 (global $tag-unused           (export "tag-unused")           i32 _tag-unused)
 (global $tag-symbol           (export "tag-symbol")           i32 _tag-symbol)
 (global $tag-singleton        (export "tag-singleton")        i32 _tag-singleton)

 (global $singleton-type-mask  (export "singleton-type-mask")  i32 _singleton-type-mask)

 (global $type-null            (export "type-null")            i32 _type-null)
 (global $type-boolean         (export "type-boolean")         i32 _type-boolean)
 (global $type-eof             (export "type-eof")             i32 _type-eof)

 (global $eof                  (export "#eof-object")          i32 _eof)
 (global $false                (export "#false")               i32 _false)
 (global $null                 (export "#null")                i32 _null)
 (global $true                 (export "#true")                i32 _true)

 (global $box-type-mask        (export "box-type-mask")        i32 _box-type-mask)
 (global $box-flags-mask       (export "box-flags-mask")       i32 _box-flags-mask)

 (global $type-bytevector      (export "type-bytevector")      i32 _type-bytevector)
 (global $type-number          (export "type-number")          i32 _type-number)
 (global $type-string          (export "type-string")          i32 _type-string)
 (global $type-vector          (export "type-vector")          i32 _type-vector)
 (global $type-weakref         (export "typevalue-weakref")    i32 _type-weakref)

 (global $blockset-size        (export "blockset-size")        i32 _blockset-size)
 (global $blockset-size-bits   (export "blockset-size-bits")   i32 _blockset-size-bits)

 (global $bytevectors-blockset (export "bytevectors-blockset") i32 _bytevectors-blockset)
 (global $numbers-blockset     (export "numbers-blockset")     i32 _numbers-blockset)
 (global $strings-blockset     (export "strings-blockset")     i32 _strings-blockset)
 (global $vectors-blockset     (export "vectors-blockset")     i32 _vectors-blockset)
 (global $blockset-count       (export "blockset-count")       i32 _blockset-count))

(macro %incr
  (class Int)
  (label $var)
  (%incr-n Int $var 1))

(macro %decr
  (class Int)
  (label $var)
  (%decr-n Int $var 1))

(macro %incr-n
  (class Int)
  (label $var)
  (expr ,n)
  (set! $var (Int.add $var (Int.const ,n))))

(macro %decr-n
  (class Int)
  (label $var)
  (expr ,n)
  (set! $var (Int.sub $var (Int.const ,n))))

(macro %global.incr
  (class Int)
  (label $var)
  (global.set $var (Int.add (global.get $var) (Int.const 1))))

(macro %global.decr
  (class Int)
  (label $var)
  (global.set $var (Int.sub (global.get $var) (Int.const 1))))

(macro %global.incr-n
  (class Int)
  (label $var)
  (expr ,n)
  (global.set $var (Int.add (global.get $var) (Int.const ,n))))

(macro %global.decr-n
  (class Int)
  (label $var)
  (expr ,n)
  (global.set $var (Int.sub (global.get $var) (Int.const ,n))))

(macro %next-cdr
  (label $var)
  (set! $var ($get-pair-cdr $var)))

(macro %double
  (class Int)
  (label $var)
  (set! $var (Int.shl $var (Int.const 1))))

(macro %global.double
  (class Int)
  (label $var)
  (global.set $var (Int.shl (global.get $var) (Int.const 1))))

(macro %rank
  (class Int)
  (expr ,n)
  (Int.sub (Int.const Int.bits) (Int.clz ,n)))
