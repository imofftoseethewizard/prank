(module

 (import "block-mgr" "alloc-block"        (func $alloc-block        (param i32 i32) (result i32)))
 (import "block-mgr" "get-block-ref-addr" (func $get-block-ref-addr (param i32 i32) (result i32)))
 (import "block-mgr" "init-blockset"      (func $init-blockset      (param i32 i32 i32)))
 (import "block-mgr" "resize-block"       (func $resize-block       (param i32 i32) (result i32)))
 (import "strings" "string-equal"         (func $string-equal       (param i32 i32) (result i32)))
 (import "strings" "string-hash"          (func $string-hash        (param i32)     (result i32)))

 (include "./block-mgr-memory-proxy-imports.wam")

 (include "./globals.wam")
 (include "./algorithms.wam")
 (include "./block-mgr-memory-proxies.wam")

 (memory (debug (export "memory")) 1)

 (global $symbol-count                  (debug (export "symbol-count"))                  (mut i32) (i32.const 0))
 (global $symbol-index-hashes-block-ref (debug (export "symbol-index-hashes-block-ref")) (mut i32) (i32.const 0))
 (global $symbol-index-values-block-ref (debug (export "symbol-index-values-block-ref")) (mut i32) (i32.const 0))
 (global $symbol-table-block-ref        (debug (export "symbol-table-block-ref"))        (mut i32) (i32.const 0))
 (global $symbol-table-size             (debug (export "symbol-table-size"))             (mut i32) (i32.const 0))

 (global $initial-table-size (debug (export "initial-table-size")) i32 (i32.const 16))

 (start $init-symbols)
 (func $init-symbols (debug (export "init-symbols"))

   (call $init-blockset
         (global.get $symbols-blockset-id)
         (i32.const 0x1000)
         (i32.const 0x8000))

   ;; defined in block-mgr-memory-proxies.wam
   (call $init-blockset-memory-proxies (global.get $symbols-blockset-id))

   (global.set $symbol-count (i32.const 0))
   (global.set $symbol-table-size (global.get $initial-table-size))

   (global.set $symbol-index-hashes-block-ref
               (call $alloc-block
                     (global.get $symbols-blockset-id)
                     (i32.shl (global.get $initial-table-size)
                              (global.get $value-size-bits))))

   (global.set $symbol-index-values-block-ref
               (call $alloc-block
                     (global.get $symbols-blockset-id)
                     (i32.shl (global.get $initial-table-size)
                              (global.get $value-size-bits))))

   (global.set $symbol-table-block-ref
               (call $alloc-block
                     (global.get $symbols-blockset-id)
                     (i32.shl (global.get $initial-table-size)
                              (global.get $value-size-bits)))))

 (macro %get-symbol-table
   (call $get-block-ref-addr
         (global.get $symbols-blockset-id)
         (global.get $symbol-table-block-ref)))

 (macro %get-symbol-index-hashes
   (call $get-block-ref-addr
         (global.get $symbols-blockset-id)
         (global.get $symbol-index-hashes-block-ref)))

 (macro %get-symbol-index-values
   (call $get-block-ref-addr
         (global.get $symbols-blockset-id)
         (global.get $symbol-index-values-block-ref)))

 ;; Calculate the index from the offset
 (macro %calc-table-offset-idx
   (expr ,offset)
   (i32.shr_u ,offset (global.get $value-size-bits)))

 (macro %calc-index-value-offset-idx
   (expr ,offset)
   (i32.shr_u ,offset (global.get $value-size-bits)))

 (macro %calc-index-hash-offset-idx
   (expr ,offset)
   (i32.shr_u ,offset (global.get $value-size-bits)))

 ;; Calculate the offset from the index
 (macro %calc-table-idx-offset
   (expr ,offset)
   (i32.shl ,offset (global.get $value-size-bits)))

 (macro %calc-index-value-idx-offset
   (expr ,offset)
   (i32.shl ,offset (global.get $value-size-bits)))

 (macro %calc-index-hash-idx-offset
   (expr ,offset)
   (i32.shl ,offset (global.get $value-size-bits)))

 (macro %get-symbol-index-hash
   (expr ,idx)
   (i32.load (i32.add (%get-symbol-index-hashes)
                      (%calc-index-hash-idx-offset ,idx))))

 (macro %get-symbol-index-value
   (expr ,idx)
   (i32.load (i32.add (%get-symbol-index-values)
                      (%calc-index-value-idx-offset ,idx))))

 (macro %get-symbol-name
   (expr ,idx)
   (i32.load (i32.add (%get-symbol-table)
                      (%calc-table-idx-offset ,idx))))

 (func $inter-symbol (export "inter-symbol")
   (param $name i32)
   (result i32)

   (local $candidate i32)
   (local $idx i32)
   (local $symbol i32)
   (local $name-hash i32)
   (local $hash i32)

   (local.set $hash (call $string-hash (local.get $name)))
   (local.set $symbol (global.get $null))

   (local.set $idx (call $find-symbol-idx (local.get $name-hash)))

   (if (i32.lt_u (local.get $idx) (global.get $symbol-count))
       (then
        (loop $again
          (local.set $hash (%get-symbol-index-hash (local.get $idx)))
          (if (i32.eq (local.get $hash) (local.get $name-hash))
              (then
               (local.set $candidate (%get-symbol-index-value (local.get $idx)))
               (if (call $string-equal
                         (local.get $name)
                         (%get-symbol-name (local.get $candidate)))
                   (then
                    (local.set $symbol (local.get $candidate)))
                 (else
                  (%incr i32 $idx)
                  (if (i32.lt_u (local.get $idx) (global.get $symbol-count))
                      (then
                       (br $again))))))))))

   (if (i32.eq (local.get $symbol) (global.get $null))
       (then
        (local.set $symbol (call $make-symbol (local.get $name)))

        (call $insert-symbol-index-entry
              (local.get $idx)
              (local.get $symbol)
              (local.get $name)
              (local.get $name-hash))))

   (local.get $symbol))

 (func $find-symbol-idx (debug (export "find-symbol-idx"))
   (param $name-hash i32)
   (result i32)

   (local $lo i32)
   (local $hi i32)
   (local $mid i32)
   (local $index i32)

   (local.set $index (%get-symbol-index-hashes))
   (local.set $lo (local.get $index))
   (local.set $hi (i32.add (local.get $lo)
                           (i32.shl (global.get $symbol-count)
                                    (global.get $value-size-bits))))

   (%calc-index-hash-offset-idx (i32.sub (%bisect-left i32 $lo $mid $hi $name-hash)
                                         (local.get $index))))

 (macro %is-symbol-table-full
   (i32.eq (global.get $symbol-count) (global.get $symbol-table-size)))

 (func $make-symbol (debug (export "make-symbol"))
   (param $name i32)
   (result i32)

   (local $symbol-idx i32)

   (if (%is-symbol-table-full)
       (then
        (call $grow-symbol-table)))

   (local.set $symbol-idx (global.get $symbol-count))
   (%global.incr i32 $symbol-count)

   (i32.store (i32.add (%get-symbol-table) (%calc-table-idx-offset (local.get $symbol-idx)))
              (local.get $name))

   (local.get $symbol-idx))

 (func $grow-symbol-table (debug (export "grow-symbol-table"))

   (global.set $symbol-table-size (i32.shl (global.get $symbol-table-size)
                                           (i32.const 1)))

   (global.set $symbol-table-block-ref
               (call $resize-block
                     (global.get $symbol-table-block-ref)
                     (i32.shl (global.get $symbol-table-size)
                              (global.get $value-size-bits))))

   (global.set $symbol-index-hashes-block-ref
               (call $resize-block
                     (global.get $symbol-index-hashes-block-ref)
                     (i32.shl (global.get $symbol-table-size)
                              (global.get $value-size-bits))))

   (global.set $symbol-index-values-block-ref
               (call $resize-block
                     (global.get $symbol-index-values-block-ref)
                     (i32.shl (global.get $symbol-table-size)
                              (global.get $value-size-bits)))))

 (func $insert-symbol-index-entry (debug (export "insert-symbol-index-entry"))
   (param $idx i32)
   (param $symbol i32)
   (param $name i32)
   (param $name-hash i32)

   (local $count i32)
   (local $symbol-index-hash-addr i32)
   (local $symbol-index-value-addr i32)

   (local.set $count (i32.sub (i32.sub (global.get $symbol-count)
                                       (local.get $idx))
                              (i32.const 1)))

   (local.set $symbol-index-hash-addr
              (i32.add (%get-symbol-index-hashes)
                       (i32.shl (local.get $count)
                                (global.get $value-size-bits))))

   (local.set $symbol-index-value-addr
              (i32.add (%get-symbol-index-values)
                       (i32.shl (local.get $count)
                                (global.get $value-size-bits))))

   (if (local.get $count)
       (then
        (memory.copy
         (i32.add (local.get $symbol-index-hash-addr)
                  (global.get $value-size))
         (local.get $symbol-index-hash-addr)
         (i32.shl (local.get $count)
                  (global.get $value-size-bits)))

        (memory.copy
         (i32.add (local.get $symbol-index-value-addr)
                  (global.get $value-size))
         (local.get $symbol-index-value-addr)
         (i32.shl (local.get $count)
                  (global.get $value-size-bits)))))

   (i32.store (local.get $symbol-index-hash-addr) (local.get $name-hash))
   (i32.store (local.get $symbol-index-value-addr) (local.get $symbol))))
