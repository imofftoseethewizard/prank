(module

 (import "pairs" "dealloc-pair"   (func $dealloc-pair  (param i32)))
 (import "pairs" "alloc-pair"   (func $alloc-pair      (result i32)))
 (import "pairs" "get-pair-car"   (func $get-pair-car  (param i32)     (result i32)))
 (import "pairs" "get-pair-cdr"   (func $get-pair-cdr  (param i32)     (result i32)))
 (import "pairs" "get-pair-cdr-f32"   (func $get-pair-cdr-f32  (param i32)     (result f32)))
 (import "pairs" "set-pair-car"   (func $set-pair-car  (param i32 i32)))
 (import "pairs" "set-pair-cdr"   (func $set-pair-cdr  (param i32 i32)))
 (import "pairs" "set-pair-cdr-f32"   (func $set-pair-cdr-f32  (param i32 f32)))

 ;;=============================================================================
 ;;
 ;; Box values
 ;;
 ;;
 ;; Block values
 ;;
 ;; Block values are pairs which serve as the fixed reference point of a block.
 ;; A block can be relocated, but pairs cannot, so these are stable addresses.
 ;; Each block that is referenced in a procedurally managed pair must have
 ;; exactly one block value associated with it.  Since blocks are used to
 ;; represent bytevectors, strings, and vectors, the value used to represent them
 ;; in pairs is a the block-tagged address of the corresponding block value.
 ;;
 ;; For example, a one element list referencing a string in its car would have
 ;; the following structure in memory:
 ;;
 ;;     pair addr: ( <block value addr | $tag-block > . $null )
 ;;
 ;;     block value addr: ( $type-string . < block addr > )
 ;;
 ;;     block addr:
 ;;       < block value addr >
 ;;       < length of block in values >
 ;;       < length of string in bytes >
 ;;       < bytes ... >
 ;;


 (global $box-value-type-weakref (export "box-value-type-weakref") i32 (i32.const 0))

 (func $get-box-type (export "get-box-type")
   (param $box i32)
   (result i32)
   (call $get-pair-car (local.get $box)))

 (func $get-box-value (export "get-box-value")
   (param $box i32)
   (result i32)
   (call $get-pair-cdr (local.get $box)))

 (func $get-box-value-f32 (export "get-box-value-f32")
   (param $box i32)
   (result f32)
   (call $get-pair-cdr-f32 (local.get $box)))

 (func $set-box-type (export "set-box-type")
   (param $box i32)
   (param $type i32)
   (call $set-pair-car (local.get $box) (local.get $type)))

 (func $set-box-value (export "set-box-value")
   (param $box i32)
   (param $value i32)
   (call $set-pair-cdr (local.get $box) (local.get $value)))

 (func $set-box-value-f32 (export "set-box-value-f32")
   (param $box i32)
   (param $value f32)
   (call $set-pair-cdr-f32 (local.get $box) (local.get $value)))

 (func $alloc-box (export "alloc-box")
   (param $box-type i32)
   (result i32)
   (local $box i32)
   (local.set $box (call $alloc-pair))

   (call $set-box-type (local.get $box) (local.get $box-type))
   (local.get $box))

 (func $dealloc-box (export "dealloc-box")
   (param $b i32)
   (call $dealloc-pair (local.get $b)))

 (func $make-box (export "make-box")
   (param $box-type i32)
   (param $value i32)
   (result i32)
   (local $box i32)

   (local.set $box (call $alloc-box (local.get $box-type)))
   (call $set-box-value (local.get $box) (local.get $value))
   (local.get $box))

(func $make-box-f32 (export "make-box-f32")
   (param $box-type i32)
   (param $value f32)
   (result i32)
   (local $box i32)

   (local.set $box (call $alloc-box (local.get $box-type)))
   (call $set-box-value-f32 (local.get $box) (local.get $value))
   (local.get $box))


)
