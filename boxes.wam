;;=============================================================================
;;
;; Box values
;;
;;
;; Block values
;;
;; Block values are pairs which serve as the fixed reference point of a block.
;; A block can be relocated, but pairs cannot, so these are stable addresses.
;; Each block that is referenced in a procedurally managed pair must have
;; exactly one block value associated with it.  Since blocks are used to
;; represent bytevectors, strings, and vectors, the value used to represent them
;; in pairs is a the block-tagged address of the corresponding block value.
;;
;; For example, a one element list referencing a string in its car would have
;; the following structure in memory:
;;
;;     pair addr: ( <block value addr | $tag-block > . $null )
;;
;;     block value addr: ( $type-string . < block addr > )
;;
;;     block addr:
;;       < block value addr >
;;       < length of block in values >
;;       < length of string in bytes >
;;       < bytes ... >
;;

(global $box-value-type-weakref (export "box-value-type-weakref") i32 (i32.const 0))

(macro %get-box-type
  (expr ,box)
  (call $get-pair-car ,box))

(macro %get-box-value
  (expr ,box)
  (call $get-pair-cdr ,box))

(macro %get-box-value-f32
  (expr ,box)
  (call $get-pair-cdr-f32 ,box))

(macro %set-box-type
  (expr ,box)
  (expr ,type)
  (call $set-pair-car ,box ,type))

(macro %set-box-value
  (expr ,box)
  (expr ,value)
  (call $set-pair-cdr ,box ,value))

(macro %set-box-value-f32
  (expr ,box)
  (expr ,value)
  (call $set-pair-cdr-f32 ,box ,value))

(macro %dealloc-box
  (expr ,box)
  (call $dealloc-pair ,box))

(macro %make-box
  (expr ,box-type)
  (expr ,value)
  (call $make-pair ,box-type ,value))

(macro %make-box-f32
  (expr ,box-type)
  (expr ,value)
  (call $make-pair-f32 ,box-type ,value))
