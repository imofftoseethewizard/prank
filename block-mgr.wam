;; # Block Allocation Manager
;;
;; This module manages allocation and deallocation of variable-length blocks of
;; memory.  It depends on the values and pairs modules.  It is intended to be
;; used by the bytevectors, numbers, strings, symbols, and vectors modules, and
;; by the garbage collector for its internal indexes.
;;
;;
;; ## Design
;;
;; The simplest memory management policy is static allocation, common on small,
;; embedded devices with limited RAM and functionality.  FORTH uses a slightly
;; more advanced allocation scheme with just a single "dictionary" pointer that
;; increases with each allocation.  One could think of this as static
;; allocation, but incrementally defined.  Beyond that, things get complex
;; quickly.  To support reuse of memory that is no longer needed, we need to
;; track deallocated blocks, and these could be stored in a list, either
;; implemented as a linked list or in a dynamic array.  Typcial distributions of
;; block sizes lead to fragmentation and a loss of memory efficiency.  (There
;; are special cases where this does not apply, such as when all blocks have the
;; same size, or when they have varying sizes, but form a power law
;; distribution, etc).  Further if the number of free blocks grows large, then
;; searching through the list of free blocks for one of a matching size becomes
;; increasingly expensive, or we could maintain a sorted array, but then
;; allocation and free become expensive.  The free list could be recast as a
;; heap, but then we aren't guaranteed to find a block of the correct size, so
;; to maintain computational efficiency we need to allow blocks to be split.
;; Splitting blocks just makes the fragmentation problem worse.  We could
;; coalesce adjacent free blocks, but then we need an ordered data structure
;; again, and we're back to having a free list.  But now the free list needs to
;; be careful not to corrupt the heap when coalescing free blocks.  That still
;; leaves the possibility of small bits of memory lost between larger blocks
;; which have a long lifetime.  To handle that, we need to be able to relocate
;; allocated blocks, but that requires an ordered list of all blocks -- both
;; free and allocated -- and indirection of block id and block storage address.
;; So that's what we have here: indirection of storage address, an ordered list
;; of blocks, an ordered list of free blocks, and a heap of free blocks.
;; Allocation and deallocation are O(log(#free)).  Defragmentation is
;; incremental.  Memory management policies can be set to optimize for memory
;; efficiency, computational efficiency, or low run-time variance.
;;
;;
;; ## Data Representation
;;
;; A block is a pair. ( addr . length )
;;
;; A block ref is a pair in which the car is a block. ( block . * )
;;
;; The block list is a linked list of block refs, ( block1 . ( block2 . ... ) ),
;; where block2 addr = block1 addr + block1 length.
;;
;; A free entry is a pair in which the car is a block ref. ( block-ref . * )
;;
;; The free list is a linked list of free entreies, ( free1. ( free 2 . ... ) ),
;; such that free block2 addr >= free block1 addr + free block1 length.
;;
;; A free heap node is a list, ( block left right . free entry ) where left
;; and right are also heap node, or null, and where block is lifted out of
;; the referenced free entry to reduce the number of indirections required for
;; heap maintenance. A free heap could also be interpreted as a block ref, but
;; in practice, that is not done.
;;
;; The free heap is a max heap by block size of free heap nodes.
;;
;; A heap node is unused if the address in its block is i32_u -1. When
;; traversing a heap, any unused node will be "buried". To bury an node is
;; to set its size to 0 and sink it to the bottom.
;;
;; A blockset is an index into an array of structures which capture the state of
;; a client's memory.  These structures include pointers to the block list,
;; free list, heap, and various values necessary for managing memory.
;;
;;
;; ## Memory Access
;;
;; The block allocation manager has no direct access to the memory it manages.
;; It has a single memory page to store the state of each client module, and it
;; uses the pairs module for the representing the blocks, block list, free list,
;; and heap.  It needs access to client memory when is attempting to allocate a
;; block larger than any free block in the heap, in which case it uses client
;; proxies memory.size and memory.grow.  It also needs access during
;; defragmentation, when it needs to call a proxy for memory.copy.  Access to
;; these instructions is provided through three tables, one for each of the
;; memory functions mentioned.  The client module provides a client id, which
;; is the index into each of the tables for its proxies for the memory it owns.
;; The clients need to be coordinated to ensure that there are no conflicts.
;; (The client ids are defined in globals.wam.)
;;
;; See $memory-copy-sig, $memory-copy, etc below the import section.
;;
;; Clients need to import these tables and fill their entries before calling any
;; block allocation manager functions.
;;
;;
;; ## Allocation Algorithm
;;
;; Upon receiving an allocation request, the allocator does a little heap
;; maintenance, andh then checks if the top block on the free heap is at least
;; as big as the request.  If it's not big enough, it calls the proxies for
;; memory.size and memory.grow to allocate a new free block big enough to
;; satisfy the request.  New free blocks are always in multiples of whole pages
;; (64KB).  If the free block is exactly the same size as the request, it is
;; removed from the heap and free list and returned to the caller.  Otherwise,
;; the block is split, the heap is updated, and the new block is returned to the
;; caller.
;;
;; Blocks are split from upper memory down.
;;
;; Allocation is done from the largest block because...
;;
;;
;; ## Heap maintenance
;;
;; During defragmentation, free blocks are coalesced.  One free block becomes
;; bigger and another is removed from the block list.  The heap, however, will
;; still have references to these blocks.  There is no efficient way to find
;; these blocks, so they must be marked for future disposal and handled when the
;; heap encounters them.  In order not to corrupt the heap, the sizes of the
;; blocks must remain unchanged.  The solution here is set the address field to
;; -1 to signal that a block is unused.  To coalese two free blocks, the two
;; source blocks are both set to unused and removed from the block list and free
;; list.  A new block is created to replace them and added to the heap.  When a
;; traversal of the heap encounters an entry with an unused block, it sets the
;; block's size field to 0 and sinks it to the bottom.  Later when a new entry
;; is added, if the would-be parent of the entry is unused, then instead of
;; becoming a child, it takes the unused entry's place and the unused entry is
;; deallocated.
;;
;; That leaves the question of when the heap checks for unused nodes
;; Obviously, if the free list and the heap have the same number of items,
;; checking is unnecessary.  It is also obvious that the root needs to be
;; checked before it is returned as a free block.  Perhaps less obvious is that
;; if the heap were half unused items, that would only add one more operation to
;; every full traversal, on average, and most sink/swim operations do not
;; actually fully traverse the heap.  A lot of unused items in the heap is does
;; not incur a large computational penalty, but it does consume pair memory.  On
;; the other hand, keeping the unused items to a minimum would require more
;; computation, so we need a policy parameter and a two sets of heap traversal
;; routines.  When the fraction of unused nodes crosses the policy threshold,
;; heap operations use the set of routines that check for unused nodes during
;; traversals.
;;
;; Adding an node and removing the head from heap both require knowing where
;; the last node of the heap is (or, equivalently) where it should go.
;; Adding an node is straightforward: add it at the appropriate place, and
;; repeatedly swap it with its parent until the heap condition is satisfied, in
;; this case, that the block it references is no smaller than its two children,
;; but no bigger than its parent.  In the case of removing an node, we
;; replace the root with last elemment of the heap, and then swap with its
;; largest child until the heap condition is satisfied.  With an array-based
;; heap, this is
;;
;; Why not implement the heap as an array? Where would it be stored?  .. store
;; the heaps in the blockmgr memory segment expanding heap requires moving
;; others heap node is just a pair address, but would be the free entry,
;; hence size would be caadr adding a free node is possibly proportional to
;; the sum of the sizes of the other heaps. How big are the heaps likely to get?
;; memory use: as pairs, and additional 24 bytes (3 pairs) are required, for the
;; same we'd require 8 bytes in an array, plus a budget for extra stace in the
;; array, say 1/3 more, so 11 bytes on average per heap node.  These would
;; need to be managed such that growth of an array could be amortized.  Noting
;; that this is similar to the service the block manager provides, there is a
;; temptation to attempt to use the block mgr to manage the storage for its own
;; heap, but this would require some delicacy in the event the the heap's storage
;; needs to grow (and move) and the heap is needed to do that.  In particular,
;; the address of any heap node may not remain on the call stack above a
;; call which moves the heap, or must be recalculated after the call completes.
;; A call which inserts an node in the heap can move the heap.  Deallocation
;; and (possibly) reallocation.
;;
;;
;;
;; Finding the last node of a heap.  In an array-based heap, finding the last
;; node is simple.  With a pair-based heap, it requires a walk from the root.
;; Let h be the root of the heap and let k be the number of nodes in the
;; heap.  If k = 1 then we are done.  Otherwise if k is even let h = left(h),
;; and if k is odd, let h = right(h).  Let k = k >> 1 and repeat.
;;
;; Removing the root from the heap follows the usual process of removing the
;; last node of the heap and sink it from the root.  Deallocate 3 pairs, as
;; identified by their cars: block, left, and right.
;;
;; Removing a block from the free list
;;
;; Adding an node to the heap.
;;
;; Finding Free Blocks
;;
;; (32 - clz(Heap count)) >> 1 levels
;; compute max <= limit
;; check for unused blocks, sink if found

(module

 (import "pairs" "dealloc-pair"    (func $dealloc-pair    (param i32)))
 (import "pairs" "get-pair-caar"   (func $get-pair-caar   (param i32)     (result i32)))
 (import "pairs" "get-pair-cadr"   (func $get-pair-cadr   (param i32)     (result i32)))
 (import "pairs" "get-pair-car"    (func $get-pair-car    (param i32)     (result i32)))
 (import "pairs" "get-pair-cdr"    (func $get-pair-cdr    (param i32)     (result i32)))
 (import "pairs" "make-pair"       (func $make-pair       (param i32 i32) (result i32)))
 (import "pairs" "set-pair-caar"   (func $set-pair-caar   (param i32 i32)))
 (import "pairs" "set-pair-cadr"   (func $set-pair-cadr   (param i32 i32)))
 (import "pairs" "set-pair-car"    (func $set-pair-car    (param i32 i32)))
 (import "pairs" "set-pair-cdr"    (func $set-pair-cdr    (param i32 i32)))
 (import "values" "get-value-tag"  (func $get-value-tag   (param i32)     (result i32)))

 (include "./globals.wam")

 ;; Used to store per-client information
 (memory (export "memory") 1)

 (global $blockset-size-bits (export "blockset-size-bits" 6))

 (global $blockset-block-count           (export "blockset-block-count")           i32 (i32.const 0x00))
 (global $blockset-block-list            (export "blockset-block-list")            i32 (i32.const 0x04))
 (global $blockset-defrag-cursor         (export "blockset-defrag-cursor")         i32 (i32.const 0x08))
 (global $blockset-end-block-ref         (export "blockset-end-block-ref")         i32 (i32.const 0x0c))
 (global $blockset-heap             (export "blockset-heap")             i32 (i32.const 0x10))
 (global $blockset-heap-size        (export "blockset-heap-size")        i32 (i32.const 0x14))
 (global $blockset-free-list             (export "blockset-free-list")             i32 (i32.const 0x18))
 (global $blockset-free-list-length      (export "blockset-free-list-length")      i32 (i32.const 0x1c))
 (global $blockset-immobile-block-size   (export "blockset-immobile-block-size")   i32 (i32.const 0x20))
 (global $blockset-relocation-size-limit (export "blockset-relocation-size-limit") i32 (i32.const 0x24))

 (type $memory-copy-sig (func (param i32 i32 i32 i32 i32)))
 (type $memory-grow-sig (func (param i32) (result i32)))
 (type $memory-size-sig (func (result i32)))

 (table $memory-copy (export "memory-copy") 2 funcref)
 (table $memory-grow (export "memory-grow") 2 funcref)
 (table $memory-size (export "memory-size") 2 funcref)

 ;;-----------------------------------------------------------------------------
 ;;
 ;; Module Initialization
 ;;
 ;;

 (func $init-blockset-manager (export "init-blockset-manager")
   ;; Create a blockset to contain the free heaps of all the managed blockset,
   ;; including this one.

   (call $init-blockset
         (i32.const 0)         ;; blockset id: 0, of course
         (i32.const 0x10000)   ;; blocks >64KB are immobile during defrag
         (i32.const 0x01000))) ;; move up to 4KB of blocks per defrag, or one block <64KB

 ;;-----------------------------------------------------------------------------
 ;;
 ;; Blockset Initialization
 ;;
 ;;

 (func $init-blockset (export "init-blockset")
   (param $blockset-id i32)
   (param $immobile-block-size i32)
   (param $relocation-size-limit i32)

   (local $blockset i32)

   (local.set $blockset (call $get-blockset (local.get $blockset-id)))

   (call $set-blockset-immobile-block-size
         (local.get $blockset)
         (local.get $immobile-block-size))

   (call $set-blockset-relocation-size-limit
         (local.get $blockset)
         (local.get $relocation-size-limit))

   (call $set-blockset-block-count      (local.get $blockset) (i32.const 0))
   (call $set-blockset-block-list       (local.get $blockset) (global.get $null))
   (call $set-blockset-defrag-cursor    (local.get $blockset) (global.get $null))
   (call $set-blockset-end-block-ref    (local.get $blockset) (global.get $null))
   (call $set-blockset-heap             (local.get $blockset) (global.get $null))
   (call $set-blockset-heap-size        (local.get $blockset) (i32.const 0))
   (call $set-blockset-free-list        (local.get $blockset) (global.get $null))
   (call $set-blockset-free-list-length (local.get $blockset) (i32.const 0)))

 (func $get-blockset-id (export "get-blockset-id")
   (param $blockset i32)
   (result i32)
   (i32.shr_u (local.get $blockset) (global.get $blockset-size-bits)))

 (func $get-blockset (export "get-blockset")
   (param $blockset-id i32)
   (result i32)
   (i32.shl (local.get $blockset-id) (global.get $blockset-size-bits)))

 ;;-----------------------------------------------------------------------------
 ;;
 ;; Blockset Accessors
 ;;

 (func $get-blockset-block-count (export "get-blockset-block-count")
   (param $blockset i32)
   (result i32)
   (i32.load (i32.add (local.get $blockset)
                      (global.get $blockset-block-count))))

 (func $get-blockset-block-list (export "get-blockset-block-list")
   (param $blockset i32)
   (result i32)
   (i32.load (i32.add (local.get $blockset)
                      (global.get $blockset-block-list))))

 (func $get-blockset-defrag-cursor (export "get-blockset-defrag-cursor")
   (param $blockset i32)
   (result i32)
   (i32.load (i32.add (local.get $blockset)
                      (global.get $blockset-defrag-cursor))))

 (func $get-blockset-end-block-ref (export "get-blockset-end-block-ref")
   (param $blockset i32)
   (result i32)
   (i32.load (i32.add (local.get $blockset)
                      (global.get $blockset-end-block-ref))))

 (func $get-blockset-heap (export "get-blockset-heap")
   (param $blockset i32)
   (result i32)
   (i32.load (i32.add (local.get $blockset)
                      (global.get $blockset-heap))))

 (func $get-blockset-heap-root (export "get-blockset-heap-root")
   (param $blockset i64)
   (result i64)
   (i64.load32_u (i32.add (local.get $blockset)
                          (global.get $blockset-heap))))

 (func $get-blockset-heap-size (export "get-blockset-heap-size")
   (param $blockset i32)
   (result i32)
   (i32.load (i32.add (local.get $blockset)
                      (global.get $blockset-heap-size))))

 (func $get-blockset-free-list (export "get-blockset-free-list")
   (param $blockset i32)
   (result i32)
   (i32.load (i32.add (local.get $blockset)
                      (global.get $blockset-free-list))))

 (func $get-blockset-free-list-length (export "get-blockset-free-list-length")
   (param $blockset i32)
   (result i32)
   (i32.load (i32.add (local.get $blockset)
                      (global.get $blockset-free-list-length))))

 (func $get-blockset-immobile-block-size (export "get-blockset-immobile-block-size")
   (param $blockset i32)
   (result i32)
   (i32.load (i32.add (local.get $blockset)
                      (global.get $blockset-immobile-block-size))))

 (func $get-blockset-relocation-size-limit (export "get-blockset-relocation-size-limit")
   (param $blockset i32)
   (result i32)
   (i32.load (i32.add (local.get $blockset)
                      (global.get $blockset-relocation-size-limit))))

 (func $set-blockset-block-count (export "set-blockset-block-count")
   (param $blockset i32)
   (param $block-count i32)
   (i32.store (i32.add (local.get $blockset)
                       (global.get $blockset-block-count))
              (local.get $block-count)))

 (func $set-blockset-block-list (export "set-blockset-block-list")
   (param $blockset i32)
   (param $block-list i32)
   (i32.store (i32.add (local.get $blockset)
                       (global.get $blockset-block-list))
              (local.get $block-list)))

 (func $set-blockset-defrag-cursor (export "set-blockset-defrag-cursor")
   (param $blockset i32)
   (param $defrag-cursor i32)
   (i32.store (i32.add (local.get $blockset)
                       (global.get $blockset-defrag-cursor))
              (local.get $defrag-cursor)))

 (func $set-blockset-end-block-ref (export "set-blockset-end-block-ref")
   (param $blockset i32)
   (param $end-block-ref i32)
   (i32.store (i32.add (local.get $blockset)
                       (global.get $blockset-end-block-ref))
              (local.get $end-block-ref)))

 (func $set-blockset-heap (export "set-blockset-heap")
   (param $blockset i32)
   (param $heap i32)
   (i32.store (i32.add (local.get $blockset)
                       (global.get $blockset-heap))
              (local.get $heap)))

 (func $set-blockset-heap-size (export "set-blockset-heap-size")
   (param $blockset i32)
   (param $heap-size i32)
   (i32.store (i32.add (local.get $blockset)
                       (global.get $blockset-heap-size))
              (local.get $heap-size)))

 (func $set-blockset-free-list (export "set-blockset-free-list")
   (param $blockset i32)
   (param $free-list i32)
   (i32.store (i32.add (local.get $blockset)
                       (global.get $blockset-free-list))
              (local.get $free-list)))

 (func $set-blockset-free-list-length (export "set-blockset-free-list-length")
   (param $blockset i32)
   (param $free-list-length i32)
   (i32.store (i32.add (local.get $blockset)
                       (global.get $blockset-free-list-length))
              (local.get $free-list-length)))

 (func $set-blockset-immobile-block-size (export "set-blockset-immobile-block-size")
   (param $blockset i32)
   (param $immobile-block-size i32)
   (i32.store (i32.add (local.get $blockset)
                       (global.get $blockset-immobile-block-size))
              (local.get $immobile-block-size)))

 (func $set-blockset-relocation-size-limit (export "set-blockset-relocation-size-limit")
   (param $blockset i32)
   (param $relocation-size-limit i32)
   (i32.store (i32.add (local.get $blockset)
                       (global.get $blockset-relocation-size-limit))
              (local.get $relocation-size-limit)))

 ;;-----------------------------------------------------------------------------
 ;;
 ;; Blockset Utilities
 ;;

 (func $decr-blockset-block-count (export "decr-blockset-block-count")
   (param $blockset i32)
   (local.set $addr (i32.add (local.get $blockset) (global.get $blockset-block-count)))
   (i32.store $addr (i32.sub (i32.load (local.get $addr) (i32.const 1)))))

 (func $decr-blockset-heap-size (export "decr-blockset-heap-size")
   (param $blockset i32)
   (local.set $addr (i32.add (local.get $blockset) (global.get $blockset-heap-size)))
   (i32.store $addr (i32.sub (i32.load (local.get $addr) (i32.const 1)))))

 (func $decr-blockset-free-list-length (export "decr-blockset-free-list-length")
   (param $blockset i32)
   (local.set $addr (i32.add (local.get $blockset) (global.get $blockset-free-list-length)))
   (i32.store $addr (i32.sub (i32.load (local.get $addr) (i32.const 1)))))

 (func $incr-blockset-block-count (export "incr-blockset-block-count")
   (param $blockset i32)
   (local.set $addr (i32.add (local.get $blockset) (global.get $blockset-block-count)))
   (i32.store $addr (i32.add (i32.load (local.get $addr) (i32.const 1)))))

 (func $incr-blockset-heap-size (export "incr-blockset-heap-size")
   (param $blockset i32)
   (local.set $addr (i32.add (local.get $blockset) (global.get $blockset-heap-size)))
   (i32.store $addr (i32.add (i32.load (local.get $addr) (i32.const 1)))))

 (func $incr-blockset-free-list-length (export "incr-blockset-free-list-length")
   (param $blockset i32)
   (local.set $addr (i32.add (local.get $blockset) (global.get $blockset-free-list-length)))
   (i32.store $addr (i32.add (i32.load (local.get $addr) (i32.const 1)))))

 ;;-----------------------------------------------------------------------------
 ;;
 ;; Block Accessors
 ;;

 (func $get-block-addr (export "get-block-addr")
   (param $block i32)
   (result i32)
   (call $get-pair-car (local.get $block)))

 (func $get-block-size (export "get-block-size")
   (param $block i32)
   (result i32)
   (call $get-pair-cdr (local.get $block)))

 (func $set-block-addr (export "set-block-addr")
   (param $block i32)
   (param $addr i32)
   (call $set-pair-car (local.get $block) (local.get $addr)))

 (func $set-block-size (export "set-block-size")
   (param $block i32)
   (param $size i32)
   (call $set-pair-cdr (local.get $block) (local.get $size)))

 ;;-----------------------------------------------------------------------------
 ;;
 ;; Block Utilities
 ;;

 (func $get-next-block-addr (export "get-next-block-addr")
   (param $block i32)
   (result i32)
   (i32.add (call $get-block-addr (local.get $block))
            (call $get-block-size (local.get $block))))

 (func $make-block (export "make-block")
   (param $addr i32)
   (param $length i32)
   (call $make-pair (local.get $addr) (local.get $length)))

 ;;-----------------------------------------------------------------------------
 ;;
 ;; Block Ref Accessors
 ;;

 (func $get-block-ref-addr (export "get-block-ref-addr")
   (param $block i32)
   (result i32)
   (call $get-pair-caar (local.get $block)))

 (func $get-block-ref-size (export "get-block-ref-size")
   (param $block i32)
   (result i32)
   (call $get-pair-cadr (local.get $block)))

 (func $set-block-ref-addr (export "set-block-ref-addr")
   (param $block i32)
   (param $addr i32)
   (call $set-pair-caar (local.get $block) (local.get $addr)))

 (func $set-block-ref-size (export "set-block-ref-size")
   (param $block i32)
   (param $size i32)
   (call $set-pair-cadr (local.get $block) (local.get $size)))

 ;;-----------------------------------------------------------------------------
 ;;
 ;; Heap Node Accessors
 ;;

 (func $get-heap-node-address (export "get-heap-node-address")
   (param $heap-node i64)
   (result i32)
   (i32.add (i32.wrap_i64 (local.get $heap-node))
            (i32.wrap_i64 (i64.shr_u (local.get $heap-node)
                                     (i64.const 32)))))

 (func $get-heap-node-block-size (export "get-heap-node-block-size")
   (param $heap-node i64)
   (result i32)
   (i32.load (call $get-heap-node-address (local.get $heap-node))))

 (func $get-heap-node-entry (export "get-heap-node-entry")
   (param $heap-node i64)
   (result i32)
   (i32.load (i32.add (call $get-heap-node-address (local.get $heap-node))
                      (global.get $value-size))))

 (func $get-heap-node-left (export "get-heap-node-left")
   (param $heap-node i64)
   (result i32)
   (i64.or (i64.extend_i32_u (i32.add (i32.shl (i32.wrap_i64 (local.get $heap-node))
                                               (i32.const 1))
                                      (global.get $heap-node-size)))
           (i64.and (local.get $heap-node)
                    (global.get $heap-node-base-mask))))

 (func $get-heap-node-right (export "get-heap-node-left")
   (param $heap-node i64)
   (result i32)
   (i64.or (i64.extend_i32_u (i32.shl (i32.add (i32.wrap_i64 (local.get $heap-node))
                                               (global.get $heap-node-size))
                                      (i32.const 1)))
           (i64.and (local.get $heap-node)
                    (global.get $heap-node-base-mask))))

 (func $set-heap-node-block-size (export "set-heap-node-block-size")
   (param $heap-node i64)
   (param $size i32)
   (local $addr i32)

   (local.set $addr (call $get-heap-node-address (local.get $heap-node)))
   (i32.store (local.get $addr) (local.get $size))
   (call $set-block-size (call $set-pair-car
                               (call $get-pair-caar (i32.add (local.get $addr)
                                                             (global.get $value-size)))
                               (local.get $size))))

 (func $set-heap-node-entry (export "set-heap-node-entry")
   (param $heap-node i64)
   (param $entry i32)
   (local $addr i32)

   (local.set $addr (call $get-heap-node-address (local.get $heap-node)))

   (i32.store (local.get $addr)
              (call $get-pair-caaar (local.get $entry)))

   (i32.store (i32.add (local.get $addr)
                       (global.get $value-size))
              (local.get $entry)))

 (func $set-heap-node-left (export "set-heap-node-left")
   (param $heap-node i64)
   (param $entry i32)
   (call $set-heap-node-entry
         (call $get-heap-node-left (local.get $heap-node))
         (local.get $entry)))

 (func $set-heap-node-right (export "set-heap-node-right")
   (param $heap-node i64)
   (param $entry i32)
   (call $set-heap-node-entry
         (call $get-heap-node-right (local.get $heap-node))
         (local.get $entry)))

 ;;-----------------------------------------------------------------------------
 ;;
 ;; Allocation
 ;;

 (func $alloc-block (export "alloc-block")
   (param $blockset-id i32)
   (param $size i32)
   (result i32)

   (local $blockset i32)
   (local $free-block i32)
   (local $free-block-ref i32)
   (local $new-block i32)

   (local.set $blockset (call $get-blockset (local.get $blockset-id)))

   (call $provision-blockset-heap (local.get $blockset) (local.get $size))

   (local.set $heap-node (call $get-blockset-heap-root-node (local.get $blockset)))

   (local.set $free-block-ref
              (call $get-pair-car
                    (call $get-heap-entry (local.get $heap-node))))

   (local.set $free-block (call $get-pair-car (local.get $free-block-ref)))

   (if (result i32) (i32.eq (local.get $size)
                            (call $get-block-size (local.get $free-block)))
     (then
      (call $remove-heap-root-node (local.get $blockset))
      (local.get $free-block))
     (else
      (local.set $new-block
                 (call $split-free-block
                       (local.get $free-block-ref)
                       (local.get $size)))
      (call $sink-heap-node (local.get $blocket) (local.get $heap-node))
      (local.get $new-block))))

 (func $split-free-block (export "split-free-block")
   (param $free-block-ref i32)
   (param $new-block-size i32)
   (result i32)

   (local $free-block i32)
   (local $new-block i32)
   (local $new-block-ref i32)
   (local $remainder-size i32)

   (local.set $free-block (call $get-pair-car (local.get $free-block-ref)))

   (local.set $remainder-size
              (i32.sub (call $get-block-size (local.get $free-block))
                       (local.get $new-block-size)))

   (call $set-block-size (local.get $free-block) (local.get $remainder-size))

   (local.set $new-block (call $make-block
                               (i32.add (call $get-free-block-addr (local.get $free-block))
                                        (local.get $remainder-size))
                               (local.get $new-block-size)))

   (local.set $new-block-ref (call $make-pair
                                   (local.get $new-block)
                                   (call $get-pair-cdr (local.get $free-block-ref))))

   (call $set-pair-cdr (local.get $free-block-ref) (local.get $new-block-ref))
   (call $incr-blockset-block-count (local.get $blockset))

   (local.get $new-block))

 ;;-----------------------------------------------------------------------------
 ;;
 ;; Deallocation
 ;;

 (func $dealloc-block (export "dealloc-block")
   (param $blockset-id i32)
   (param $block-ref i32)

   (local $blockset i32)
   (local.set $blockset (call $get-blockset (local.get $blockset-id)))

   (call $add-free-block (local.get $blockset) (local.get $block-ref))

   (call $step-defragment-blocks (local.get $blockset)))

 (func $add-free-block (export "add-free-block")
   (param $blockset i32)
   (param $block-ref i32)

   (local $block i32)
   (local $block-addr i32)
   (local $head i32)
   (local $next i32)

   (local.set $block (call $get-pair-car (local.get $block-ref)))
   (local.set $block-addr (call $get-block-addr (local.get $block)))
   (local.set $head (call $get-blockset-free-list (local.get $blockset)))

   (call $incr-blockset-free-list-length (local.get $blockset))

   (if (i32.eq (local.get $head) (global.get $null))
       (then
        (call $set-blockset-free-list
              (local.get $blockset)
              (call $make-pair (local.get $block-ref) (global.get $null))))
     (else
      (loop $again
        (local.set $next (call $get-pair-cdr (local.get $head)))
        (if (i32.ne (global.get $null) (global.get $null))
            (then
             (if (i32.gt_u (local.get $block-addr)
                           (call $get-block-addr
                                 (call $get-pair-caar (local.get $next))))
                 (then
                  (local.set $head (local.get $next))
                  (br $again))))))

      (call $set-pair-cdr
            (local.get $head)
            (call $make-pair (local.get $block-ref) (local.get $next)))))

   ;; TODO add to heap
   (call $incr-blockset-heap-size (local.get $blockset)))

 ;; ## Defragmentation
 ;;
 ;; Defragmentation is the process of relocating allocated blocks so that free
 ;; blocks can be merged.
 ;;
 ;; Policy parameters: step frequency, target # of bytes copied per step, min
 ;; size of non-relocatable block.
 ;;
 ;; At each step, we need to be able to remove two entries from the free list
 ;; and replace them with a larger entry.  The two candidate entries will be the
 ;; first two above the cursor, so we will need to have the address of the free
 ;; entry immediately below (or at) the cursor.  We need a fast way to find the
 ;; highest address of a free entry at or below the cursor.  The naive approach
 ;; would be to scan from the beginning of the list, but as the number of free
 ;; list entries grows, this becomes increasingly slower.  Since the heap is
 ;; ordered by free block size, we should expect that any arbitrary subset will
 ;; be a random sample over the address space.  This sample won't be uniform,
 ;; especially during defragmentation, where the address space below the cursor
 ;; will be undersampled.  The root node of the heap is generally going to be
 ;; above the cursor, both in the initial part of defragmentation when most heap
 ;; nodes are above the cursor, and the in the later part when most of the
 ;; lower free blocks have been swept up above the cursor.  A useful property of
 ;; heaps is that the top half (in terms of levels) contains roughly the square
 ;; root of the total number of nodes in the heap.  For example, a heap of
 ;; 1023 nodes has 10 levels.  The first 5 levels contain 31 nodes, and
 ;; 31^2 = 961.  An average linear scan of a free list of 1023 entries is going
 ;; to take 512 comparisons, but if we make 31 comparisions of the top half of
 ;; the heap to find a better starting place, we should expect a further 33 to
 ;; find the desired entry.  For a heap of this size, it's roughly 1/8th the
 ;; computational cost to scan the top half of the heap for a better starting
 ;; point than to start at the beginning of the free list.
 ;;
 ;; Assuming then, that we have a pointer to the highest free list entry before
 ;; the cursor, then the defragmentation algorithm is as follows:
 ;;
 ;; 1. Scan the block list forward from the cursor to find the next free block.
 ;;
 ;;   a. if there is no such block, reset the cursor to the beginning of the
 ;;      block list
 ;;
 ;;   b. if a free block is found, leave the cursor at the block before the
 ;;      free block
 ;;
 ;; 2. Scan the block list beyond that free block to find the set of blocks
 ;;    which satisify one of the following conditions, with earlier conditions
 ;;    taking precedence
 ;;
 ;;   a. The set of blocks before the successor to the next free block.
 ;;
 ;;   b. A set of blocks less than the policy limit,
 ;;
 ;;   c. A single block less than the single block policy limit, or
 ;;
 ;; 3. If the set of blocks found in step 2 is empty, then end the step by the
 ;;    following
 ;;
 ;;   a. if the next free block is the last block, reset the cursor to the
 ;;      beginning of the block list
 ;;
 ;;   b. if the next block after the next free block is a free block, then merge
 ;;      the two free blocks by increasing the size of the lower free block,
 ;;      removing its successor from the block list and the free list, and
 ;;      setting the successor's address to -1
 ;;
 ;;   c. if the next block after the next free block is an allocated block, then
 ;;      it is greater than the max relocatable block size. Set the cursor to
 ;;      the next block after the next free block.
 ;;
 ;; 4. Move the blocks found in step 2 lower in memory by the size of the next
 ;;    free block, and adjust their addresses accordingly.
 ;;
 ;; 5. If the last relocated block is followed by a free block, then end the
 ;;    step by the following
 ;;
 ;;    a. then create a new free block with address at the top of the relocated
 ;;       blocks and size of the next free block (formerly below the relocated
 ;;       blocks) plus its successor (formerly above)
 ;;
 ;;    b. remove the next free block and its successor from the free list and
 ;;       from the block list
 ;;
 ;;    c. insert the new free block into the block list after the last relocated
 ;;       block
 ;;
 ;;    d. insert the new free block into the free list at the place formerly
 ;;       occupied by the next free block
 ;;
 ;;    e. set the address of the next free block and its successor to -1
 ;;
 ;;    f. set the cursor to the last relocated block.
 ;;
 ;; 6. If the last relocated block is not followed by a free block, then end the
 ;;    step by the following
 ;;
 ;;    a. remove the next free block from the block list (immediately before the
 ;;       first relocated block)
 ;;
 ;;    b. insert the next free block into the block list immediately following
 ;;       the last relocated block
 ;;
 ;;    c. update the address of the next free block
 ;;
 ;;    d. set the cursor to the last relocated block.
 ;;

 (func $step-defragment-blockset (export "step-defragment-blockset")
   (param $blockset i32)

   (local $cursor i32)
   (local $free-entry i32)
   (local $free-ref i32)
   (local $new-block-ref i32)
   (local $next i32)
   (local $next-free-entry i32)
   (local $next-free-ref i32)
   (local $relo-end i32)
   (local $relo-size i32)
   (local $relo-start i32)

   ;; Get three free list entries where the defragmentation cursor will
   ;; be below the block in free entry, but above or at the one in prior
   ;; free entry. NB. prior free entry can be null, indicating that it
   ;; represents the start of the free list.
   (local.set $prior-free-entry
              (local.set $free-entry
                         (local.set $next-free-entry
                                    (call $prepare-defragment-blockset
                                          (local.get $blockset)))))

   ;; If the cursor is near the end of the free list, then there's
   ;; nothing to do.
   (if (i32.or (i32.eq (local.get $free-entry) (global.get $null))
               (i32.eq (local.get $next-free-entry) (global.get $null)))
       (then
        (return)))

   ;; These are used a few times below.
   (local.set $free-ref (call $get-pair-car (local.get $free-entry)))
   (local.set $next-free-ref (call $get-pair-car (local.get $next-free-entry)))

   (local.set $relo-start (call $get-pair-cdr (local.get $free-ref)))

   (if (i32.eq (local.get $relo-start) (local.get $next-free-ref))
       (then
        ;; We found two adjacent free entries. Merge them.
        (local.set $new-block-ref
                   (call $merge-free-entries
                         (local.get $blockset)
                         (local.get $prior-free-entry)
                         (local.get $free-entry)
                         (local.get $next-free-entry)
                         (call $get-block-ref-addr (local.get $free-ref))))

        ;; Replace the old free refs in the block list with the new,
        ;; merged one.
        (call $set-pair-cdr (local.get $cursor) (local.get $new-block-ref))
        (call $decr-blockset-free-list-length (local.get $blockset))
        (return)))

   ;; Scan from free ref upward for allocated blocks, stopping when
   ;; we've found the limit that we can move, or the next free ref.
   (local.set $cursor
              (local.set $relo-end
                         (local.set $relo-size
                                    (call $scan-relocatable-blocks
                                          (local.get $blockset)
                                          (local.get $relo-start)
                                          (local.get $next-free-ref)))))

   (if (i32.eqz (local.get $relo-size))
       (then
        ;; The block after free-ref is too big to move. Move the cursor to that block.
        ;; See $get-blockset-immobile-block-size below.
        (call $set-blockset-defrag-cursor (local.get $blockset) (local.get $relo-end))
        (return)))

   ;; Shift the blocks down in memory, adjusting their addresses.
   (call $relocate-blocks
         (local.get $blockset)
         (call $get-block-ref-addr (local.get $free-ref))
         (local.get $relo-start)
         (local.get $relo-end)
         (local.get $relo-size))

   ;; Remove free-ref from between cursor and relo-start.
   (call $set-pair-cdr (local.get $cursor) (local.get $relo-start))

   (if (i32.eq (local.get $relo-end) (local.get $next-free-ref))
       ;; All of the allocated blocks between free-ref and next-free-ref
       ;; were moved down in memory, allowing those free entries
       ;; to be merged.
       (then
        (local.set $new-block-ref
                   (call $merge-free-entries
                         (local.get $blockset)
                         (local.get $prior-free-entry)
                         (local.get $free-entry)
                         (local.get $next-free-entry)
                         (call $get-next-block-addr
                               (call $get-pair-car (local.get $relo-end)))))

        ;; add the new, merged free block after the last relocated block
        (call $set-pair-cdr (local.get $relo-end) (local.get $new-block-ref))
        (call $decr-blockset-free-list-length (local.get $blockset)))
     (else
      ;; insert free-ref after relo-end
      (call $set-pair-cdr (local.get $free-ref) (call $get-pair-cdr (local.get $relo-end)))
      (call $set-pair-cdr (local.get $relo-end) (local.get $free-ref))))

   ;; At this point, everything before relo-end has been defragmented, and all
   ;; of the gathered free space is in the block immediately after.
   (call $set-blockset-defrag-cursor (local.get $blockset) (local.get $relo-end)))

 (func $prepare-defragment-blockset (export "prepare-defragment-blockset")
   (param $blockset i32)
   (result i32 i32 i32)

   (local $cursor i32)
   (local $free-entry i32)
   (local $free-ref i32)
   (local $next i32)
   (local $next-free-entry i32)
   (local $prior-free-entry i32)

   (local.set $cursor (call $get-blockset-defrag-cursor (local.get $blockset)))

   (if (i32.eq (local.get $cursor) (global.get $null))
       (then
        ;; A null cursor implies we're starting over from the beginning.
        (local.set $cursor (call $get-blockset-block-list (local.get $blockset)))))

   (local.set $prior-free-entry (call $find-predecessor-free-list-entry
                                      (local.get $blockset)
                                      (local.get $cursor)))

   (local.set $free-entry
              (if (result i32) (i32.eq (local.get $prior-free-entry) (global.get $null))
                (then
                 ;; If there is no free list entry prior to or at the defrag cursor,
                 ;; then the next free list entry will be the focus of the step.
                 (call $get-blockset-free-list (local.get $blockset)))
                (else
                 ;; Otherwise, the free list entry just above the cursor is the
                 ;; successor to the prior free entry.
                 (call $get-pair-cdr (local.get $prior-free-entry)))))

   (if (i32.eq (local.get $free-entry) (global.get $null))
       (then
        ;; If the free list is empty, or the prior free list entry is at the
        ;; end of the free list, then start over.
        (call $set-blockset-defrag-cursor (local.get $blockset) (global.get $null)))

     (else
      ;; Otherwise, we'll try to merge free entry with its successor.
      (local.set $next-free-entry (call $get-pair-cdr (local.get $free-entry)))

      (if (i32.eq (local.get $next-free-entry) (global.get $null))
          (then
           ;; If the free entry is the last one, then there is nothing left
           ;; to do, so start over.
           (call $set-blockset-defrag-cursor (local.get $blockset) (global.get $null)))

        (else
         ;; At this point, the conditions for a defragmentation step are satisfied.
         ;; Scan the cursor forward so that its successor is the free entry.
         (local.set $free-ref (call $get-pair-car (local.get $free-entry)))

         (loop $again
           (local.set $next (call $get-pair-cdr (local.get $cursor)))
           (if (i32.neq (local.get $next) (local.get $free-ref))
               (then
                (local.set $cursor (local.get $next))
                (br $again))))

         (call $set-blockset-defrag-cursor (local.get $blockset) (local.get $cursor))))))

   ;; Return values
   (local.get $prior-free-entry)
   (local.get $free-entry)
   (local.get $next-free-entry))

 (func $find-predecessor-free-list-entry (export "find-predecessor-free-list-entry")
   (param $blockset i32)
   (param $block-ref i32)
   (result i32)

   (local $block-addr i32)
   (local $free-entry i32)
   (local $head i32)
   (local $next i32)

   (local.set $free-entry
              (local.set $block-addr
                         (call $estimate-free-entry-infimum
                               (call $get-heap-root-node (local.get $blockset))
                               (call $get-block-ref-addr (local.get $blockset))
                               (call $calc-half-heap-depth (local.get $blockset)))))

   (if (i32.eq (local.get $free-entry) (global.get $null))
       (then
        (local.set $head (call $get-free-list (local.get $block-set)))
        (if (i32.neq (local.get $head) (global.get $null))
            (then
             (if (i32.le_u (call $get-free-entry-addr (local.get $head))
                           (local.get $max-addr))
                 (then
                  (local.set $free-entry (local.get $head))))))))

   (if (i32.neq (local.get $free-entry) (global.get $null))
       (then
        (local.set $head (local.get $free-entry))
        (loop
          (local.set $next (call $get-pair-cdr (local.get $head)))
          (if (i32.neq (local.get $next) (global.get $null))
              (then
               (if (i32.le_u (call $get-free-entry-addr (local.get $next))
                             (local.get $max-addr))
                   (then
                    (local.set $head (local.get $next)))))))
        (local.set $free-entry (local.get $head))))

   (local.get $free-entry))

 (func $calc-half-heap-depth (export "calc-half-heap-depth")
   (param $blockset i32)
   (result i32)

   (i32.shr_u (i32.sub (i32.const 32)
                       (i32.clz (call $get-heap-node-count (local.get $blockset))))
              (i32.const 1)))

 (func $estimate-free-entry-infimum (export "estimate-free-entry-infimum")
   ;; rewrite, can be linear along array
   (param $blockset i32)
   (param $heap-node i64)
   (param $max-addr i32)
   (param $depth i32)
   (result i32 i32)

   (local $block-addr i32)
   (local $child-node i64)
   (local $free-entry i32)
   (local $infr-block-addr i32)
   (local $infr-free-entry i32)

   (local.set $free-entry (call $get-heap-node-entry (local.get $heap-node)))
   (local.set $block-addr (call $get-free-entry-addr (local.get $free-entry)))

   (if (i32.le_u (local.get $block-addr) (local.get $max-addr))
       (then
        (local.set $infr-free-entry (local.get $free-entry))
        (local.set $infr-block-addr (local.get $block-addr)))
     (else
      (local.set $infr-free-entry (global.get $null))
      (local.set $infr-block-addr (global.get $null))))

   (if (local.get $depth)
       (then
        (local.set $child-node (call $get-heap-node-left (local.get $heap-node)))
        (if (i32.le_u (call $get-heap-node-idx (local.get $child-node))
                      (...))
            (then
             (local.set $free-entry
                        (local.set $block-addr
                                   (call $estimate-free-entry-infimum
                                         (local.get $child-node)
                                         (local.get $max-addr)
                                         (i32.sub (local.get $depth)
                                                  (i32.const 1)))))

             (if (i32.neq (local.get $free-entry) (local.get $null))
                 (then
                  (if (i32.or (i32.eq (local.get $infr-free-entry (global.get $null)))
                              (i32.gt_u (local.get $block-addr)
                                        (local.get $infr-block-addr)))
                      (then
                       (local.set $infr-free-entry (local.get $free-entry))
                       (local.set $infr-block-addr (local.get $block-addr))))))))

        (local.set $child-node (call $get-heap-right (local.get $heap)))
        (if (i32.neq (local.get $child-node) (global.get $null))
            (then
             (local.set $free-entry
                        (local.set $block-addr
                                   (call $estimate-free-entry-infimum
                                         (local.get $child-node)
                                         (local.get $max-addr)
                                         (i32.sub (local.get $depth)
                                                  (i32.const 1)))))

             (if (i32.neq (local.get $free-entry) (local.get $null))
                 (then
                  (if (i32.or (i32.eq (local.get $infr-free-entry (global.get $null)))
                              (i32.gt_u (local.get $block-addr)
                                        (local.get $infr-block-addr)))
                      (then
                       (local.set $infr-free-entry (local.get $free-entry))
                       (local.set $infr-block-addr (local.get $block-addr))))))))))

   ;; Return values

   (local.get $infr-free-entry)
   (local.get $infr-block-addr))

 (func $scan-relocatable-blocks (export "scan-relocatable-blocks")
   (param $blockset i32)
   (param $relo-start i32)
   (param $next-free-ref i32)
   (result i32 i32)

   (local $relo-end i32)
   (local $relo-count i32)
   (local $relo-size-limit i32)

   (local.set $relo-end (local.get $relo-start))
   (local.set $relo-count (i32.const 0))

   ;; The logic is simpler to start with the total number of bytes that can
   ;; be moved and subtract from it the size of each block that will be
   ;; moved.  Note that this is a signed value.
   (local.set $relo-size-limit
              (call $get-blockset-relocation-size-limit (local.get $blockset)))

   (loop $again
     (if (i32.neq (local.get $relo-end) (local.get $next-free-ref))
         (then
          (local.set $size (call $get-block-size (call $get-pair-car (local.get $relo-end))))
          (if (i32.le_s (local.get $size) (local.get $relo-size-limit))
              (then
               ;; The current block will fit with the remaining bytes available.
               (local.set $relo-size-limit (i32.sub (local.get $relo-size-limit)
                                                    (local.get $size)))
               (local.set $relo-end (call $get-pair-cdr (local.get $relo-end)))
               (if (i32.neq (local.get $relo-end) (global.get $null))
                   (then
                    (br $again))))
            (else
             ;; The current block won't fit. If this is the first block, then it is
             ;; be bigger than the size allowable for a sequence of blocks, but it might
             ;; be relocatable if it's below the immutable block size limit.
             (if (i32.and (i32.eqz (local.get $relo-count))
                          (i32.lt_u (local.get $size)
                                    (call $get-blockset-immobile-block-size
                                          (local.get $blockset))))
                 (then
                  ;; This is the statement that requires relo size limit to be
                  ;; a signed value.
                  (local.set $relo-size-limit (i32.neg (local.get $size)))
                  (local.set $relo-end (call $get-pair-cdr (local.get $relo-end))))))))))

   ;; Return values

   ;; Address of the block beyond the last block that can be moved
   (local.get $relo-end)

   ;; Relo size limit is the blockset size limit minus the size of each block
   ;; that can be moved.  The difference below results in the sum of the sizes
   ;; of the blocks that can be moved.
   (i32.sub (call $get-blockset-relocation-size-limit)
            (local.get $relo-size-limit)))

 (func $merge-free-entries (export "merge-free-entries")
   (param $blockset i32)
   (param $prior-free-entry i32)
   (param $free-entry i32)
   (param $next-free-entry i32)
   (param $addr i32)

   (local $new-block-ref i32)
   (local $new-free-block i32)
   (local $new-free-entry i32)

   (local.set $new-free-block
              (call $make-block
                    (local.get $addr)
                    (i32.add (call $get-free-entry-size (local.get $free-entry))
                             (call $get-free-entry-size (local.get $next-free-entry)))))

   (call $set-free-entry-addr (local.get $free-entry) (global.get $null))
   (call $set-free-entry-addr (local.get $next-free-entry) (global.get $null))

   (local.set $new-block-ref (call $make-pair
                                   (local.get $new-free-block)
                                   (call $get-pair-cadr (local.get $next-free-entry))))

   (local.set $new-free-entry (call $make-pair
                                    (local.get $new-block-ref)
                                    (call $get-pair-cdr (local.get $next-free-entry))))

   (if (i32.eq (local.get $prior-free-entry) (global.get $null))
       (then
        (call $set-blockset-free-list (local.get $blockset) (local.get $new-free-entry)))
     (else
      (call $set-pair-cdr (local.get $prior-free-entry) (local.get $new-free-entry))))

   (call $insert-blockset-heap-entry
         (local.get $blockset)
         (local.get $new-free-entry))

   (local.get $new-free-entry))

 (func $relocate-blocks (export "relocate-blocks")
   (param $blockset i32)
   (param $dest-addr i32)
   (param $start-ref i32)
   (param $end-ref i32)
   (param $size i32)

   (local $offset i32)
   (local $source-addr i32)
   (local $start-block i32)

   (local.set $start-block (call $get-pair-car (local.get $start-ref)))
   (local.set $source-addr (call $get-block-addr (local.get $start-block)))

   (call_indirect $memory-copy
                  (type $memory-copy-sig)
                  (call $get-blockset-id (local.get $blockset))
                  (local.get $dest-addr)
                  (local.get $source-addr)
                  (local.get $size))

   (local.set $head (local.get $start-ref))
   (local.set $offset (i32.sub (local.get $source-addr) (local.get $dest-addr)))

   (loop $again
     (if (i32.neq (local.get $head) (local.get $end-ref))
         (then
          (call $set-block-ref-addr
                (local.get $head)
                (i32.sub (call $get-block-ref-addr (local.get $head))
                         (local.get $offset)))
          (local.set $head (call $get-pair-cdr (local.get $head)))
          (br $again)))))

 ;;-----------------------------------------------------------------------------
 ;;
 ;; Heap
 ;;
 ;;
 ;;

 (func $provision-blockset-heap (export "provision-blockset-heap")
   (param $blockset i32)
   (param $size i32)

   (local $heap-node i64)

   (local.set $heap-node (call $get-blockset-heap-root-node (local.get $blockset)))

   ;; TODO handle null heap
   (if (call $is-unused-heap-node (local.get $heap-node))
       (then
        (call $bury-unused-heap-node (local.get $heap-node))))

   (if (i32.gt_u (local.get $size)
                 (call $get-heap-node-block-size (local.get $heap)))
       (then
        (call $expand-blockset-heap
              (local.get $blockset)
              (local.get $size)))))

 (func $expand-blockset-heap (export "expand-blockset-heap")
   (param $blockset i32)
   (param $size i32)
   ;; heap is expanded in page-sized units (64KB)

   (local $block i32)
   (local $block-addr i32)
   (local $block-ref i32)
   (local $page-count i32)
   (local $blockset-id i32)

   (local.set $blockset-id (call $get-blockset-id (local.get $blockset)))

   (local.set $page-count (i32.add (i32.shr_u (i32.sub (local.get $size)
                                                       (i32.const 1))
                                              (global.get $page-size-bits))
                                   (i32.const 1)))

   (local.set $block-addr
              (call_indirect $memory-grow
                             (type $memory-grow-sig)
                             (local.get $blockset-id)
                             (local.get $page-count)))

   (local.set $block (call $make-block
                           (local.get $block-addr)
                           (i32.shl (local.get $page-count)
                                    (global.get $page-size-bits))))

   (local.set $block-ref (call $make-pair
                               (local.get $block)
                               (global.get $null)))

   (call $set-pair-cdr
         (call $get-blockset-end-block-ref (local.get $blockset))
         (local.get $block-ref))

   (call $set-blockset-end-block-ref (local.get $block-ref))

   (call $add-free-block (local.get $blockset) (local.get $block-ref)))

 (func $insert-blockset-heap-node (export "insert-blockset-heap-node")
   (param $blockset i32)
   (param $free-list-entry i32)
   ;; TODO rewrite linear
   (call $insert-blockset-heap-node-recursive
         (local.get $blockset)
         (local.get $free-list-entry)
         (call $get-blockset-heap-root (local.get $blockset))
         (call $get-blockset-heap-size (local.get $blockset))))

 (func $insert-blockset-heap-node-recursive (export "insert-blockset-heap-node-recursive")
   (param $blockset i32)
   (param $free-list-entry i32)
   (param $heap i32)
   (param $k i32)

   (local $new-heap-node i32)
   (local $child-node i32)

   (if (i32.le_u (local.get $k) (i32.const 1))
       (then
        (if (call $is-buried-unused-heap-block (local.get $heap))
            (then
             (call $dealloc-free-list-entry (call $get-heap-entry (local.get $heap)))
             (call $set-heap-entry (local.get $heap) (local.get $free-list-entry)))
          (else

           (local.set $new-heap-node (call $make-heap-node (local.get $free-list-entry)))
           (if (i32.eqz (local.get $k))
               (then
                (call $set-heap-left (local.get $new-heap-node)))
             (else
              (call $set-heap-right (local.get $new-heap-node))))
           (call $incr-blockset-heap-size (local.get $blockset)))))

     (else
      (local.set $child-node
                 (if (result i32) (i32.and (local.get $k) (i32.const 1))
                   (then
                    (call $block-heap-right (local.get $heap)))
                   (else
                    (call $block-heap-left (local.get $heap)))))

      (call $insert-blockset-heap-node-recursive
            (local.get $blockset)
            (local.get $free-list-entry)
            (local.get $child-node)
            (i32.shr_u (local.get $k) (i32.const 1)))

      ;; Swim up
      (if (i32.gt_u (call $get-heap-block-size (local.get $child-node))
                    (call $get-heap-block-size (local.get $heap)))
          (then
           (call $swap-heap-blocks (local.get $heap) (local.get $child-node)))))))

 (func $is-buried-unused-heap-block (export "is-buried-unused-heap-block")
   (param $heap i32)
   (result i32)
   (i32.and (i32.eqz (call $get-heap-block-size (local.get $heap)))
            (call $is-unused-heap-block (local.get $heap))))

 (func $is-unused-heap-block (export "is-unused-heap-block")
   (param $heap i32)
   (result i32)
   (i32.eq (call $get-heap-block-addr (local.get $heap))
           (global.get $null)))

 (func $bury-unused-heap-block (export "delete-unused-heap-block")
   (param $heap i32)

   (call $set-heap-block-size (local.get $heap) (i32.const 0))
   (call $sink-heap-block (local.get $heap)))

 (func $sink-heap-block (export "sink-heap-block")
   (param $heap-node i64)

   (local $left i64)
   (local $right i64)

   (loop $again
     (local.set $left (call $get-heap-left (local.get $heap)))
     (local.set $right (call $get-heap-right (local.get $heap)))

     (if (i32.neq (local.get $left) (global.get $null))
         (then
          (if (i32.neq (local.get $right) (global.get $null))
              (then
               (if (i32.gt_u (call $get-heap-block-size (local.get $left))
                             (call $get-heap-block-size (local.get $right)))
                   (then
                    (call $swap-heap-blocks (local.get $heap) (local.get $left))
                    (local.set $heap (local.get $left)))
                 (else
                  (call $swap-heap-blocks (local.get $heap) (local.get $right))
                  (local.set $heap (local.get $right)))))
            (else
             (call $swap-heap-blocks (local.get $heap) (local.get $left))
             (local.set $heap (local.get $left))))
          (br $again))
       (else
        (if (i32.neq (local.get $right) (global.get $null))
            (then
             (call $swap-heap-blocks (local.get $heap) (local.get $right))
             (local.set $heap (local.get $right))
             (br $again)))))))

 (func $swap-heap-blocks (export "swap-heap-blocks")
   (param $heap-node i64)
   (param $child-node i64)

   (local $free-entry i32)

   (local.set $free-entry (call $get-heap-node-entry (local.get $heap-node)))

   (call $set-heap-node-entry
         (local.get $heap-node)
         (call $get-heap-node-entry
               (local.get $child-node)))

   (call $set-heap-node-entry (local.get $child-node) (local.get $free-entry)))

 (func $remove-heap-root (export "remove-heap-root")
   (param $blockset i32)

   (local $heap i32)
   (local $last-node i32)
   (local $new-root-entry i32)
   (local $old-root-entry i32)

   (local.set $heap (call $get-blockset-heap-root (local.get $blockset)))

   (if (i32.neq (local.get $heap) (global.get $null))
       (then
        ;; TODO handle case where heap contains 1 node
        (local.set $last-node (call $remove-last-heap-node))
        (local.set $new-root-entry (call $get-heap-entry (local.get $last-node)))
        (local.set $old-root-entry (call $get-heap-entry (local.get $heap)))

        (call $set-heap-entry (local.get $heap) (local.get $new-root-entry))

        (call $sink-heap-block (local.get $heap))

        (call $remove-free-list-entry (local.get $old-root-entry)))))

 (func $remove-last-heap-node (export "remove-heap-node")
   (param $blockset i32)

   (loop

     )
   ;; loop
   ;;  get last heap node
   ;;  if last heap node is unused
   ;;    remove and dealloc it
   ;;    repeat
   ;;  else
   ;;    remove
   ;;
   nop
   )

 (func $dealloc-free-list-entry (export "dealloc-free-list-entry")
   (param $entry i32)

   ;; the block: contains (addr . size)
   (call $dealloc-pair (call $get-pair-cddr (local.get $node)))

   ;; the block ref: contains (block . null)
   (call $dealloc-pair (call $get-pair-cdr (local.get $node)))

   ;; the free list entry: contains (block-ref . null)
   (call $dealloc-pair (local.get $node)))

 (func $remove-free-list-entry (export "remove-free-list-entry")
   (param $entry i32)
   ;; TODO

   )


 )
