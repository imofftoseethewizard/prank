(module

 ;;=============================================================================
 ;;
 ;; Pairs
 ;;
 ;; Purpose: implement basic data representation
 ;;
 ;; Structure:
 ;;
 ;; Objects: pairs,

 (memory (debug (export "memory")) 1)

 ;; Values
 ;;
 ;; Every location in memory must have an unambiguous interpretation, or be
 ;; unused.

 (include "./globals.wam")
 (include "./gc-client.wam")

 ;;=============================================================================
 ;;
 ;; Pairs
 ;;
 ;; Pairs are the fundamental data type, from which values of all other types
 ;; are referenced.

 (global $pairs-top      (debug (export "pairs-top"))      (mut i32) (i32.const 0xffffffff))
 (global $pair-count     (debug (export "pair-count"))     (mut i32) (i32.const 0x00000000))
 (global $pair-free-list (debug (export "pair-free-list")) (mut i32) (i32.const 0xffffffff))

 ;; create 1 KB of pairs (128 * 8 = 1024) when growing storage
 (global $default-grow-storage-pair-count (export "default-grow-storage-pair-count")
         i32 (i32.const 128))

 ;;-----------------------------------------------------------------------------
 ;;
 ;; Initialization
 ;;

 (start $init-pairs)
 (func $init-pairs (export "init-pairs")

   (global.set $pairs-top (i32.const 0))
   (global.set $pair-count (i32.const 0))
   (global.set $pair-free-list (global.get $null)))

 ;;-----------------------------------------------------------------------------
 ;;
 ;; Accessors
 ;;

 (func $get-pair-addr (export "get-pair-addr")
   (param $pair i32)
   (result i32)
   (local.get $pair))

 (func $get-pair-car (export "get-pair-car")
   (param $pair i32)
   (result i32)
   (i32.load (local.get $pair)))

 (func $get-pair-cdr (export "get-pair-cdr")
   (param $pair i32)
   (result i32)
   (i32.load (i32.add (local.get $pair)
                      (global.get $value-size))))

 (func $get-pair-caar (export "get-pair-caar")
   (param $pair i32)
   (result i32)
   (i32.load (i32.load (local.get $pair))))

 (func $get-pair-cadr (export "get-pair-cadr")
   (param $pair i32)
   (result i32)
   (i32.load (i32.add (i32.load (local.get $pair))
                      (global.get $value-size))))

 (func $get-pair-cdar (export "get-pair-cdar")
   (param $pair i32)
   (result i32)
   (i32.load (i32.load (i32.add (local.get $pair)
                                (global.get $value-size)))))

 (func $get-pair-cddr (export "get-pair-cddr")
   (param $pair i32)
   (result i32)
   (i32.load (i32.add (i32.load (i32.add (local.get $pair)
                                         (global.get $value-size)))
                      (global.get $value-size))))

 (func $get-pair-caaar (export "get-pair-caaar")
   (param $pair i32)
   (result i32)
   (i32.load (i32.load (i32.load (local.get $pair)))))

 (func $get-pair-caadr (export "get-pair-caadr")
   (param $pair i32)
   (result i32)
   (i32.load (i32.add (i32.load (i32.load (local.get $pair)))
                      (global.get $value-size))))


 (func $get-pair-cadar (export "get-pair-cadar")
   (param $pair i32)
   (result i32)
   (i32.load (i32.load (i32.add (i32.load (local.get $pair))
                                (global.get $value-size)))))

 (func $get-pair-caddr (export "get-pair-caddr")
   (param $pair i32)
   (result i32)
   (i32.load (i32.add (i32.load (i32.add (i32.load (local.get $pair))
                                         (global.get $value-size)))
                      (global.get $value-size))))

 (func $get-pair-cdaar (export "get-pair-cdaar")
   (param $pair i32)
   (result i32)
   (i32.load (i32.load (i32.load (i32.add (local.get $pair)
                                          (global.get $value-size))))))

 (func $get-pair-cdadr (export "get-pair-cdadr")
   (param $pair i32)
   (result i32)
   (i32.load (i32.add (i32.load (i32.load (i32.add (local.get $pair)
                                                   (global.get $value-size))))
                      (global.get $value-size))))

 (func $get-pair-cddar (export "get-pair-cddar")
   (param $pair i32)
   (result i32)
   (i32.load (i32.load (i32.add (i32.load (i32.add (local.get $pair)
                                                   (global.get $value-size)))
                                (global.get $value-size)))))

 (func $get-pair-cdddr (export "get-pair-cdddr")
   (param $pair i32)
   (result i32)
   (i32.load (i32.add (i32.load (i32.add (i32.load (i32.add (local.get $pair)
                                                            (global.get $value-size)))
                                         (global.get $value-size)))
                      (global.get $value-size))))

 (func $get-pair-cdr-f32 (export "get-pair-cdr-f32")
   (param $pair i32)
   (result f32)
   (f32.load (i32.add (local.get $pair)
                      (global.get $value-size))))

 (func $get-pair-values (export "get-pair-values")
   (param $pair i32)
   (result i32 i32)
   (i32.load (i32.add (local.get $pair)
                      (global.get $value-size)))
   (i32.load (local.get $pair)))

 (func $get-pair-car-addr (export "get-pair-car-addr")
   (param $pair i32)
   (result i32)
   (local.get $pair))

 (func $get-pair-cdr-addr (export "get-pair-cdr-addr")
   (param $pair i32)
   (result i32)
   (i32.add (local.get $pair)
            (global.get $value-size)))

 (func $set-pair-car (export "set-pair-car")
   (param $pair i32)
   (param $value i32)
   (i32.store (local.get $pair)
              (local.get $value)))

 (func $set-pair-cdr (export "set-pair-cdr")
   (param $pair i32)
   (param $value i32)
   (i32.store (i32.add (local.get $pair)
                       (global.get $value-size))
              (local.get $value)))

 (func $set-pair-caar (export "set-pair-caar")
   (param $pair i32)
   (param $value i32)
   (i32.store (i32.load (local.get $pair))
              (local.get $value)))

 (func $set-pair-cadr (export "set-pair-cadr")
   (param $pair i32)
   (param $value i32)
   (i32.store (i32.add (i32.load (local.get $pair))
                       (global.get $value-size))
              (local.get $value)))

 (func $set-pair-cdar (export "set-pair-cdar")
   (param $pair i32)
   (param $value i32)
   (i32.store (i32.load (i32.add (local.get $pair)
                                 (global.get $value-size)))
              (local.get $value)))

 (func $set-pair-cddr (export "set-pair-cddr")
   (param $pair i32)
   (param $value i32)
   (i32.store (i32.add (i32.load (i32.add (local.get $pair)
                                          (global.get $value-size)))
                       (global.get $value-size))
              (local.get $value)))

 (func $set-pair-caaar (export "set-pair-caaar")
   (param $pair i32)
   (param $value i32)
   (i32.store (i32.load (i32.load (local.get $pair)))
              (local.get $value)))

 (func $set-pair-caadr (export "set-pair-caadr")
   (param $pair i32)
   (param $value i32)
   (i32.store (i32.add (i32.load (i32.load (local.get $pair)))
                       (global.get $value-size))
              (local.get $value)))


 (func $set-pair-cadar (export "set-pair-cadar")
   (param $pair i32)
   (param $value i32)
   (i32.store (i32.load (i32.add (i32.load (local.get $pair))
                                 (global.get $value-size)))
              (local.get $value)))

 (func $set-pair-caddr (export "set-pair-caddr")
   (param $pair i32)
   (param $value i32)
   (i32.store (i32.add (i32.load (i32.add (i32.load (local.get $pair))
                                          (global.get $value-size)))
                       (global.get $value-size))
              (local.get $value)))

 (func $set-pair-cdaar (export "set-pair-cdaar")
   (param $pair i32)
   (param $value i32)
   (i32.store (i32.load (i32.load (i32.add (local.get $pair)
                                           (global.get $value-size))))
              (local.get $value)))

 (func $set-pair-cdadr (export "set-pair-cdadr")
   (param $pair i32)
   (param $value i32)
   (i32.store (i32.add (i32.load (i32.load (i32.add (local.get $pair)
                                                    (global.get $value-size))))
                       (global.get $value-size))
              (local.get $value)))

 (func $set-pair-cddar (export "set-pair-cddar")
   (param $pair i32)
   (param $value i32)
   (i32.store (i32.load (i32.add (i32.load (i32.add (local.get $pair)
                                                    (global.get $value-size)))
                                 (global.get $value-size)))
              (local.get $value)))

 (func $set-pair-cdddr (export "set-pair-cdddr")
   (param $pair i32)
   (param $value i32)
   (i32.store (i32.add (i32.load (i32.add (i32.load (i32.add (local.get $pair)
                                                             (global.get $value-size)))
                                          (global.get $value-size)))
                       (global.get $value-size))
              (local.get $value)))

 (func $set-pair-cdr-f32 (export "set-pair-cdr-f32")
   (param $pair i32)
   (param $value f32)
   (f32.store (i32.add (local.get $pair)
                       (global.get $value-size))
              (local.get $value)))

 ;;-----------------------------------------------------------------------------
 ;;
 ;; Allocation
 ;;

 (func $make-pair (export "make-pair")
   (param $car i32)
   (param $cdr i32)
   (result i32)

   (local $pair-addr i32)

   (local.set $pair-addr (call $alloc-pair))

   (call $set-pair-car (local.get $pair-addr) (local.get $car))
   (call $set-pair-cdr (local.get $pair-addr) (local.get $cdr))

   (local.get $pair-addr))

 (func $alloc-pair (export "alloc-pair")
   (result i32)

   (if (i32.eq (global.get $pair-free-list) (global.get $null))
       (then
        (call $grow-storage (global.get $default-grow-storage-pair-count))))

   (global.set $pair-count (i32.add (global.get $pair-count) (i32.const 1)))

   (global.get $pair-free-list)
   (global.set $pair-free-list (i32.load (global.get $pair-free-list))))

 (func $grow-storage (debug (export "grow-storage"))
   (param $count i32)

   (local $bytes-required i32)
   (local $new-top i32)
   (local $pages-required i32)

   (local.set $new-top (i32.add (global.get $pairs-top)
                                (i32.shl (local.get $count)
                                         (global.get $pair-size-bits))))

   (local.set $bytes-required (i32.sub (local.get $new-top)
                                       (i32.shl (memory.size)
                                                (global.get $page-size))))

   (if (i32.gt_s (local.get $bytes-required) (i32.const 0))
       (then
        (local.set $pages-required (i32.add (i32.shr_u (i32.sub (local.get $bytes-required)
                                                                (i32.const 1))
                                                       (global.get $page-size-bits))
                                            (i32.const 1)))

        (drop (memory.grow (local.get $pages-required)))))

   (call $fill-pair-free-list (local.get $count)))

 (func $fill-pair-free-list (debug (export "fill-pair-free-list"))
   (param $count i32)

   (local $next-pair i32)
   (local $pair i32)
   (local $top i32)

   (local.set $pair (global.get $pairs-top))

   (local.set $top (i32.add (i32.shl (local.get $count)
                                     (global.get $pair-size-bits))
                            (global.get $pairs-top)))

   (loop $again
     (local.set $next-pair (i32.add (local.get $pair) (global.get $pair-size)))
     (if (i32.lt_u (local.get $next-pair) (local.get $top))
         (then
          (i32.store (local.get $pair) (local.get $next-pair))
          (i32.store (i32.add (local.get $pair) (global.get $value-size)) (i32.const 0xdeadce11))
          (local.set $pair (local.get $next-pair))
          (br $again))
       (else
        (i32.store (local.get $pair) (global.get $pair-free-list)))))

   (global.set $pair-free-list (global.get $pairs-top))
   (global.set $pairs-top (local.get $top)))

 ;;-----------------------------------------------------------------------------
 ;;
 ;; Deallocation
 ;;

 (func $dealloc-pair (export "dealloc-pair")
   (param $pair i32)

   (call $set-pair-car (local.get $pair) (global.get $pair-free-list))
   (call $set-pair-cdr (local.get $pair) (i32.const 0xdeadce11))

   (global.set $pair-free-list (local.get $pair))

   (global.set $pair-count (i32.sub (global.get $pair-count) (i32.const 1))))

 ;;-----------------------------------------------------------------------------
 ;;
 ;; Pair Interface Functions
 ;;
 ;; These functions comprise the external interface to pairs.

 (func $cons (export "cons")
   (param $car i32)
   (param $cdr i32)
   (result i32)

   (local $pair-addr i32)
   (local.set $pair-addr (call $make-pair (local.get $car) (local.get $cdr)))

   (call $add-ref (local.get $pair-addr) (local.get $car))
   (call $add-ref (local.get $pair-addr) (local.get $cdr))

   (i32.or (local.get $pair-addr) (global.get $tag-pair)))

 (func $car (export "car")
   (param $pair i32)
   (result i32)
   (i32.load (i32.xor (local.get $pair) (global.get $tag-pair))))

 (func $cdr (export "cdr")
   (param $pair i32)
   (result i32)
   (i32.load (i32.add
              (i32.xor (local.get $pair) (global.get $tag-pair))
              (global.get $value-size))))

 (func $set-car (export "set-car")
   (param $pair i32)
   (param $value i32)

   (call $release (local.get $pair) (call $car (local.get $pair)))

   (i32.store (call $get-pair-car-addr (local.get $pair))
              (local.get $value))

   (call $add-ref (local.get $pair) (local.get $value)))

 (func $set-cdr (export "set-cdr")
   (param $pair i32)
   (param $value i32)

   (call $release (local.get $pair) (call $cdr (local.get $pair)))

   (i32.store (call $get-pair-cdr-addr (local.get $pair))
              (local.get $value))

   (call $add-ref (local.get $pair) (local.get $value)))


 )
